code
proc CG_MachineGunEjectBrass 136 8
file "..\..\..\..\code\cgame\cg_weapons.c"
line 11
;1:// Copyright (C) 1999-2000 Id Software, Inc.
;2://
;3:// cg_weapons.c -- events and effects dealing with weapons
;4:#include "cg_local.h"
;5:
;6:/*
;7:==========================
;8:CG_MachineGunEjectBrass
;9:==========================
;10:*/
;11:static void CG_MachineGunEjectBrass( centity_t *cent ) {
line 16
;12:	localEntity_t	*le;
;13:	refEntity_t		*re;
;14:	vec3_t			velocity, xvelocity;
;15:	vec3_t			offset, xoffset;
;16:	float			waterScale = 1.0f;
ADDRLP4 92
CNSTF4 1065353216
ASGNF4
line 19
;17:	vec3_t			v[3];
;18:
;19:	if ( cg_brassTime.integer <= 0 ) {
ADDRGP4 cg_brassTime+12
INDIRI4
CNSTI4 0
GTI4 $78
line 20
;20:		return;
ADDRGP4 $77
JUMPV
LABELV $78
line 23
;21:	}
;22:
;23:	le = CG_AllocLocalEntity();
ADDRLP4 96
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 96
INDIRP4
ASGNP4
line 24
;24:	re = &le->refEntity;
ADDRLP4 64
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 26
;25:
;26:	velocity[0] = 0;
ADDRLP4 40
CNSTF4 0
ASGNF4
line 27
;27:	velocity[1] = -50 + 40 * crandom();
ADDRLP4 100
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40+4
ADDRLP4 100
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
CNSTF4 1109393408
MULF4
CNSTF4 3259498496
ADDF4
ASGNF4
line 28
;28:	velocity[2] = 100 + 50 * crandom();
ADDRLP4 104
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40+8
ADDRLP4 104
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
CNSTF4 1112014848
MULF4
CNSTF4 1120403456
ADDF4
ASGNF4
line 30
;29:
;30:	le->leType = LE_FRAGMENT;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 3
ASGNI4
line 31
;31:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 32
;32:	le->endTime = le->startTime + cg_brassTime.integer + ( cg_brassTime.integer / 4 ) * random();
ADDRLP4 108
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ADDRGP4 cg_brassTime+12
INDIRI4
ADDI4
CVIF4 4
ADDRGP4 cg_brassTime+12
INDIRI4
CNSTI4 4
DIVI4
CVIF4 4
ADDRLP4 108
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 34
;33:
;34:	le->pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 5
ASGNI4
line 35
;35:	le->pos.trTime = cg.time - (rand()&15);
ADDRLP4 116
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 116
INDIRI4
CNSTI4 15
BANDI4
SUBI4
ASGNI4
line 37
;36:
;37:	AnglesToAxis( cent->lerpAngles, v );
ADDRFP4 0
INDIRP4
CNSTI4 728
ADDP4
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 39
;38:
;39:	offset[0] = 8;
ADDRLP4 52
CNSTF4 1090519040
ASGNF4
line 40
;40:	offset[1] = -4;
ADDRLP4 52+4
CNSTF4 3229614080
ASGNF4
line 41
;41:	offset[2] = 24;
ADDRLP4 52+8
CNSTF4 1103101952
ASGNF4
line 43
;42:
;43:	xoffset[0] = offset[0] * v[0][0] + offset[1] * v[1][0] + offset[2] * v[2][0];
ADDRLP4 80
ADDRLP4 52
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 4+12
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 4+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 44
;44:	xoffset[1] = offset[0] * v[0][1] + offset[1] * v[1][1] + offset[2] * v[2][1];
ADDRLP4 80+4
ADDRLP4 52
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 4+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 4+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 45
;45:	xoffset[2] = offset[0] * v[0][2] + offset[1] * v[1][2] + offset[2] * v[2][2];
ADDRLP4 80+8
ADDRLP4 52
INDIRF4
ADDRLP4 4+8
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 4+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 4+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 46
;46:	VectorAdd( cent->lerpOrigin, xoffset, re->origin );
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 716
ADDP4
INDIRF4
ADDRLP4 80
INDIRF4
ADDF4
ASGNF4
ADDRLP4 64
INDIRP4
CNSTI4 72
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 720
ADDP4
INDIRF4
ADDRLP4 80+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 64
INDIRP4
CNSTI4 76
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 724
ADDP4
INDIRF4
ADDRLP4 80+8
INDIRF4
ADDF4
ASGNF4
line 48
;47:
;48:	VectorCopy( re->origin, le->pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
INDIRB
ASGNB 12
line 50
;49:
;50:	if ( CG_PointContents( re->origin, -1 ) & CONTENTS_WATER ) {
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 120
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 120
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $111
line 51
;51:		waterScale = 0.10f;
ADDRLP4 92
CNSTF4 1036831949
ASGNF4
line 52
;52:	}
LABELV $111
line 54
;53:
;54:	xvelocity[0] = velocity[0] * v[0][0] + velocity[1] * v[1][0] + velocity[2] * v[2][0];
ADDRLP4 68
ADDRLP4 40
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 4+12
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 4+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 55
;55:	xvelocity[1] = velocity[0] * v[0][1] + velocity[1] * v[1][1] + velocity[2] * v[2][1];
ADDRLP4 68+4
ADDRLP4 40
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 4+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 4+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 56
;56:	xvelocity[2] = velocity[0] * v[0][2] + velocity[1] * v[1][2] + velocity[2] * v[2][2];
ADDRLP4 68+8
ADDRLP4 40
INDIRF4
ADDRLP4 4+8
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 4+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 4+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 57
;57:	VectorScale( xvelocity, waterScale, le->pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 68
INDIRF4
ADDRLP4 92
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 68+4
INDIRF4
ADDRLP4 92
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 68+8
INDIRF4
ADDRLP4 92
INDIRF4
MULF4
ASGNF4
line 59
;58:
;59:	AxisCopy( axisDefault, re->axis );
ADDRGP4 axisDefault
ARGP4
ADDRLP4 64
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisCopy
CALLV
pop
line 60
;60:	re->hModel = cgs.media.machinegunBrassModel;
ADDRLP4 64
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cgs+148752+180
INDIRI4
ASGNI4
line 62
;61:
;62:	le->bounceFactor = 0.4 * waterScale;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
ADDRLP4 92
INDIRF4
CNSTF4 1053609165
MULF4
ASGNF4
line 64
;63:
;64:	le->angles.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
CNSTI4 2
ASGNI4
line 65
;65:	le->angles.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 66
;66:	le->angles.trBase[0] = rand()&31;
ADDRLP4 124
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 124
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 67
;67:	le->angles.trBase[1] = rand()&31;
ADDRLP4 128
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 128
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 68
;68:	le->angles.trBase[2] = rand()&31;
ADDRLP4 132
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 132
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 69
;69:	le->angles.trDelta[0] = 2;
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
CNSTF4 1073741824
ASGNF4
line 70
;70:	le->angles.trDelta[1] = 1;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
CNSTF4 1065353216
ASGNF4
line 71
;71:	le->angles.trDelta[2] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 0
ASGNF4
line 73
;72:
;73:	le->leFlags = LEF_TUMBLE;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 2
ASGNI4
line 74
;74:	le->leBounceSoundType = LEBS_BRASS;
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 2
ASGNI4
line 75
;75:	le->leMarkType = LEMT_NONE;
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 0
ASGNI4
line 76
;76:}
LABELV $77
endproc CG_MachineGunEjectBrass 136 8
proc CG_ShotgunEjectBrass 136 8
line 83
;77:
;78:/*
;79:==========================
;80:CG_ShotgunEjectBrass
;81:==========================
;82:*/
;83:static void CG_ShotgunEjectBrass( centity_t *cent ) {
line 91
;84:	localEntity_t	*le;
;85:	refEntity_t		*re;
;86:	vec3_t			velocity, xvelocity;
;87:	vec3_t			offset, xoffset;
;88:	vec3_t			v[3];
;89:	int				i;
;90:
;91:	if ( cg_brassTime.integer <= 0 ) {
ADDRGP4 cg_brassTime+12
INDIRI4
CNSTI4 0
GTI4 $139
line 92
;92:		return;
ADDRGP4 $138
JUMPV
LABELV $139
line 95
;93:	}
;94:
;95:	for ( i = 0; i < 2; i++ ) {
ADDRLP4 92
CNSTI4 0
ASGNI4
LABELV $142
line 96
;96:		float	waterScale = 1.0f;
ADDRLP4 96
CNSTF4 1065353216
ASGNF4
line 98
;97:
;98:		le = CG_AllocLocalEntity();
ADDRLP4 100
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 100
INDIRP4
ASGNP4
line 99
;99:		re = &le->refEntity;
ADDRLP4 64
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 101
;100:
;101:		velocity[0] = 60 + 60 * crandom();
ADDRLP4 104
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40
ADDRLP4 104
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
CNSTF4 1114636288
MULF4
CNSTF4 1114636288
ADDF4
ASGNF4
line 102
;102:		if ( i == 0 ) {
ADDRLP4 92
INDIRI4
CNSTI4 0
NEI4 $146
line 103
;103:			velocity[1] = 40 + 10 * crandom();
ADDRLP4 108
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40+4
ADDRLP4 108
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
CNSTF4 1092616192
MULF4
CNSTF4 1109393408
ADDF4
ASGNF4
line 104
;104:		} else {
ADDRGP4 $147
JUMPV
LABELV $146
line 105
;105:			velocity[1] = -40 + 10 * crandom();
ADDRLP4 108
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40+4
ADDRLP4 108
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
CNSTF4 1092616192
MULF4
CNSTF4 3256877056
ADDF4
ASGNF4
line 106
;106:		}
LABELV $147
line 107
;107:		velocity[2] = 100 + 50 * crandom();
ADDRLP4 108
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40+8
ADDRLP4 108
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
CNSTF4 1112014848
MULF4
CNSTF4 1120403456
ADDF4
ASGNF4
line 109
;108:
;109:		le->leType = LE_FRAGMENT;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 3
ASGNI4
line 110
;110:		le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 111
;111:		le->endTime = le->startTime + cg_brassTime.integer*3 + cg_brassTime.integer * random();
ADDRLP4 112
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ADDRGP4 cg_brassTime+12
INDIRI4
CNSTI4 3
MULI4
ADDI4
CVIF4 4
ADDRGP4 cg_brassTime+12
INDIRI4
CVIF4 4
ADDRLP4 112
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 113
;112:
;113:		le->pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 5
ASGNI4
line 114
;114:		le->pos.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 116
;115:
;116:		AnglesToAxis( cent->lerpAngles, v );
ADDRFP4 0
INDIRP4
CNSTI4 728
ADDP4
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 118
;117:
;118:		offset[0] = 8;
ADDRLP4 52
CNSTF4 1090519040
ASGNF4
line 119
;119:		offset[1] = 0;
ADDRLP4 52+4
CNSTF4 0
ASGNF4
line 120
;120:		offset[2] = 24;
ADDRLP4 52+8
CNSTF4 1103101952
ASGNF4
line 122
;121:
;122:		xoffset[0] = offset[0] * v[0][0] + offset[1] * v[1][0] + offset[2] * v[2][0];
ADDRLP4 80
ADDRLP4 52
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 4+12
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 4+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 123
;123:		xoffset[1] = offset[0] * v[0][1] + offset[1] * v[1][1] + offset[2] * v[2][1];
ADDRLP4 80+4
ADDRLP4 52
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 4+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 4+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 124
;124:		xoffset[2] = offset[0] * v[0][2] + offset[1] * v[1][2] + offset[2] * v[2][2];
ADDRLP4 80+8
ADDRLP4 52
INDIRF4
ADDRLP4 4+8
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 4+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 4+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 125
;125:		VectorAdd( cent->lerpOrigin, xoffset, re->origin );
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 716
ADDP4
INDIRF4
ADDRLP4 80
INDIRF4
ADDF4
ASGNF4
ADDRLP4 64
INDIRP4
CNSTI4 72
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 720
ADDP4
INDIRF4
ADDRLP4 80+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 64
INDIRP4
CNSTI4 76
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 724
ADDP4
INDIRF4
ADDRLP4 80+8
INDIRF4
ADDF4
ASGNF4
line 126
;126:		VectorCopy( re->origin, le->pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
INDIRB
ASGNB 12
line 127
;127:		if ( CG_PointContents( re->origin, -1 ) & CONTENTS_WATER ) {
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 120
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 120
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $179
line 128
;128:			waterScale = 0.10f;
ADDRLP4 96
CNSTF4 1036831949
ASGNF4
line 129
;129:		}
LABELV $179
line 131
;130:
;131:		xvelocity[0] = velocity[0] * v[0][0] + velocity[1] * v[1][0] + velocity[2] * v[2][0];
ADDRLP4 68
ADDRLP4 40
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 4+12
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 4+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 132
;132:		xvelocity[1] = velocity[0] * v[0][1] + velocity[1] * v[1][1] + velocity[2] * v[2][1];
ADDRLP4 68+4
ADDRLP4 40
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 4+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 4+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 133
;133:		xvelocity[2] = velocity[0] * v[0][2] + velocity[1] * v[1][2] + velocity[2] * v[2][2];
ADDRLP4 68+8
ADDRLP4 40
INDIRF4
ADDRLP4 4+8
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 4+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 4+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 134
;134:		VectorScale( xvelocity, waterScale, le->pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 68
INDIRF4
ADDRLP4 96
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 68+4
INDIRF4
ADDRLP4 96
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 68+8
INDIRF4
ADDRLP4 96
INDIRF4
MULF4
ASGNF4
line 136
;135:
;136:		AxisCopy( axisDefault, re->axis );
ADDRGP4 axisDefault
ARGP4
ADDRLP4 64
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisCopy
CALLV
pop
line 137
;137:		re->hModel = cgs.media.shotgunBrassModel;
ADDRLP4 64
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cgs+148752+184
INDIRI4
ASGNI4
line 138
;138:		le->bounceFactor = 0.3f;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 1050253722
ASGNF4
line 140
;139:
;140:		le->angles.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
CNSTI4 2
ASGNI4
line 141
;141:		le->angles.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 142
;142:		le->angles.trBase[0] = rand()&31;
ADDRLP4 124
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 124
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 143
;143:		le->angles.trBase[1] = rand()&31;
ADDRLP4 128
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 128
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 144
;144:		le->angles.trBase[2] = rand()&31;
ADDRLP4 132
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 132
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 145
;145:		le->angles.trDelta[0] = 1;
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
CNSTF4 1065353216
ASGNF4
line 146
;146:		le->angles.trDelta[1] = 0.5;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
CNSTF4 1056964608
ASGNF4
line 147
;147:		le->angles.trDelta[2] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 0
ASGNF4
line 149
;148:
;149:		le->leFlags = LEF_TUMBLE;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 2
ASGNI4
line 150
;150:		le->leBounceSoundType = LEBS_BRASS;
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 2
ASGNI4
line 151
;151:		le->leMarkType = LEMT_NONE;
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 0
ASGNI4
line 152
;152:	}
LABELV $143
line 95
ADDRLP4 92
ADDRLP4 92
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 92
INDIRI4
CNSTI4 2
LTI4 $142
line 153
;153:}
LABELV $138
endproc CG_ShotgunEjectBrass 136 8
export CG_RailTrail
proc CG_RailTrail 608 16
line 195
;154:
;155:
;156:#ifdef MISSIONPACK
;157:/*
;158:==========================
;159:CG_NailgunEjectBrass
;160:==========================
;161:*/
;162:static void CG_NailgunEjectBrass( centity_t *cent ) {
;163:	localEntity_t	*smoke;
;164:	vec3_t			origin;
;165:	vec3_t			v[3];
;166:	vec3_t			offset;
;167:	vec3_t			xoffset;
;168:	vec3_t			up;
;169:
;170:	AnglesToAxis( cent->lerpAngles, v );
;171:
;172:	offset[0] = 0;
;173:	offset[1] = -12;
;174:	offset[2] = 24;
;175:
;176:	xoffset[0] = offset[0] * v[0][0] + offset[1] * v[1][0] + offset[2] * v[2][0];
;177:	xoffset[1] = offset[0] * v[0][1] + offset[1] * v[1][1] + offset[2] * v[2][1];
;178:	xoffset[2] = offset[0] * v[0][2] + offset[1] * v[1][2] + offset[2] * v[2][2];
;179:	VectorAdd( cent->lerpOrigin, xoffset, origin );
;180:
;181:	VectorSet( up, 0, 0, 64 );
;182:
;183:	smoke = CG_SmokePuff( origin, up, 32, 1, 1, 1, 0.33f, 700, cg.time, 0, 0, cgs.media.smokePuffShader );
;184:	// use the optimized local entity add
;185:	smoke->leType = LE_SCALE_FADE;
;186:}
;187:#endif
;188:
;189:
;190:/*
;191:==========================
;192:CG_RailTrail
;193:==========================
;194:*/
;195:void CG_RailTrail( const clientInfo_t *ci, const vec3_t start, const vec3_t end ) {
line 207
;196:	vec3_t axis[36], move, move2, vec, temp;
;197:	float  len;
;198:	int    i, j, skip;
;199: 
;200:	localEntity_t *le;
;201:	refEntity_t   *re;
;202: 
;203:	#define RADIUS   4
;204:	#define ROTATION 1
;205:	#define SPACING  5
;206: 
;207:	le = CG_AllocLocalEntity();
ADDRLP4 504
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 504
INDIRP4
ASGNP4
line 208
;208:	re = &le->refEntity;
ADDRLP4 24
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 210
;209: 
;210:	le->leType = LE_FADE_RGB;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 6
ASGNI4
line 211
;211:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 212
;212:	le->endTime = cg.time + cg_railTrailTime.value;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
ADDRGP4 cg_railTrailTime+8
INDIRF4
ADDF4
CVFI4 4
ASGNI4
line 213
;213:	le->lifeRate = 1.0 / (le->endTime - le->startTime);
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 215
;214: 
;215:	if ( intShaderTime )
ADDRGP4 intShaderTime
INDIRI4
CNSTI4 0
EQI4 $210
line 216
;216:		re->u.intShaderTime = cg.time;
ADDRLP4 24
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
ADDRGP4 $211
JUMPV
LABELV $210
line 218
;217:	else
;218:		re->u.shaderTime = cg.time / 1000.0f;
ADDRLP4 24
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
CNSTF4 981668463
MULF4
ASGNF4
LABELV $211
line 220
;219:
;220:	re->reType = RT_RAIL_CORE;
ADDRLP4 24
INDIRP4
CNSTI4 4
ASGNI4
line 221
;221:	re->customShader = cgs.media.railCoreShader;
ADDRLP4 24
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+148752+192
INDIRI4
ASGNI4
line 223
;222: 
;223:	VectorCopy(start, re->origin);
ADDRLP4 24
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 224
;224:	VectorCopy(end, re->oldorigin);
ADDRLP4 24
INDIRP4
CNSTI4 84
ADDP4
ADDRFP4 8
INDIRP4
INDIRB
ASGNB 12
line 226
;225: 
;226:	re->shaderRGBA[0] = ci->color1[0] * 255;
ADDRLP4 516
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 520
CNSTF4 1325400064
ASGNF4
ADDRLP4 516
INDIRF4
ADDRLP4 520
INDIRF4
LTF4 $217
ADDRLP4 512
ADDRLP4 516
INDIRF4
ADDRLP4 520
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $218
JUMPV
LABELV $217
ADDRLP4 512
ADDRLP4 516
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $218
ADDRLP4 24
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 512
INDIRU4
CVUU1 4
ASGNU1
line 227
;227:	re->shaderRGBA[1] = ci->color1[1] * 255;
ADDRLP4 528
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 532
CNSTF4 1325400064
ASGNF4
ADDRLP4 528
INDIRF4
ADDRLP4 532
INDIRF4
LTF4 $220
ADDRLP4 524
ADDRLP4 528
INDIRF4
ADDRLP4 532
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $221
JUMPV
LABELV $220
ADDRLP4 524
ADDRLP4 528
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $221
ADDRLP4 24
INDIRP4
CNSTI4 117
ADDP4
ADDRLP4 524
INDIRU4
CVUU1 4
ASGNU1
line 228
;228:	re->shaderRGBA[2] = ci->color1[2] * 255;
ADDRLP4 540
ADDRFP4 0
INDIRP4
CNSTI4 52
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 544
CNSTF4 1325400064
ASGNF4
ADDRLP4 540
INDIRF4
ADDRLP4 544
INDIRF4
LTF4 $223
ADDRLP4 536
ADDRLP4 540
INDIRF4
ADDRLP4 544
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $224
JUMPV
LABELV $223
ADDRLP4 536
ADDRLP4 540
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $224
ADDRLP4 24
INDIRP4
CNSTI4 118
ADDP4
ADDRLP4 536
INDIRU4
CVUU1 4
ASGNU1
line 229
;229:	re->shaderRGBA[3] = 255;
ADDRLP4 24
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 255
ASGNU1
line 231
;230:
;231:	le->color[0] = ci->color1[0] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
CNSTF4 1061158912
MULF4
ASGNF4
line 232
;232:	le->color[1] = ci->color1[1] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
CNSTF4 1061158912
MULF4
ASGNF4
line 233
;233:	le->color[2] = ci->color1[2] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 52
ADDP4
INDIRF4
CNSTF4 1061158912
MULF4
ASGNF4
line 234
;234:	le->color[3] = 1.0f;
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1065353216
ASGNF4
line 236
;235:
;236:	AxisClear( re->axis );
ADDRLP4 24
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisClear
CALLV
pop
line 238
;237: 
;238:	if ( cg_oldRail.integer != 0 ) {
ADDRGP4 cg_oldRail+12
INDIRI4
CNSTI4 0
EQI4 $225
line 242
;239:		// nudge down a bit so it isn't exactly in center
;240:		//re->origin[2] -= 8;
;241:		//re->oldorigin[2] -= 8;
;242:		return;
ADDRGP4 $206
JUMPV
LABELV $225
line 246
;243:	}
;244:
;245:	//start[2] -= 4;
;246:	VectorCopy( start, move );
ADDRLP4 8
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 247
;247:	VectorSubtract( end, start, vec );
ADDRLP4 548
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 552
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 28
ADDRLP4 548
INDIRP4
INDIRF4
ADDRLP4 552
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 28+4
ADDRLP4 548
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 552
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 28+8
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
SUBF4
ASGNF4
line 248
;248:	len = VectorNormalize( vec );
ADDRLP4 28
ARGP4
ADDRLP4 556
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 500
ADDRLP4 556
INDIRF4
ASGNF4
line 249
;249:	PerpendicularVector( temp, vec );
ADDRLP4 488
ARGP4
ADDRLP4 28
ARGP4
ADDRGP4 PerpendicularVector
CALLV
pop
line 251
;250:
;251:	for ( i = 0 ; i < 36; i++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $230
line 252
;252:		RotatePointAroundVector( axis[i], vec, temp, i * 10 ); //banshee 2.4 was 10
ADDRLP4 4
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 40
ADDP4
ARGP4
ADDRLP4 28
ARGP4
ADDRLP4 488
ARGP4
ADDRLP4 4
INDIRI4
CNSTI4 10
MULI4
CVIF4 4
ARGF4
ADDRGP4 RotatePointAroundVector
CALLV
pop
line 253
;253:	}
LABELV $231
line 251
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 36
LTI4 $230
line 255
;254:
;255:	VectorMA( move, 20, vec, move );
ADDRLP4 8
ADDRLP4 8
INDIRF4
ADDRLP4 28
INDIRF4
CNSTF4 1101004800
MULF4
ADDF4
ASGNF4
ADDRLP4 8+4
ADDRLP4 8+4
INDIRF4
ADDRLP4 28+4
INDIRF4
CNSTF4 1101004800
MULF4
ADDF4
ASGNF4
ADDRLP4 8+8
ADDRLP4 8+8
INDIRF4
ADDRLP4 28+8
INDIRF4
CNSTF4 1101004800
MULF4
ADDF4
ASGNF4
line 256
;256:	VectorScale( vec, SPACING, vec );
ADDRLP4 28
ADDRLP4 28
INDIRF4
CNSTF4 1084227584
MULF4
ASGNF4
ADDRLP4 28+4
ADDRLP4 28+4
INDIRF4
CNSTF4 1084227584
MULF4
ASGNF4
ADDRLP4 28+8
ADDRLP4 28+8
INDIRF4
CNSTF4 1084227584
MULF4
ASGNF4
line 258
;257:
;258:	skip = -1;
ADDRLP4 484
CNSTI4 -1
ASGNI4
line 260
;259: 
;260:	j = 18;
ADDRLP4 20
CNSTI4 18
ASGNI4
line 261
;261:	for ( i = 0; i < len; i += SPACING ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $247
JUMPV
LABELV $244
line 262
;262:		if ( i != skip ) {
ADDRLP4 4
INDIRI4
ADDRLP4 484
INDIRI4
EQI4 $248
line 263
;263:			skip = i + SPACING;
ADDRLP4 484
ADDRLP4 4
INDIRI4
CNSTI4 5
ADDI4
ASGNI4
line 264
;264:			le = CG_AllocLocalEntity();
ADDRLP4 560
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 560
INDIRP4
ASGNP4
line 265
;265:			re = &le->refEntity;
ADDRLP4 24
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 266
;266:			le->leFlags = LEF_PUFF_DONT_SCALE;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 1
ASGNI4
line 267
;267:			le->leType = LE_MOVE_SCALE_FADE;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 4
ASGNI4
line 268
;268:			le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 269
;269:			le->endTime = cg.time + (i>>1) + 600;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 4
INDIRI4
CNSTI4 1
RSHI4
ADDI4
CNSTI4 600
ADDI4
ASGNI4
line 270
;270:			le->lifeRate = 1.0 / (le->endTime - le->startTime);
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 272
;271:
;272:			if ( intShaderTime )
ADDRGP4 intShaderTime
INDIRI4
CNSTI4 0
EQI4 $252
line 273
;273:				re->u.intShaderTime = cg.time;
ADDRLP4 24
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
ADDRGP4 $253
JUMPV
LABELV $252
line 275
;274:			else
;275:				re->u.shaderTime = cg.time / 1000.0f;
ADDRLP4 24
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
CNSTF4 981668463
MULF4
ASGNF4
LABELV $253
line 277
;276:
;277:			re->reType = RT_SPRITE;
ADDRLP4 24
INDIRP4
CNSTI4 2
ASGNI4
line 278
;278:			re->radius = 1.1f;
ADDRLP4 24
INDIRP4
CNSTI4 132
ADDP4
CNSTF4 1066192077
ASGNF4
line 279
;279:			re->customShader = cgs.media.railRingsShader;
ADDRLP4 24
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+148752+188
INDIRI4
ASGNI4
line 281
;280:
;281:			re->shaderRGBA[0] = ci->color2[0] * 255;
ADDRLP4 572
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 576
CNSTF4 1325400064
ASGNF4
ADDRLP4 572
INDIRF4
ADDRLP4 576
INDIRF4
LTF4 $259
ADDRLP4 568
ADDRLP4 572
INDIRF4
ADDRLP4 576
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $260
JUMPV
LABELV $259
ADDRLP4 568
ADDRLP4 572
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $260
ADDRLP4 24
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 568
INDIRU4
CVUU1 4
ASGNU1
line 282
;282:			re->shaderRGBA[1] = ci->color2[1] * 255;
ADDRLP4 584
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 588
CNSTF4 1325400064
ASGNF4
ADDRLP4 584
INDIRF4
ADDRLP4 588
INDIRF4
LTF4 $262
ADDRLP4 580
ADDRLP4 584
INDIRF4
ADDRLP4 588
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $263
JUMPV
LABELV $262
ADDRLP4 580
ADDRLP4 584
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $263
ADDRLP4 24
INDIRP4
CNSTI4 117
ADDP4
ADDRLP4 580
INDIRU4
CVUU1 4
ASGNU1
line 283
;283:			re->shaderRGBA[2] = ci->color2[2] * 255;
ADDRLP4 596
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 600
CNSTF4 1325400064
ASGNF4
ADDRLP4 596
INDIRF4
ADDRLP4 600
INDIRF4
LTF4 $265
ADDRLP4 592
ADDRLP4 596
INDIRF4
ADDRLP4 600
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $266
JUMPV
LABELV $265
ADDRLP4 592
ADDRLP4 596
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $266
ADDRLP4 24
INDIRP4
CNSTI4 118
ADDP4
ADDRLP4 592
INDIRU4
CVUU1 4
ASGNU1
line 284
;284:			re->shaderRGBA[3] = 255;
ADDRLP4 24
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 255
ASGNU1
line 286
;285:
;286:			le->color[0] = ci->color2[0] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRF4
CNSTF4 1061158912
MULF4
ASGNF4
line 287
;287:			le->color[1] = ci->color2[1] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
INDIRF4
CNSTF4 1061158912
MULF4
ASGNF4
line 288
;288:			le->color[2] = ci->color2[2] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRF4
CNSTF4 1061158912
MULF4
ASGNF4
line 289
;289:			le->color[3] = 1.0f;
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1065353216
ASGNF4
line 291
;290:
;291:			le->pos.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 2
ASGNI4
line 292
;292:			le->pos.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 294
;293:
;294:			VectorCopy( move, move2 );
ADDRLP4 472
ADDRLP4 8
INDIRB
ASGNB 12
line 295
;295:			VectorMA( move2, RADIUS , axis[j], move2 );
ADDRLP4 472
ADDRLP4 472
INDIRF4
ADDRLP4 20
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 40
ADDP4
INDIRF4
CNSTF4 1082130432
MULF4
ADDF4
ASGNF4
ADDRLP4 472+4
ADDRLP4 472+4
INDIRF4
ADDRLP4 20
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 40+4
ADDP4
INDIRF4
CNSTF4 1082130432
MULF4
ADDF4
ASGNF4
ADDRLP4 472+8
ADDRLP4 472+8
INDIRF4
ADDRLP4 20
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 40+8
ADDP4
INDIRF4
CNSTF4 1082130432
MULF4
ADDF4
ASGNF4
line 296
;296:			VectorCopy( move2, le->pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 472
INDIRB
ASGNB 12
line 298
;297:
;298:			le->pos.trDelta[0] = axis[j][0]*6;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 20
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 40
ADDP4
INDIRF4
CNSTF4 1086324736
MULF4
ASGNF4
line 299
;299:			le->pos.trDelta[1] = axis[j][1]*6;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 20
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 40+4
ADDP4
INDIRF4
CNSTF4 1086324736
MULF4
ASGNF4
line 300
;300:			le->pos.trDelta[2] = axis[j][2]*6;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 20
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 40+8
ADDP4
INDIRF4
CNSTF4 1086324736
MULF4
ASGNF4
line 301
;301:		}
LABELV $248
line 303
;302:
;303:		VectorAdd( move, vec, move );
ADDRLP4 8
ADDRLP4 8
INDIRF4
ADDRLP4 28
INDIRF4
ADDF4
ASGNF4
ADDRLP4 8+4
ADDRLP4 8+4
INDIRF4
ADDRLP4 28+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 8+8
ADDRLP4 8+8
INDIRF4
ADDRLP4 28+8
INDIRF4
ADDF4
ASGNF4
line 305
;304:
;305:		j = j + ROTATION < 36 ? j + ROTATION : (j + ROTATION) % 36;
ADDRLP4 20
INDIRI4
CNSTI4 1
ADDI4
CNSTI4 36
GEI4 $283
ADDRLP4 560
ADDRLP4 20
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRGP4 $284
JUMPV
LABELV $283
ADDRLP4 560
ADDRLP4 20
INDIRI4
CNSTI4 1
ADDI4
CNSTI4 36
MODI4
ASGNI4
LABELV $284
ADDRLP4 20
ADDRLP4 560
INDIRI4
ASGNI4
line 306
;306:	}
LABELV $245
line 261
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 5
ADDI4
ASGNI4
LABELV $247
ADDRLP4 4
INDIRI4
CVIF4 4
ADDRLP4 500
INDIRF4
LTF4 $244
line 307
;307:}
LABELV $206
endproc CG_RailTrail 608 16
proc CG_RocketTrail 84 48
line 315
;308:
;309:
;310:/*
;311:==========================
;312:CG_RocketTrail
;313:==========================
;314:*/
;315:static void CG_RocketTrail( centity_t *ent, const weaponInfo_t *wi ) {
line 325
;316:	int		step;
;317:	vec3_t	origin, lastPos;
;318:	int		t;
;319:	int		startTime, contents;
;320:	int		lastContents;
;321:	entityState_t	*es;
;322:	vec3_t	up;
;323:	localEntity_t	*smoke;
;324:
;325:	if ( cg_noProjectileTrail.integer ) {
ADDRGP4 cg_noProjectileTrail+12
INDIRI4
CNSTI4 0
EQI4 $286
line 326
;326:		return;
ADDRGP4 $285
JUMPV
LABELV $286
line 329
;327:	}
;328:
;329:	up[0] = 0;
ADDRLP4 28
CNSTF4 0
ASGNF4
line 330
;330:	up[1] = 0;
ADDRLP4 28+4
CNSTF4 0
ASGNF4
line 331
;331:	up[2] = 0;
ADDRLP4 28+8
CNSTF4 0
ASGNF4
line 333
;332:
;333:	step = 50;
ADDRLP4 20
CNSTI4 50
ASGNI4
line 335
;334:
;335:	es = &ent->currentState;
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
line 336
;336:	startTime = ent->trailTime;
ADDRLP4 56
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
ASGNI4
line 337
;337:	t = step * ( (startTime + step) / step );
ADDRLP4 0
ADDRLP4 20
INDIRI4
ADDRLP4 56
INDIRI4
ADDRLP4 20
INDIRI4
ADDI4
ADDRLP4 20
INDIRI4
DIVI4
MULI4
ASGNI4
line 339
;338:
;339:	BG_EvaluateTrajectory( &es->pos, cg.time, origin );
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 44
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 340
;340:	contents = CG_PointContents( origin, -1 );
ADDRLP4 44
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 68
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 40
ADDRLP4 68
INDIRI4
ASGNI4
line 343
;341:
;342:	// if object (e.g. grenade) is stationary, don't toss up smoke
;343:	if ( es->pos.trType == TR_STATIONARY ) {
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 0
NEI4 $292
line 344
;344:		ent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 345
;345:		return;
ADDRGP4 $285
JUMPV
LABELV $292
line 348
;346:	}
;347:
;348:	BG_EvaluateTrajectory( &es->pos, ent->trailTime, lastPos );
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 349
;349:	lastContents = CG_PointContents( lastPos, -1 );
ADDRLP4 4
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 72
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 60
ADDRLP4 72
INDIRI4
ASGNI4
line 351
;350:
;351:	ent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 353
;352:
;353:	if ( contents & ( CONTENTS_WATER | CONTENTS_SLIME | CONTENTS_LAVA ) ) {
ADDRLP4 40
INDIRI4
CNSTI4 56
BANDI4
CNSTI4 0
EQI4 $303
line 354
;354:		if ( contents & lastContents & CONTENTS_WATER ) {
ADDRLP4 40
INDIRI4
ADDRLP4 60
INDIRI4
BANDI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $285
line 355
;355:			CG_BubbleTrail( lastPos, origin, 8 );
ADDRLP4 4
ARGP4
ADDRLP4 44
ARGP4
CNSTF4 1090519040
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 356
;356:		}
line 357
;357:		return;
ADDRGP4 $285
JUMPV
line 360
;358:	}
;359:
;360:	for ( ; t <= ent->trailTime ; t += step ) {
LABELV $300
line 361
;361:		BG_EvaluateTrajectory( &es->pos, t, lastPos );
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 363
;362:
;363:		smoke = CG_SmokePuff( lastPos, up, 
ADDRLP4 4
ARGP4
ADDRLP4 28
ARGP4
ADDRLP4 76
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 76
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1051260355
ARGF4
ADDRLP4 76
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 cgs+148752+276
INDIRI4
ARGI4
ADDRLP4 80
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 16
ADDRLP4 80
INDIRP4
ASGNP4
line 372
;364:					  wi->trailRadius, 
;365:					  1.0f, 1.0f, 1.0f, 0.33f,
;366:					  wi->wiTrailTime, 
;367:					  t,
;368:					  0,
;369:					  0, 
;370:					  cgs.media.smokePuffShader );
;371:		// use the optimized local entity add
;372:		smoke->leType = LE_SCALE_FADE;
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 7
ASGNI4
line 373
;373:	}
LABELV $301
line 360
ADDRLP4 0
ADDRLP4 0
INDIRI4
ADDRLP4 20
INDIRI4
ADDI4
ASGNI4
LABELV $303
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
LEI4 $300
line 375
;374:
;375:}
LABELV $285
endproc CG_RocketTrail 84 48
proc CG_PlasmaTrail 184 12
line 451
;376:
;377:#ifdef MISSIONPACK
;378:/*
;379:==========================
;380:CG_NailTrail
;381:==========================
;382:*/
;383:static void CG_NailTrail( centity_t *ent, const weaponInfo_t *wi ) {
;384:	int		step;
;385:	vec3_t	origin, lastPos;
;386:	int		t;
;387:	int		startTime, contents;
;388:	int		lastContents;
;389:	entityState_t	*es;
;390:	vec3_t	up;
;391:	localEntity_t	*smoke;
;392:
;393:	if ( cg_noProjectileTrail.integer ) {
;394:		return;
;395:	}
;396:
;397:	up[0] = 0;
;398:	up[1] = 0;
;399:	up[2] = 0;
;400:
;401:	step = 50;
;402:
;403:	es = &ent->currentState;
;404:	startTime = ent->trailTime;
;405:	t = step * ( (startTime + step) / step );
;406:
;407:	BG_EvaluateTrajectory( &es->pos, cg.time, origin );
;408:	contents = CG_PointContents( origin, -1 );
;409:
;410:	// if object (e.g. grenade) is stationary, don't toss up smoke
;411:	if ( es->pos.trType == TR_STATIONARY ) {
;412:		ent->trailTime = cg.time;
;413:		return;
;414:	}
;415:
;416:	BG_EvaluateTrajectory( &es->pos, ent->trailTime, lastPos );
;417:	lastContents = CG_PointContents( lastPos, -1 );
;418:
;419:	ent->trailTime = cg.time;
;420:
;421:	if ( contents & ( CONTENTS_WATER | CONTENTS_SLIME | CONTENTS_LAVA ) ) {
;422:		if ( contents & lastContents & CONTENTS_WATER ) {
;423:			CG_BubbleTrail( lastPos, origin, 8 );
;424:		}
;425:		return;
;426:	}
;427:
;428:	for ( ; t <= ent->trailTime ; t += step ) {
;429:		BG_EvaluateTrajectory( &es->pos, t, lastPos );
;430:
;431:		smoke = CG_SmokePuff( lastPos, up, 
;432:					  wi->trailRadius, 
;433:					  1, 1, 1, 0.33f,
;434:					  wi->wiTrailTime, 
;435:					  t,
;436:					  0,
;437:					  0, 
;438:					  cgs.media.nailPuffShader );
;439:		// use the optimized local entity add
;440:		smoke->leType = LE_SCALE_FADE;
;441:	}
;442:
;443:}
;444:#endif
;445:
;446:/*
;447:==========================
;448:CG_PlasmaTrail
;449:==========================
;450:*/
;451:static void CG_PlasmaTrail( centity_t *cent, const weaponInfo_t *wi ) {
line 459
;452:	localEntity_t	*le;
;453:	refEntity_t		*re;
;454:	entityState_t	*es;
;455:	vec3_t			velocity, xvelocity, origin;
;456:	vec3_t			offset, xoffset;
;457:	vec3_t			v[3];
;458:
;459:	float	waterScale = 1.0f;
ADDRLP4 92
CNSTF4 1065353216
ASGNF4
line 461
;460:
;461:	if ( cg_noProjectileTrail.integer || cg_oldPlasma.integer ) {
ADDRGP4 cg_noProjectileTrail+12
INDIRI4
CNSTI4 0
NEI4 $311
ADDRGP4 cg_oldPlasma+12
INDIRI4
CNSTI4 0
EQI4 $307
LABELV $311
line 462
;462:		return;
ADDRGP4 $306
JUMPV
LABELV $307
line 465
;463:	}
;464:
;465:	es = &cent->currentState;
ADDRLP4 108
ADDRFP4 0
INDIRP4
ASGNP4
line 467
;466:
;467:	BG_EvaluateTrajectory( &es->pos, cg.time, origin );
ADDRLP4 108
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 96
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 469
;468:
;469:	le = CG_AllocLocalEntity();
ADDRLP4 112
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 112
INDIRP4
ASGNP4
line 470
;470:	re = &le->refEntity;
ADDRLP4 40
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 472
;471:
;472:	velocity[0] = 60 - 120 * crandom();
ADDRLP4 116
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 44
CNSTF4 1114636288
ADDRLP4 116
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
CNSTF4 1123024896
MULF4
SUBF4
ASGNF4
line 473
;473:	velocity[1] = 40 - 80 * crandom();
ADDRLP4 120
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 44+4
CNSTF4 1109393408
ADDRLP4 120
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
CNSTF4 1117782016
MULF4
SUBF4
ASGNF4
line 474
;474:	velocity[2] = 100 - 200 * crandom();
ADDRLP4 124
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 44+8
CNSTF4 1120403456
ADDRLP4 124
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
CNSTF4 1128792064
MULF4
SUBF4
ASGNF4
line 476
;475:
;476:	le->leType = LE_MOVE_SCALE_FADE;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 4
ASGNI4
line 477
;477:	le->leFlags = LEF_TUMBLE;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 2
ASGNI4
line 478
;478:	le->leBounceSoundType = LEBS_NONE;
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 0
ASGNI4
line 479
;479:	le->leMarkType = LEMT_NONE;
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 0
ASGNI4
line 481
;480:
;481:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 482
;482:	le->endTime = le->startTime + 600;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 600
ADDI4
ASGNI4
line 484
;483:
;484:	le->pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 5
ASGNI4
line 485
;485:	le->pos.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 487
;486:
;487:	AnglesToAxis( cent->lerpAngles, v );
ADDRFP4 0
INDIRP4
CNSTI4 728
ADDP4
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 489
;488:
;489:	offset[0] = 2;
ADDRLP4 56
CNSTF4 1073741824
ASGNF4
line 490
;490:	offset[1] = 2;
ADDRLP4 56+4
CNSTF4 1073741824
ASGNF4
line 491
;491:	offset[2] = 2;
ADDRLP4 56+8
CNSTF4 1073741824
ASGNF4
line 493
;492:
;493:	xoffset[0] = offset[0] * v[0][0] + offset[1] * v[1][0] + offset[2] * v[2][0];
ADDRLP4 80
ADDRLP4 56
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 56+4
INDIRF4
ADDRLP4 4+12
INDIRF4
MULF4
ADDF4
ADDRLP4 56+8
INDIRF4
ADDRLP4 4+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 494
;494:	xoffset[1] = offset[0] * v[0][1] + offset[1] * v[1][1] + offset[2] * v[2][1];
ADDRLP4 80+4
ADDRLP4 56
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
ADDRLP4 56+4
INDIRF4
ADDRLP4 4+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 56+8
INDIRF4
ADDRLP4 4+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 495
;495:	xoffset[2] = offset[0] * v[0][2] + offset[1] * v[1][2] + offset[2] * v[2][2];
ADDRLP4 80+8
ADDRLP4 56
INDIRF4
ADDRLP4 4+8
INDIRF4
MULF4
ADDRLP4 56+4
INDIRF4
ADDRLP4 4+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 56+8
INDIRF4
ADDRLP4 4+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 497
;496:
;497:	VectorAdd( origin, xoffset, re->origin );
ADDRLP4 40
INDIRP4
CNSTI4 68
ADDP4
ADDRLP4 96
INDIRF4
ADDRLP4 80
INDIRF4
ADDF4
ASGNF4
ADDRLP4 40
INDIRP4
CNSTI4 72
ADDP4
ADDRLP4 96+4
INDIRF4
ADDRLP4 80+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 40
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 96+8
INDIRF4
ADDRLP4 80+8
INDIRF4
ADDF4
ASGNF4
line 498
;498:	VectorCopy( re->origin, le->pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 40
INDIRP4
CNSTI4 68
ADDP4
INDIRB
ASGNB 12
line 500
;499:
;500:	if ( CG_PointContents( re->origin, -1 ) & CONTENTS_WATER ) {
ADDRLP4 40
INDIRP4
CNSTI4 68
ADDP4
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 132
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 132
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $343
line 501
;501:		waterScale = 0.10f;
ADDRLP4 92
CNSTF4 1036831949
ASGNF4
line 502
;502:	}
LABELV $343
line 504
;503:
;504:	xvelocity[0] = velocity[0] * v[0][0] + velocity[1] * v[1][0] + velocity[2] * v[2][0];
ADDRLP4 68
ADDRLP4 44
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 44+4
INDIRF4
ADDRLP4 4+12
INDIRF4
MULF4
ADDF4
ADDRLP4 44+8
INDIRF4
ADDRLP4 4+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 505
;505:	xvelocity[1] = velocity[0] * v[0][1] + velocity[1] * v[1][1] + velocity[2] * v[2][1];
ADDRLP4 68+4
ADDRLP4 44
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
ADDRLP4 44+4
INDIRF4
ADDRLP4 4+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 44+8
INDIRF4
ADDRLP4 4+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 506
;506:	xvelocity[2] = velocity[0] * v[0][2] + velocity[1] * v[1][2] + velocity[2] * v[2][2];
ADDRLP4 68+8
ADDRLP4 44
INDIRF4
ADDRLP4 4+8
INDIRF4
MULF4
ADDRLP4 44+4
INDIRF4
ADDRLP4 4+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 44+8
INDIRF4
ADDRLP4 4+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 507
;507:	VectorScale( xvelocity, waterScale, le->pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 68
INDIRF4
ADDRLP4 92
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 68+4
INDIRF4
ADDRLP4 92
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 68+8
INDIRF4
ADDRLP4 92
INDIRF4
MULF4
ASGNF4
line 509
;508:
;509:	AxisCopy( axisDefault, re->axis );
ADDRGP4 axisDefault
ARGP4
ADDRLP4 40
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisCopy
CALLV
pop
line 511
;510:	
;511:	if ( intShaderTime )
ADDRGP4 intShaderTime
INDIRI4
CNSTI4 0
EQI4 $367
line 512
;512:		re->u.intShaderTime = cg.time;
ADDRLP4 40
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
ADDRGP4 $368
JUMPV
LABELV $367
line 514
;513:	else
;514:		re->u.shaderTime = cg.time / 1000.0f;
ADDRLP4 40
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
CNSTF4 981668463
MULF4
ASGNF4
LABELV $368
line 516
;515:
;516:	re->reType = RT_SPRITE;
ADDRLP4 40
INDIRP4
CNSTI4 2
ASGNI4
line 517
;517:	re->radius = 0.25f;
ADDRLP4 40
INDIRP4
CNSTI4 132
ADDP4
CNSTF4 1048576000
ASGNF4
line 518
;518:	re->customShader = cgs.media.railRingsShader;
ADDRLP4 40
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+148752+188
INDIRI4
ASGNI4
line 519
;519:	le->bounceFactor = 0.3f;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 1050253722
ASGNF4
line 521
;520:
;521:	re->shaderRGBA[0] = wi->flashDlightColor[0] * 63;
ADDRLP4 140
ADDRFP4 4
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
CNSTF4 1115422720
MULF4
ASGNF4
ADDRLP4 144
CNSTF4 1325400064
ASGNF4
ADDRLP4 140
INDIRF4
ADDRLP4 144
INDIRF4
LTF4 $374
ADDRLP4 136
ADDRLP4 140
INDIRF4
ADDRLP4 144
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $375
JUMPV
LABELV $374
ADDRLP4 136
ADDRLP4 140
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $375
ADDRLP4 40
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 136
INDIRU4
CVUU1 4
ASGNU1
line 522
;522:	re->shaderRGBA[1] = wi->flashDlightColor[1] * 63;
ADDRLP4 152
ADDRFP4 4
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
CNSTF4 1115422720
MULF4
ASGNF4
ADDRLP4 156
CNSTF4 1325400064
ASGNF4
ADDRLP4 152
INDIRF4
ADDRLP4 156
INDIRF4
LTF4 $377
ADDRLP4 148
ADDRLP4 152
INDIRF4
ADDRLP4 156
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $378
JUMPV
LABELV $377
ADDRLP4 148
ADDRLP4 152
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $378
ADDRLP4 40
INDIRP4
CNSTI4 117
ADDP4
ADDRLP4 148
INDIRU4
CVUU1 4
ASGNU1
line 523
;523:	re->shaderRGBA[2] = wi->flashDlightColor[2] * 63;
ADDRLP4 164
ADDRFP4 4
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
CNSTF4 1115422720
MULF4
ASGNF4
ADDRLP4 168
CNSTF4 1325400064
ASGNF4
ADDRLP4 164
INDIRF4
ADDRLP4 168
INDIRF4
LTF4 $380
ADDRLP4 160
ADDRLP4 164
INDIRF4
ADDRLP4 168
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $381
JUMPV
LABELV $380
ADDRLP4 160
ADDRLP4 164
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $381
ADDRLP4 40
INDIRP4
CNSTI4 118
ADDP4
ADDRLP4 160
INDIRU4
CVUU1 4
ASGNU1
line 524
;524:	re->shaderRGBA[3] = 63;
ADDRLP4 40
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 63
ASGNU1
line 526
;525:
;526:	le->color[0] = wi->flashDlightColor[0] * 0.2;
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
CNSTF4 1045220557
MULF4
ASGNF4
line 527
;527:	le->color[1] = wi->flashDlightColor[1] * 0.2;
ADDRLP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
CNSTF4 1045220557
MULF4
ASGNF4
line 528
;528:	le->color[2] = wi->flashDlightColor[2] * 0.2;
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
CNSTF4 1045220557
MULF4
ASGNF4
line 529
;529:	le->color[3] = 0.25f;
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1048576000
ASGNF4
line 531
;530:
;531:	le->angles.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
CNSTI4 2
ASGNI4
line 532
;532:	le->angles.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 533
;533:	le->angles.trBase[0] = rand()&31;
ADDRLP4 172
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 172
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 534
;534:	le->angles.trBase[1] = rand()&31;
ADDRLP4 176
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 176
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 535
;535:	le->angles.trBase[2] = rand()&31;
ADDRLP4 180
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 180
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 536
;536:	le->angles.trDelta[0] = 1;
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
CNSTF4 1065353216
ASGNF4
line 537
;537:	le->angles.trDelta[1] = 0.5;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
CNSTF4 1056964608
ASGNF4
line 538
;538:	le->angles.trDelta[2] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 0
ASGNF4
line 539
;539:}
LABELV $306
endproc CG_PlasmaTrail 184 12
export CG_GrappleTrail
proc CG_GrappleTrail 184 16
line 547
;540:
;541:
;542:/*
;543:==========================
;544:CG_GrappleTrail
;545:==========================
;546:*/
;547:void CG_GrappleTrail( centity_t *ent, const weaponInfo_t *wi ) {
line 553
;548:	vec3_t	origin;
;549:	entityState_t	*es;
;550:	vec3_t			forward, up;
;551:	refEntity_t		beam;
;552:
;553:	es = &ent->currentState;
ADDRLP4 164
ADDRFP4 0
INDIRP4
ASGNP4
line 555
;554:
;555:	BG_EvaluateTrajectory( &es->pos, cg.time, origin );
ADDRLP4 164
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 152
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 556
;556:	ent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 558
;557:
;558:	memset( &beam, 0, sizeof( beam ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 560
;559:	//FIXME adjust for muzzle position
;560:	VectorCopy ( cg_entities[ ent->currentState.otherEntityNum ].lerpOrigin, beam.origin );
ADDRLP4 0+68
ADDRFP4 0
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
CNSTI4 740
MULI4
ADDRGP4 cg_entities+716
ADDP4
INDIRB
ASGNB 12
line 561
;561:	beam.origin[2] += 26;
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
CNSTF4 1104150528
ADDF4
ASGNF4
line 562
;562:	AngleVectors( cg_entities[ ent->currentState.otherEntityNum ].lerpAngles, forward, NULL, up );
ADDRFP4 0
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
CNSTI4 740
MULI4
ADDRGP4 cg_entities+728
ADDP4
ARGP4
ADDRLP4 168
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 140
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 563
;563:	VectorMA( beam.origin, -6, up, beam.origin );
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
ADDRLP4 140
INDIRF4
CNSTF4 3233808384
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
ADDRLP4 140+4
INDIRF4
CNSTF4 3233808384
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
ADDRLP4 140+8
INDIRF4
CNSTF4 3233808384
MULF4
ADDF4
ASGNF4
line 564
;564:	VectorCopy( origin, beam.oldorigin );
ADDRLP4 0+84
ADDRLP4 152
INDIRB
ASGNB 12
line 566
;565:
;566:	if (Distance( beam.origin, beam.oldorigin ) < 64 )
ADDRLP4 0+68
ARGP4
ADDRLP4 0+84
ARGP4
ADDRLP4 180
ADDRGP4 Distance
CALLF4
ASGNF4
ADDRLP4 180
INDIRF4
CNSTF4 1115684864
GEF4 $404
line 567
;567:		return; // Don't draw if close
ADDRGP4 $383
JUMPV
LABELV $404
line 569
;568:
;569:	beam.reType = RT_LIGHTNING;
ADDRLP4 0
CNSTI4 6
ASGNI4
line 570
;570:	beam.customShader = cgs.media.lightningShader;
ADDRLP4 0+112
ADDRGP4 cgs+148752+196
INDIRI4
ASGNI4
line 572
;571:
;572:	AxisClear( beam.axis );
ADDRLP4 0+28
ARGP4
ADDRGP4 AxisClear
CALLV
pop
line 573
;573:	beam.shaderRGBA[0] = 0xff;
ADDRLP4 0+116
CNSTU1 255
ASGNU1
line 574
;574:	beam.shaderRGBA[1] = 0xff;
ADDRLP4 0+116+1
CNSTU1 255
ASGNU1
line 575
;575:	beam.shaderRGBA[2] = 0xff;
ADDRLP4 0+116+2
CNSTU1 255
ASGNU1
line 576
;576:	beam.shaderRGBA[3] = 0xff;
ADDRLP4 0+116+3
CNSTU1 255
ASGNU1
line 577
;577:	trap_R_AddRefEntityToScene( &beam );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 578
;578:}
LABELV $383
endproc CG_GrappleTrail 184 16
proc CG_GrenadeTrail 0 8
line 585
;579:
;580:/*
;581:==========================
;582:CG_GrenadeTrail
;583:==========================
;584:*/
;585:static void CG_GrenadeTrail( centity_t *ent, const weaponInfo_t *wi ) {
line 586
;586:	CG_RocketTrail( ent, wi );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 CG_RocketTrail
CALLV
pop
line 587
;587:}
LABELV $419
endproc CG_GrenadeTrail 0 8
export CG_RegisterWeapon
proc CG_RegisterWeapon 300 12
line 597
;588:
;589:
;590:/*
;591:=================
;592:CG_RegisterWeapon
;593:
;594:The server says this item is used on this level
;595:=================
;596:*/
;597:void CG_RegisterWeapon( int weaponNum ) {
line 604
;598:	weaponInfo_t	*weaponInfo;
;599:	gitem_t			*item, *ammo;
;600:	char			path[MAX_QPATH];
;601:	vec3_t			mins, maxs;
;602:	int				i;
;603:
;604:	weaponInfo = &cg_weapons[weaponNum];
ADDRLP4 12
ADDRFP4 0
INDIRI4
CNSTI4 136
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 606
;605:
;606:	if ( weaponNum == 0 ) {
ADDRFP4 0
INDIRI4
CNSTI4 0
NEI4 $421
line 607
;607:		return;
ADDRGP4 $420
JUMPV
LABELV $421
line 610
;608:	}
;609:
;610:	if ( weaponInfo->registered ) {
ADDRLP4 12
INDIRP4
INDIRI4
CNSTI4 0
EQI4 $423
line 611
;611:		return;
ADDRGP4 $420
JUMPV
LABELV $423
line 614
;612:	}
;613:
;614:	memset( weaponInfo, 0, sizeof( *weaponInfo ) );
ADDRLP4 12
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 136
ARGI4
ADDRGP4 memset
CALLP4
pop
line 615
;615:	weaponInfo->registered = qtrue;
ADDRLP4 12
INDIRP4
CNSTI4 1
ASGNI4
line 617
;616:
;617:	for ( item = bg_itemlist + 1 ; item->classname ; item++ ) {
ADDRLP4 4
ADDRGP4 bg_itemlist+52
ASGNP4
ADDRGP4 $428
JUMPV
LABELV $425
line 618
;618:		if ( item->giType == IT_WEAPON && item->giTag == weaponNum ) {
ADDRLP4 4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 1
NEI4 $430
ADDRLP4 4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
ADDRFP4 0
INDIRI4
NEI4 $430
line 619
;619:			weaponInfo->item = item;
ADDRLP4 12
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 4
INDIRP4
ASGNP4
line 620
;620:			break;
ADDRGP4 $427
JUMPV
LABELV $430
line 622
;621:		}
;622:	}
LABELV $426
line 617
ADDRLP4 4
ADDRLP4 4
INDIRP4
CNSTI4 52
ADDP4
ASGNP4
LABELV $428
ADDRLP4 4
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $425
LABELV $427
line 623
;623:	if ( !item->classname ) {
ADDRLP4 4
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $432
line 624
;624:		CG_Error( "Couldn't find weapon %i", weaponNum );
ADDRGP4 $434
ARGP4
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 CG_Error
CALLV
pop
line 625
;625:	}
LABELV $432
line 626
;626:	CG_RegisterItemVisuals( item - bg_itemlist );
ADDRLP4 4
INDIRP4
CVPU4 4
ADDRGP4 bg_itemlist
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 52
DIVI4
ARGI4
ADDRGP4 CG_RegisterItemVisuals
CALLV
pop
line 629
;627:
;628:	// load cmodel before model so filecache works
;629:	weaponInfo->weaponModel = trap_R_RegisterModel( item->world_model[0] );
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 104
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 104
INDIRI4
ASGNI4
line 632
;630:
;631:	// calc midpoint for rotation
;632:	trap_R_ModelBounds( weaponInfo->weaponModel, mins, maxs );
ADDRLP4 12
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ARGI4
ADDRLP4 16
ARGP4
ADDRLP4 92
ARGP4
ADDRGP4 trap_R_ModelBounds
CALLV
pop
line 633
;633:	for ( i = 0 ; i < 3 ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $435
line 634
;634:		weaponInfo->weaponMidpoint[i] = mins[i] + 0.5 * ( maxs[i] - mins[i] );
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 12
INDIRP4
CNSTI4 24
ADDP4
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 16
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 92
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 16
ADDP4
INDIRF4
SUBF4
CNSTF4 1056964608
MULF4
ADDF4
ASGNF4
line 635
;635:	}
LABELV $436
line 633
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $435
line 637
;636:
;637:	weaponInfo->weaponIcon = trap_R_RegisterShader( item->icon );
ADDRLP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRP4
ARGP4
ADDRLP4 108
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 68
ADDP4
ADDRLP4 108
INDIRI4
ASGNI4
line 638
;638:	weaponInfo->ammoIcon = trap_R_RegisterShader( item->icon );
ADDRLP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRP4
ARGP4
ADDRLP4 112
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 72
ADDP4
ADDRLP4 112
INDIRI4
ASGNI4
line 640
;639:
;640:	for ( ammo = bg_itemlist + 1 ; ammo->classname ; ammo++ ) {
ADDRLP4 8
ADDRGP4 bg_itemlist+52
ASGNP4
ADDRGP4 $442
JUMPV
LABELV $439
line 641
;641:		if ( ammo->giType == IT_AMMO && ammo->giTag == weaponNum ) {
ADDRLP4 8
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 2
NEI4 $444
ADDRLP4 8
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
ADDRFP4 0
INDIRI4
NEI4 $444
line 642
;642:			break;
ADDRGP4 $441
JUMPV
LABELV $444
line 644
;643:		}
;644:	}
LABELV $440
line 640
ADDRLP4 8
ADDRLP4 8
INDIRP4
CNSTI4 52
ADDP4
ASGNP4
LABELV $442
ADDRLP4 8
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $439
LABELV $441
line 645
;645:	if ( ammo->classname && ammo->world_model[0] ) {
ADDRLP4 8
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $446
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $446
line 646
;646:		weaponInfo->ammoModel = trap_R_RegisterModel( ammo->world_model[0] );
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 120
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 120
INDIRI4
ASGNI4
line 647
;647:	}
LABELV $446
line 649
;648:
;649:	COM_StripExtension( item->world_model[0], path, sizeof(path) );
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 28
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 COM_StripExtension
CALLV
pop
line 650
;650:	Q_strcat( path, sizeof(path), "_flash.md3" );
ADDRLP4 28
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $448
ARGP4
ADDRGP4 Q_strcat
CALLV
pop
line 651
;651:	weaponInfo->flashModel = trap_R_RegisterModel( path );
ADDRLP4 28
ARGP4
ADDRLP4 120
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 120
INDIRI4
ASGNI4
line 653
;652:
;653:	COM_StripExtension( item->world_model[0], path, sizeof(path) );
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 28
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 COM_StripExtension
CALLV
pop
line 654
;654:	Q_strcat( path, sizeof(path), "_barrel.md3" );
ADDRLP4 28
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $449
ARGP4
ADDRGP4 Q_strcat
CALLV
pop
line 655
;655:	weaponInfo->barrelModel = trap_R_RegisterModel( path );
ADDRLP4 28
ARGP4
ADDRLP4 124
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 124
INDIRI4
ASGNI4
line 657
;656:
;657:	COM_StripExtension( item->world_model[0], path, sizeof(path) );
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 28
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 COM_StripExtension
CALLV
pop
line 658
;658:	Q_strcat( path, sizeof(path), "_hand.md3" );
ADDRLP4 28
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $450
ARGP4
ADDRGP4 Q_strcat
CALLV
pop
line 659
;659:	weaponInfo->handsModel = trap_R_RegisterModel( path );
ADDRLP4 28
ARGP4
ADDRLP4 128
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 128
INDIRI4
ASGNI4
line 661
;660:
;661:	if ( !weaponInfo->handsModel ) {
ADDRLP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 0
NEI4 $451
line 662
;662:		weaponInfo->handsModel = trap_R_RegisterModel( "models/weapons2/shotgun/shotgun_hand.md3" );
ADDRGP4 $453
ARGP4
ADDRLP4 132
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 132
INDIRI4
ASGNI4
line 663
;663:	}
LABELV $451
line 665
;664:
;665:	weaponInfo->loopFireSound = qfalse;
ADDRLP4 12
INDIRP4
CNSTI4 132
ADDP4
CNSTI4 0
ASGNI4
line 667
;666:
;667:	switch ( weaponNum ) {
ADDRLP4 132
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 132
INDIRI4
CNSTI4 1
LTI4 $454
ADDRLP4 132
INDIRI4
CNSTI4 10
GTI4 $454
ADDRLP4 132
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $529-4
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $529
address $456
address $480
address $488
address $496
address $490
address $459
address $511
address $502
address $522
address $478
code
LABELV $456
line 669
;668:	case WP_GAUNTLET:
;669:		MAKERGB( weaponInfo->flashDlightColor, 0.6f, 0.6f, 1.0f );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 1065353216
ASGNF4
line 670
;670:		weaponInfo->firingSound = trap_S_RegisterSound( "sound/weapons/melee/fstrun.wav", qfalse );
ADDRGP4 $457
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 136
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 128
ADDP4
ADDRLP4 136
INDIRI4
ASGNI4
line 671
;671:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/melee/fstatck.wav", qfalse );
ADDRGP4 $458
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 140
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 140
INDIRI4
ASGNI4
line 672
;672:		break;
ADDRGP4 $455
JUMPV
LABELV $459
line 675
;673:
;674:	case WP_LIGHTNING:
;675:		MAKERGB( weaponInfo->flashDlightColor, 0.6f, 0.6f, 1.0f );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 1065353216
ASGNF4
line 676
;676:		weaponInfo->readySound = trap_S_RegisterSound( "sound/weapons/melee/fsthum.wav", qfalse );
ADDRGP4 $460
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 144
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 124
ADDP4
ADDRLP4 144
INDIRI4
ASGNI4
line 677
;677:		weaponInfo->firingSound = trap_S_RegisterSound( "sound/weapons/lightning/lg_hum.wav", qfalse );
ADDRGP4 $461
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 148
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 128
ADDP4
ADDRLP4 148
INDIRI4
ASGNI4
line 679
;678:
;679:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/lightning/lg_fire.wav", qfalse );
ADDRGP4 $462
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 152
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 152
INDIRI4
ASGNI4
line 680
;680:		cgs.media.lightningShader = trap_R_RegisterShader( "lightningBoltNew");
ADDRGP4 $465
ARGP4
ADDRLP4 156
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+148752+196
ADDRLP4 156
INDIRI4
ASGNI4
line 681
;681:		cgs.media.lightningExplosionModel = trap_R_RegisterModel( "models/weaphits/crackle.md3" );
ADDRGP4 $468
ARGP4
ADDRLP4 160
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRGP4 cgs+148752+456
ADDRLP4 160
INDIRI4
ASGNI4
line 682
;682:		cgs.media.sfx_lghit1 = trap_S_RegisterSound( "sound/weapons/lightning/lg_hit.wav", qfalse );
ADDRGP4 $471
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 164
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRGP4 cgs+148752+668
ADDRLP4 164
INDIRI4
ASGNI4
line 683
;683:		cgs.media.sfx_lghit2 = trap_S_RegisterSound( "sound/weapons/lightning/lg_hit2.wav", qfalse );
ADDRGP4 $474
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 168
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRGP4 cgs+148752+672
ADDRLP4 168
INDIRI4
ASGNI4
line 684
;684:		cgs.media.sfx_lghit3 = trap_S_RegisterSound( "sound/weapons/lightning/lg_hit3.wav", qfalse );
ADDRGP4 $477
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 172
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRGP4 cgs+148752+676
ADDRLP4 172
INDIRI4
ASGNI4
line 686
;685:
;686:		break;
ADDRGP4 $455
JUMPV
LABELV $478
line 689
;687:
;688:	case WP_GRAPPLING_HOOK:
;689:		MAKERGB( weaponInfo->flashDlightColor, 0.6f, 0.6f, 1.0f );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 1065353216
ASGNF4
line 690
;690:		weaponInfo->missileModel = trap_R_RegisterModel( "models/ammo/rocket/rocket.md3" );
ADDRGP4 $479
ARGP4
ADDRLP4 176
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 176
INDIRI4
ASGNI4
line 691
;691:		weaponInfo->missileTrailFunc = CG_GrappleTrail;
ADDRLP4 12
INDIRP4
CNSTI4 88
ADDP4
ADDRGP4 CG_GrappleTrail
ASGNP4
line 692
;692:		weaponInfo->missileDlight = HOOK_GLOW_RADIUS;
ADDRLP4 12
INDIRP4
CNSTI4 92
ADDP4
CNSTF4 1128792064
ASGNF4
line 693
;693:		weaponInfo->wiTrailTime = 2000;
ADDRLP4 12
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1157234688
ASGNF4
line 694
;694:		weaponInfo->trailRadius = 64;
ADDRLP4 12
INDIRP4
CNSTI4 116
ADDP4
CNSTF4 1115684864
ASGNF4
line 695
;695:		MAKERGB( weaponInfo->missileDlightColor, 1, 0.75f, 0 );
ADDRLP4 12
INDIRP4
CNSTI4 96
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 1061158912
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 0
ASGNF4
line 696
;696:		weaponInfo->readySound = trap_S_RegisterSound( "sound/weapons/melee/fsthum.wav", qfalse );
ADDRGP4 $460
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 180
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 124
ADDP4
ADDRLP4 180
INDIRI4
ASGNI4
line 697
;697:		weaponInfo->firingSound = trap_S_RegisterSound( "sound/weapons/melee/fstrun.wav", qfalse );
ADDRGP4 $457
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 184
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 128
ADDP4
ADDRLP4 184
INDIRI4
ASGNI4
line 698
;698:		break;
ADDRGP4 $455
JUMPV
LABELV $480
line 715
;699:
;700:#ifdef MISSIONPACK
;701:	case WP_CHAINGUN:
;702:		weaponInfo->firingSound = trap_S_RegisterSound( "sound/weapons/vulcan/wvulfire.wav", qfalse );
;703:		weaponInfo->loopFireSound = qtrue;
;704:		MAKERGB( weaponInfo->flashDlightColor, 1, 1, 0 );
;705:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/vulcan/vulcanf1b.wav", qfalse );
;706:		weaponInfo->flashSound[1] = trap_S_RegisterSound( "sound/weapons/vulcan/vulcanf2b.wav", qfalse );
;707:		weaponInfo->flashSound[2] = trap_S_RegisterSound( "sound/weapons/vulcan/vulcanf3b.wav", qfalse );
;708:		weaponInfo->flashSound[3] = trap_S_RegisterSound( "sound/weapons/vulcan/vulcanf4b.wav", qfalse );
;709:		weaponInfo->ejectBrassFunc = CG_MachineGunEjectBrass;
;710:		cgs.media.bulletExplosionShader = trap_R_RegisterShader( "bulletExplosion" );
;711:		break;
;712:#endif
;713:
;714:	case WP_MACHINEGUN:
;715:		MAKERGB( weaponInfo->flashDlightColor, 1, 1, 0 );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 716
;716:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/machinegun/machgf1b.wav", qfalse );
ADDRGP4 $481
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 188
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 188
INDIRI4
ASGNI4
line 717
;717:		weaponInfo->flashSound[1] = trap_S_RegisterSound( "sound/weapons/machinegun/machgf2b.wav", qfalse );
ADDRGP4 $482
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 192
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 192
INDIRI4
ASGNI4
line 718
;718:		weaponInfo->flashSound[2] = trap_S_RegisterSound( "sound/weapons/machinegun/machgf3b.wav", qfalse );
ADDRGP4 $483
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 196
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 196
INDIRI4
ASGNI4
line 719
;719:		weaponInfo->flashSound[3] = trap_S_RegisterSound( "sound/weapons/machinegun/machgf4b.wav", qfalse );
ADDRGP4 $484
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 200
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 200
INDIRI4
ASGNI4
line 720
;720:		weaponInfo->ejectBrassFunc = CG_MachineGunEjectBrass;
ADDRLP4 12
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 CG_MachineGunEjectBrass
ASGNP4
line 721
;721:		cgs.media.bulletExplosionShader = trap_R_RegisterShader( "bulletExplosion" );
ADDRGP4 $487
ARGP4
ADDRLP4 204
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+148752+468
ADDRLP4 204
INDIRI4
ASGNI4
line 722
;722:		break;
ADDRGP4 $455
JUMPV
LABELV $488
line 725
;723:
;724:	case WP_SHOTGUN:
;725:		MAKERGB( weaponInfo->flashDlightColor, 1, 1, 0 );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 726
;726:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/shotgun/sshotf1b.wav", qfalse );
ADDRGP4 $489
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 208
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 208
INDIRI4
ASGNI4
line 727
;727:		weaponInfo->ejectBrassFunc = CG_ShotgunEjectBrass;
ADDRLP4 12
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 CG_ShotgunEjectBrass
ASGNP4
line 728
;728:		break;
ADDRGP4 $455
JUMPV
LABELV $490
line 731
;729:
;730:	case WP_ROCKET_LAUNCHER:
;731:		weaponInfo->missileModel = trap_R_RegisterModel( "models/ammo/rocket/rocket.md3" );
ADDRGP4 $479
ARGP4
ADDRLP4 212
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 212
INDIRI4
ASGNI4
line 732
;732:		weaponInfo->missileSound = trap_S_RegisterSound( "sound/weapons/rocket/rockfly.wav", qfalse );
ADDRGP4 $491
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 216
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 216
INDIRI4
ASGNI4
line 733
;733:		weaponInfo->missileTrailFunc = CG_RocketTrail;
ADDRLP4 12
INDIRP4
CNSTI4 88
ADDP4
ADDRGP4 CG_RocketTrail
ASGNP4
line 734
;734:		weaponInfo->missileDlight = MISSILE_GLOW_RADIUS;
ADDRLP4 12
INDIRP4
CNSTI4 92
ADDP4
CNSTF4 1128792064
ASGNF4
line 735
;735:		weaponInfo->wiTrailTime = 2000;
ADDRLP4 12
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1157234688
ASGNF4
line 736
;736:		weaponInfo->trailRadius = 64;
ADDRLP4 12
INDIRP4
CNSTI4 116
ADDP4
CNSTF4 1115684864
ASGNF4
line 738
;737:		
;738:		MAKERGB( weaponInfo->missileDlightColor, 1, 0.75f, 0 );
ADDRLP4 12
INDIRP4
CNSTI4 96
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 1061158912
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 0
ASGNF4
line 739
;739:		MAKERGB( weaponInfo->flashDlightColor, 1, 0.75f, 0 );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1061158912
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 741
;740:
;741:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/rocket/rocklf1a.wav", qfalse );
ADDRGP4 $492
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 220
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 220
INDIRI4
ASGNI4
line 742
;742:		cgs.media.rocketExplosionShader = trap_R_RegisterShader( "rocketExplosion" );
ADDRGP4 $495
ARGP4
ADDRLP4 224
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+148752+472
ADDRLP4 224
INDIRI4
ASGNI4
line 743
;743:		break;
ADDRGP4 $455
JUMPV
LABELV $496
line 758
;744:
;745:#ifdef MISSIONPACK
;746:	case WP_PROX_LAUNCHER:
;747:		weaponInfo->missileModel = trap_R_RegisterModel( "models/weaphits/proxmine.md3" );
;748:		weaponInfo->missileTrailFunc = CG_GrenadeTrail;
;749:		weaponInfo->wiTrailTime = 700;
;750:		weaponInfo->trailRadius = 32;
;751:		MAKERGB( weaponInfo->flashDlightColor, 1, 0.70f, 0 );
;752:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/proxmine/wstbfire.wav", qfalse );
;753:		cgs.media.grenadeExplosionShader = trap_R_RegisterShader( "grenadeExplosion" );
;754:		break;
;755:#endif
;756:
;757:	case WP_GRENADE_LAUNCHER:
;758:		weaponInfo->missileModel = trap_R_RegisterModel( "models/ammo/grenade1.md3" );
ADDRGP4 $497
ARGP4
ADDRLP4 228
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 228
INDIRI4
ASGNI4
line 759
;759:		weaponInfo->missileTrailFunc = CG_GrenadeTrail;
ADDRLP4 12
INDIRP4
CNSTI4 88
ADDP4
ADDRGP4 CG_GrenadeTrail
ASGNP4
line 760
;760:		weaponInfo->wiTrailTime = 700;
ADDRLP4 12
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1143930880
ASGNF4
line 761
;761:		weaponInfo->trailRadius = 32;
ADDRLP4 12
INDIRP4
CNSTI4 116
ADDP4
CNSTF4 1107296256
ASGNF4
line 762
;762:		MAKERGB( weaponInfo->flashDlightColor, 1, 0.70f, 0 );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1060320051
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 763
;763:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/grenade/grenlf1a.wav", qfalse );
ADDRGP4 $498
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 232
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 232
INDIRI4
ASGNI4
line 764
;764:		cgs.media.grenadeExplosionShader = trap_R_RegisterShader( "grenadeExplosion" );
ADDRGP4 $501
ARGP4
ADDRLP4 236
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+148752+476
ADDRLP4 236
INDIRI4
ASGNI4
line 765
;765:		break;
ADDRGP4 $455
JUMPV
LABELV $502
line 782
;766:
;767:#ifdef MISSIONPACK
;768:	case WP_NAILGUN:
;769:		weaponInfo->ejectBrassFunc = CG_NailgunEjectBrass;
;770:		weaponInfo->missileTrailFunc = CG_NailTrail;
;771://		weaponInfo->missileSound = trap_S_RegisterSound( "sound/weapons/nailgun/wnalflit.wav", qfalse );
;772:		weaponInfo->trailRadius = 16;
;773:		weaponInfo->wiTrailTime = 250;
;774:		weaponInfo->missileModel = trap_R_RegisterModel( "models/weaphits/nail.md3" );
;775:		MAKERGB( weaponInfo->flashDlightColor, 1, 0.75f, 0 );
;776:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/nailgun/wnalfire.wav", qfalse );
;777:		break;
;778:#endif
;779:
;780:	case WP_PLASMAGUN:
;781://		weaponInfo->missileModel = cgs.media.invulnerabilityPowerupModel;
;782:		weaponInfo->missileTrailFunc = CG_PlasmaTrail;
ADDRLP4 12
INDIRP4
CNSTI4 88
ADDP4
ADDRGP4 CG_PlasmaTrail
ASGNP4
line 783
;783:		weaponInfo->missileSound = trap_S_RegisterSound( "sound/weapons/plasma/lasfly.wav", qfalse );
ADDRGP4 $503
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 240
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 240
INDIRI4
ASGNI4
line 786
;784:
;785:		// plasmagun dlight
;786:		weaponInfo->missileDlight = MISSILE_GLOW_RADIUS;
ADDRLP4 12
INDIRP4
CNSTI4 92
ADDP4
CNSTF4 1128792064
ASGNF4
line 787
;787:		MAKERGB( weaponInfo->missileDlightColor, 0.2f, 0.2f, 1.0f );
ADDRLP4 12
INDIRP4
CNSTI4 96
ADDP4
CNSTF4 1045220557
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 1045220557
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 1065353216
ASGNF4
line 789
;788:
;789:		MAKERGB( weaponInfo->flashDlightColor, 0.6f, 0.6f, 1.0f );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 1065353216
ASGNF4
line 790
;790:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/plasma/hyprbf1a.wav", qfalse );
ADDRGP4 $504
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 244
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 244
INDIRI4
ASGNI4
line 791
;791:		cgs.media.plasmaExplosionShader = trap_R_RegisterShader( "plasmaExplosion" );
ADDRGP4 $507
ARGP4
ADDRLP4 248
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+148752+464
ADDRLP4 248
INDIRI4
ASGNI4
line 792
;792:		cgs.media.railRingsShader = trap_R_RegisterShader( "railDisc" );
ADDRGP4 $510
ARGP4
ADDRLP4 252
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+148752+188
ADDRLP4 252
INDIRI4
ASGNI4
line 793
;793:		break;
ADDRGP4 $455
JUMPV
LABELV $511
line 796
;794:
;795:	case WP_RAILGUN:
;796:		weaponInfo->readySound = trap_S_RegisterSound( "sound/weapons/railgun/rg_hum.wav", qfalse );
ADDRGP4 $512
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 256
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 124
ADDP4
ADDRLP4 256
INDIRI4
ASGNI4
line 797
;797:		MAKERGB( weaponInfo->flashDlightColor, 1, 0.5f, 0 );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1056964608
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 798
;798:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/railgun/railgf1a.wav", qfalse );
ADDRGP4 $513
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 260
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 260
INDIRI4
ASGNI4
line 799
;799:		cgs.media.railExplosionShader = trap_R_RegisterShader( "railExplosion" );
ADDRGP4 $516
ARGP4
ADDRLP4 264
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+148752+460
ADDRLP4 264
INDIRI4
ASGNI4
line 800
;800:		cgs.media.railRingsShader = trap_R_RegisterShader( "railDisc" );
ADDRGP4 $510
ARGP4
ADDRLP4 268
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+148752+188
ADDRLP4 268
INDIRI4
ASGNI4
line 801
;801:		cgs.media.railCoreShader = trap_R_RegisterShader( "railCore" );
ADDRGP4 $521
ARGP4
ADDRLP4 272
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+148752+192
ADDRLP4 272
INDIRI4
ASGNI4
line 802
;802:		break;
ADDRGP4 $455
JUMPV
LABELV $522
line 805
;803:
;804:	case WP_BFG:
;805:		weaponInfo->readySound = trap_S_RegisterSound( "sound/weapons/bfg/bfg_hum.wav", qfalse );
ADDRGP4 $523
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 276
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 124
ADDP4
ADDRLP4 276
INDIRI4
ASGNI4
line 808
;806:
;807:		// bfg dlight
;808:		weaponInfo->missileDlight = MISSILE_GLOW_RADIUS;
ADDRLP4 12
INDIRP4
CNSTI4 92
ADDP4
CNSTF4 1128792064
ASGNF4
line 809
;809:		MAKERGB( weaponInfo->missileDlightColor, 0.2f, 1.0f, 0.2f );
ADDRLP4 12
INDIRP4
CNSTI4 96
ADDP4
CNSTF4 1045220557
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 1045220557
ASGNF4
line 811
;810:
;811:		MAKERGB( weaponInfo->flashDlightColor, 1.0f, 0.7f, 1.0f );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1060320051
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 1065353216
ASGNF4
line 812
;812:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/bfg/bfg_fire.wav", qfalse );
ADDRGP4 $524
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 280
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 280
INDIRI4
ASGNI4
line 813
;813:		cgs.media.bfgExplosionShader = trap_R_RegisterShader( "bfgExplosion" );
ADDRGP4 $527
ARGP4
ADDRLP4 284
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+148752+480
ADDRLP4 284
INDIRI4
ASGNI4
line 814
;814:		weaponInfo->missileModel = trap_R_RegisterModel( "models/weaphits/bfg.md3" );
ADDRGP4 $528
ARGP4
ADDRLP4 288
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 288
INDIRI4
ASGNI4
line 815
;815:		weaponInfo->missileSound = trap_S_RegisterSound( "sound/weapons/rocket/rockfly.wav", qfalse );
ADDRGP4 $491
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 292
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 292
INDIRI4
ASGNI4
line 816
;816:		break;
ADDRGP4 $455
JUMPV
LABELV $454
line 819
;817:
;818:	default:
;819:		MAKERGB( weaponInfo->flashDlightColor, 1, 1, 1 );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 1065353216
ASGNF4
line 820
;820:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/rocket/rocklf1a.wav", qfalse );
ADDRGP4 $492
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 296
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 296
INDIRI4
ASGNI4
line 821
;821:		break;
LABELV $455
line 823
;822:	}
;823:}
LABELV $420
endproc CG_RegisterWeapon 300 12
export CG_RegisterItemVisuals
proc CG_RegisterItemVisuals 28 12
line 832
;824:
;825:/*
;826:=================
;827:CG_RegisterItemVisuals
;828:
;829:The server says this item is used on this level
;830:=================
;831:*/
;832:void CG_RegisterItemVisuals( int itemNum ) {
line 836
;833:	itemInfo_t		*itemInfo;
;834:	gitem_t			*item;
;835:
;836:	if ( itemNum < 0 || itemNum >= bg_numItems ) {
ADDRLP4 8
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
LTI4 $534
ADDRLP4 8
INDIRI4
ADDRGP4 bg_numItems
INDIRI4
LTI4 $532
LABELV $534
line 837
;837:		CG_Error( "CG_RegisterItemVisuals: itemNum %d out of range [0-%d]", itemNum, bg_numItems-1 );
ADDRGP4 $535
ARGP4
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 bg_numItems
INDIRI4
CNSTI4 1
SUBI4
ARGI4
ADDRGP4 CG_Error
CALLV
pop
line 838
;838:	}
LABELV $532
line 840
;839:
;840:	itemInfo = &cg_items[ itemNum ];
ADDRLP4 0
ADDRFP4 0
INDIRI4
CNSTI4 28
MULI4
ADDRGP4 cg_items
ADDP4
ASGNP4
line 841
;841:	if ( itemInfo->registered ) {
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 0
EQI4 $536
line 842
;842:		return;
ADDRGP4 $531
JUMPV
LABELV $536
line 845
;843:	}
;844:
;845:	item = &bg_itemlist[ itemNum ];
ADDRLP4 4
ADDRFP4 0
INDIRI4
CNSTI4 52
MULI4
ADDRGP4 bg_itemlist
ADDP4
ASGNP4
line 847
;846:
;847:	memset( itemInfo, 0, sizeof( *itemInfo ) );
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 28
ARGI4
ADDRGP4 memset
CALLP4
pop
line 848
;848:	itemInfo->registered = qtrue;
ADDRLP4 0
INDIRP4
CNSTI4 1
ASGNI4
line 850
;849:
;850:	itemInfo->models[0] = trap_R_RegisterModel( item->world_model[0] );
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 12
INDIRI4
ASGNI4
line 852
;851:
;852:	itemInfo->icon = trap_R_RegisterShader( item->icon );
ADDRLP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRP4
ARGP4
ADDRLP4 16
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 16
INDIRI4
ASGNI4
line 855
;853:
;854:	// try to register depth-fragment shaders
;855:	if ( cg.clientFrame == 0 && cg.skipDFshaders ) {
ADDRGP4 cg
INDIRI4
CNSTI4 0
NEI4 $538
ADDRGP4 cg+149116
INDIRI4
CNSTI4 0
EQI4 $538
line 856
;856:		itemInfo->icon_df = 0;
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
CNSTI4 0
ASGNI4
line 857
;857:	} else {
ADDRGP4 $539
JUMPV
LABELV $538
line 858
;858:		itemInfo->icon_df = trap_R_RegisterShader( va( "%s_df", item->icon ) );
ADDRGP4 $541
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRLP4 24
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 24
INDIRI4
ASGNI4
line 859
;859:	}
LABELV $539
line 861
;860:
;861:	if ( !itemInfo->icon_df ) {
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
CNSTI4 0
NEI4 $542
line 862
;862:		itemInfo->icon_df = itemInfo->icon;
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ASGNI4
line 863
;863:		if ( cg.clientFrame == 0 ) {
ADDRGP4 cg
INDIRI4
CNSTI4 0
NEI4 $544
line 864
;864:			cg.skipDFshaders = qtrue; // skip all further tries to avoid shader debug mesages in 1.32c during map loading
ADDRGP4 cg+149116
CNSTI4 1
ASGNI4
line 865
;865:		} else {
ADDRGP4 $543
JUMPV
LABELV $544
line 866
;866:			cg.skipDFshaders = qfalse;
ADDRGP4 cg+149116
CNSTI4 0
ASGNI4
line 867
;867:		}
line 868
;868:	} else {
ADDRGP4 $543
JUMPV
LABELV $542
line 869
;869:		cg.skipDFshaders = qfalse;
ADDRGP4 cg+149116
CNSTI4 0
ASGNI4
line 870
;870:	}
LABELV $543
line 872
;871:
;872:	if ( item->giType == IT_WEAPON ) {
ADDRLP4 4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 1
NEI4 $549
line 873
;873:		CG_RegisterWeapon( item->giTag );
ADDRLP4 4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_RegisterWeapon
CALLV
pop
line 874
;874:	}
LABELV $549
line 879
;875:
;876:	//
;877:	// powerups have an accompanying ring or sphere
;878:	//
;879:	if ( item->giType == IT_POWERUP || item->giType == IT_HEALTH || 
ADDRLP4 4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 5
EQI4 $555
ADDRLP4 4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 4
EQI4 $555
ADDRLP4 4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 3
EQI4 $555
ADDRLP4 4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 6
NEI4 $551
LABELV $555
line 880
;880:		item->giType == IT_ARMOR || item->giType == IT_HOLDABLE ) {
line 881
;881:		if ( item->world_model[1] ) {
ADDRLP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $556
line 882
;882:			itemInfo->models[1] = trap_R_RegisterModel( item->world_model[1] );
ADDRLP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRP4
ARGP4
ADDRLP4 24
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 24
INDIRI4
ASGNI4
line 883
;883:		}
LABELV $556
line 884
;884:	}
LABELV $551
line 885
;885:}
LABELV $531
endproc CG_RegisterItemVisuals 28 12
proc CG_MapTorsoToWeaponFrame 24 0
line 902
;886:
;887:
;888:/*
;889:========================================================================================
;890:
;891:VIEW WEAPON
;892:
;893:========================================================================================
;894:*/
;895:
;896:/*
;897:=================
;898:CG_MapTorsoToWeaponFrame
;899:
;900:=================
;901:*/
;902:static int CG_MapTorsoToWeaponFrame( const clientInfo_t *ci, int frame ) {
line 905
;903:
;904:	// change weapon
;905:	if ( frame >= ci->animations[TORSO_DROP].firstFrame 
ADDRLP4 0
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRP4
CNSTI4 700
ADDP4
INDIRI4
LTI4 $559
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRP4
CNSTI4 700
ADDP4
INDIRI4
CNSTI4 9
ADDI4
GEI4 $559
line 906
;906:		&& frame < ci->animations[TORSO_DROP].firstFrame + 9 ) {
line 907
;907:		return frame - ci->animations[TORSO_DROP].firstFrame + 6;
ADDRFP4 4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 700
ADDP4
INDIRI4
SUBI4
CNSTI4 6
ADDI4
RETI4
ADDRGP4 $558
JUMPV
LABELV $559
line 911
;908:	}
;909:
;910:	// stand attack
;911:	if ( frame >= ci->animations[TORSO_ATTACK].firstFrame 
ADDRLP4 8
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRI4
ADDRLP4 12
INDIRP4
CNSTI4 644
ADDP4
INDIRI4
LTI4 $561
ADDRLP4 8
INDIRI4
ADDRLP4 12
INDIRP4
CNSTI4 644
ADDP4
INDIRI4
CNSTI4 6
ADDI4
GEI4 $561
line 912
;912:		&& frame < ci->animations[TORSO_ATTACK].firstFrame + 6 ) {
line 913
;913:		return 1 + frame - ci->animations[TORSO_ATTACK].firstFrame;
ADDRFP4 4
INDIRI4
CNSTI4 1
ADDI4
ADDRFP4 0
INDIRP4
CNSTI4 644
ADDP4
INDIRI4
SUBI4
RETI4
ADDRGP4 $558
JUMPV
LABELV $561
line 917
;914:	}
;915:
;916:	// stand attack 2
;917:	if ( frame >= ci->animations[TORSO_ATTACK2].firstFrame 
ADDRLP4 16
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRI4
ADDRLP4 20
INDIRP4
CNSTI4 672
ADDP4
INDIRI4
LTI4 $563
ADDRLP4 16
INDIRI4
ADDRLP4 20
INDIRP4
CNSTI4 672
ADDP4
INDIRI4
CNSTI4 6
ADDI4
GEI4 $563
line 918
;918:		&& frame < ci->animations[TORSO_ATTACK2].firstFrame + 6 ) {
line 919
;919:		return 1 + frame - ci->animations[TORSO_ATTACK2].firstFrame;
ADDRFP4 4
INDIRI4
CNSTI4 1
ADDI4
ADDRFP4 0
INDIRP4
CNSTI4 672
ADDP4
INDIRI4
SUBI4
RETI4
ADDRGP4 $558
JUMPV
LABELV $563
line 922
;920:	}
;921:	
;922:	return 0;
CNSTI4 0
RETI4
LABELV $558
endproc CG_MapTorsoToWeaponFrame 24 0
proc CG_CalculateWeaponPosition 40 4
line 931
;923:}
;924:
;925:
;926:/*
;927:==============
;928:CG_CalculateWeaponPosition
;929:==============
;930:*/
;931:static void CG_CalculateWeaponPosition( vec3_t origin, vec3_t angles ) {
line 936
;932:	float	scale;
;933:	int		delta;
;934:	float	fracsin;
;935:
;936:	VectorCopy( cg.refdef.vieworg, origin );
ADDRFP4 0
INDIRP4
ADDRGP4 cg+109056+24
INDIRB
ASGNB 12
line 937
;937:	VectorCopy( cg.refdefViewAngles, angles );
ADDRFP4 4
INDIRP4
ADDRGP4 cg+109424
INDIRB
ASGNB 12
line 940
;938:
;939:	// on odd legs, invert some angles
;940:	if ( cg.bobcycle & 1 ) {
ADDRGP4 cg+117972
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $569
line 941
;941:		scale = -cg.xyspeed;
ADDRLP4 0
ADDRGP4 cg+117976
INDIRF4
NEGF4
ASGNF4
line 942
;942:	} else {
ADDRGP4 $570
JUMPV
LABELV $569
line 943
;943:		scale = cg.xyspeed;
ADDRLP4 0
ADDRGP4 cg+117976
INDIRF4
ASGNF4
line 944
;944:	}
LABELV $570
line 947
;945:
;946:	// gun angles from bobbing
;947:	angles[ROLL] += scale * cg.bobfracsin * 0.005;
ADDRLP4 12
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
ADDRGP4 cg+117968
INDIRF4
MULF4
CNSTF4 1000593162
MULF4
ADDF4
ASGNF4
line 948
;948:	angles[YAW] += scale * cg.bobfracsin * 0.01;
ADDRLP4 16
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
ADDRGP4 cg+117968
INDIRF4
MULF4
CNSTF4 1008981770
MULF4
ADDF4
ASGNF4
line 949
;949:	angles[PITCH] += cg.xyspeed * cg.bobfracsin * 0.005;
ADDRLP4 20
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRF4
ADDRGP4 cg+117976
INDIRF4
ADDRGP4 cg+117968
INDIRF4
MULF4
CNSTF4 1000593162
MULF4
ADDF4
ASGNF4
line 952
;950:
;951:	// drop the weapon when landing
;952:	delta = cg.time - cg.landTime;
ADDRLP4 8
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg+108952
INDIRI4
SUBI4
ASGNI4
line 953
;953:	if ( delta < LAND_DEFLECT_TIME ) {
ADDRLP4 8
INDIRI4
CNSTI4 150
GEI4 $580
line 954
;954:		origin[2] += cg.landChange*0.25 * delta / LAND_DEFLECT_TIME;
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
ADDRGP4 cg+108948
INDIRF4
CNSTF4 1048576000
MULF4
ADDRLP4 8
INDIRI4
CVIF4 4
MULF4
CNSTF4 1004172302
MULF4
ADDF4
ASGNF4
line 955
;955:	} else if ( delta < LAND_DEFLECT_TIME + LAND_RETURN_TIME ) {
ADDRGP4 $581
JUMPV
LABELV $580
ADDRLP4 8
INDIRI4
CNSTI4 450
GEI4 $583
line 956
;956:		origin[2] += cg.landChange*0.25 * 
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
ADDRGP4 cg+108948
INDIRF4
CNSTF4 1048576000
MULF4
CNSTI4 450
ADDRLP4 8
INDIRI4
SUBI4
CVIF4 4
MULF4
CNSTF4 995783694
MULF4
ADDF4
ASGNF4
line 958
;957:			(LAND_DEFLECT_TIME + LAND_RETURN_TIME - delta) / LAND_RETURN_TIME;
;958:	}
LABELV $583
LABELV $581
line 971
;959:
;960:#if 0
;961:	// drop the weapon when stair climbing
;962:	delta = cg.time - cg.stepTime;
;963:	if ( delta < STEP_TIME/2 ) {
;964:		origin[2] -= cg.stepChange*0.25 * delta / (STEP_TIME/2);
;965:	} else if ( delta < STEP_TIME ) {
;966:		origin[2] -= cg.stepChange*0.25 * (STEP_TIME - delta) / (STEP_TIME/2);
;967:	}
;968:#endif
;969:
;970:	// idle drift
;971:	scale = cg.xyspeed + 40;
ADDRLP4 0
ADDRGP4 cg+117976
INDIRF4
CNSTF4 1109393408
ADDF4
ASGNF4
line 972
;972:	fracsin = sin( ( cg.time % TMOD_1000 ) * 0.001 );
ADDRGP4 cg+107604
INDIRI4
CNSTI4 5730265
MODI4
CVIF4 4
CNSTF4 981668463
MULF4
ARGF4
ADDRLP4 24
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 4
ADDRLP4 24
INDIRF4
ASGNF4
line 973
;973:	angles[ROLL] += scale * fracsin * 0.01;
ADDRLP4 28
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
CNSTF4 1008981770
MULF4
ADDF4
ASGNF4
line 974
;974:	angles[YAW] += scale * fracsin * 0.01;
ADDRLP4 32
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
CNSTF4 1008981770
MULF4
ADDF4
ASGNF4
line 975
;975:	angles[PITCH] += scale * fracsin * 0.01;
ADDRLP4 36
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
CNSTF4 1008981770
MULF4
ADDF4
ASGNF4
line 976
;976:}
LABELV $565
endproc CG_CalculateWeaponPosition 40 4
proc CG_LightningBolt 280 28
line 990
;977:
;978:
;979:/*
;980:===============
;981:CG_LightningBolt
;982:
;983:Origin will be the exact tag point, which is slightly
;984:different than the muzzle point used for determining hits.
;985:The cent should be the non-predicted cent if it is from the player,
;986:so the endpoint will reflect the simulated strike (lagging the predicted
;987:angle)
;988:===============
;989:*/
;990:static void CG_LightningBolt( centity_t *cent, vec3_t origin ) {
line 998
;991:	trace_t  trace;
;992:	refEntity_t  beam;
;993:	vec3_t   forward;
;994:	vec3_t   muzzlePoint, endPoint;
;995:	int      anim;
;996:	qboolean directView;
;997:
;998:	if (cent->currentState.weapon != WP_LIGHTNING) {
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 6
EQI4 $589
line 999
;999:		return;
ADDRGP4 $588
JUMPV
LABELV $589
line 1002
;1000:	}
;1001:
;1002:	memset( &beam, 0, sizeof( beam ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1004
;1003:
;1004:	if ( !cg.renderingThirdPerson && cent->currentState.number == cg.predictedPlayerState.clientNum ) {
ADDRGP4 cg+107628
INDIRI4
CNSTI4 0
NEI4 $591
ADDRFP4 0
INDIRP4
INDIRI4
ADDRGP4 cg+107636+140
INDIRI4
NEI4 $591
line 1005
;1005:		directView = qtrue;
ADDRLP4 232
CNSTI4 1
ASGNI4
line 1006
;1006:		VectorCopy( cg.refdef.vieworg, muzzlePoint );
ADDRLP4 140
ADDRGP4 cg+109056+24
INDIRB
ASGNB 12
line 1007
;1007:	} else {
ADDRGP4 $592
JUMPV
LABELV $591
line 1008
;1008:		directView = qfalse;
ADDRLP4 232
CNSTI4 0
ASGNI4
line 1009
;1009:		VectorCopy( cent->lerpOrigin, muzzlePoint );
ADDRLP4 140
ADDRFP4 0
INDIRP4
CNSTI4 716
ADDP4
INDIRB
ASGNB 12
line 1010
;1010:		anim = cent->currentState.legsAnim & ~ANIM_TOGGLEBIT;
ADDRLP4 236
ADDRFP4 0
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
CNSTI4 -129
BANDI4
ASGNI4
line 1011
;1011:		if ( anim == LEGS_WALKCR || anim == LEGS_IDLECR ) {
ADDRLP4 240
ADDRLP4 236
INDIRI4
ASGNI4
ADDRLP4 240
INDIRI4
CNSTI4 13
EQI4 $600
ADDRLP4 240
INDIRI4
CNSTI4 23
NEI4 $598
LABELV $600
line 1012
;1012:			muzzlePoint[2] += CROUCH_VIEWHEIGHT;
ADDRLP4 140+8
ADDRLP4 140+8
INDIRF4
CNSTF4 1094713344
ADDF4
ASGNF4
line 1013
;1013:		} else {
ADDRGP4 $599
JUMPV
LABELV $598
line 1014
;1014:			muzzlePoint[2] += DEFAULT_VIEWHEIGHT;
ADDRLP4 140+8
ADDRLP4 140+8
INDIRF4
CNSTF4 1104150528
ADDF4
ASGNF4
line 1015
;1015:		}
LABELV $599
line 1016
;1016:	}
LABELV $592
line 1019
;1017:
;1018:	// CPMA  "true" lightning
;1019:	if ( directView && cg_trueLightning.value ) {
ADDRLP4 232
INDIRI4
CNSTI4 0
EQI4 $603
ADDRGP4 cg_trueLightning+8
INDIRF4
CNSTF4 0
EQF4 $603
line 1024
;1020:		//vec3_t	viewangles;
;1021:		vec3_t angle;
;1022:		int i;
;1023:
;1024:		for (i = 0; i < 3; i++) {
ADDRLP4 240
CNSTI4 0
ASGNI4
LABELV $606
line 1025
;1025:			float a = cent->lerpAngles[i] - cg.refdefViewAngles[i];
ADDRLP4 256
ADDRLP4 240
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 728
ADDP4
ADDP4
INDIRF4
ADDRLP4 240
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+109424
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1026
;1026:			if (a > 180) {
ADDRLP4 256
INDIRF4
CNSTF4 1127481344
LEF4 $611
line 1027
;1027:				a -= 360;
ADDRLP4 256
ADDRLP4 256
INDIRF4
CNSTF4 1135869952
SUBF4
ASGNF4
line 1028
;1028:			}
LABELV $611
line 1029
;1029:			if (a < -180) {
ADDRLP4 256
INDIRF4
CNSTF4 3274964992
GEF4 $613
line 1030
;1030:				a += 360;
ADDRLP4 256
ADDRLP4 256
INDIRF4
CNSTF4 1135869952
ADDF4
ASGNF4
line 1031
;1031:			}
LABELV $613
line 1033
;1032:
;1033:			angle[i] = cg.refdefViewAngles[i] + a * (1.0 - cg_trueLightning.value);
ADDRLP4 240
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 244
ADDP4
ADDRLP4 240
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+109424
ADDP4
INDIRF4
ADDRLP4 256
INDIRF4
CNSTF4 1065353216
ADDRGP4 cg_trueLightning+8
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 1034
;1034:			if (angle[i] < 0) {
ADDRLP4 240
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 244
ADDP4
INDIRF4
CNSTF4 0
GEF4 $617
line 1035
;1035:				angle[i] += 360;
ADDRLP4 268
ADDRLP4 240
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 244
ADDP4
ASGNP4
ADDRLP4 268
INDIRP4
ADDRLP4 268
INDIRP4
INDIRF4
CNSTF4 1135869952
ADDF4
ASGNF4
line 1036
;1036:			}
LABELV $617
line 1037
;1037:			if (angle[i] > 360) {
ADDRLP4 240
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 244
ADDP4
INDIRF4
CNSTF4 1135869952
LEF4 $619
line 1038
;1038:				angle[i] -= 360;
ADDRLP4 268
ADDRLP4 240
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 244
ADDP4
ASGNP4
ADDRLP4 268
INDIRP4
ADDRLP4 268
INDIRP4
INDIRF4
CNSTF4 1135869952
SUBF4
ASGNF4
line 1039
;1039:			}
LABELV $619
line 1040
;1040:		}
LABELV $607
line 1024
ADDRLP4 240
ADDRLP4 240
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 240
INDIRI4
CNSTI4 3
LTI4 $606
line 1042
;1041:
;1042:		AngleVectors(angle, forward, NULL, NULL );
ADDRLP4 244
ARGP4
ADDRLP4 152
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1044
;1043:
;1044:	} else {
ADDRGP4 $604
JUMPV
LABELV $603
line 1046
;1045:		// !CPMA
;1046:		AngleVectors( cent->lerpAngles, forward, NULL, NULL );
ADDRFP4 0
INDIRP4
CNSTI4 728
ADDP4
ARGP4
ADDRLP4 152
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1047
;1047:	}
LABELV $604
line 1049
;1048:
;1049:	VectorMA( muzzlePoint, 14, forward, muzzlePoint );
ADDRLP4 140
ADDRLP4 140
INDIRF4
ADDRLP4 152
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
ADDRLP4 140+4
ADDRLP4 140+4
INDIRF4
ADDRLP4 152+4
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
ADDRLP4 140+8
ADDRLP4 140+8
INDIRF4
ADDRLP4 152+8
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
line 1052
;1050:
;1051:	// project forward by the lightning range
;1052:	VectorMA( muzzlePoint, LIGHTNING_RANGE, forward, endPoint );
ADDRLP4 220
ADDRLP4 140
INDIRF4
ADDRLP4 152
INDIRF4
CNSTF4 1145044992
MULF4
ADDF4
ASGNF4
ADDRLP4 220+4
ADDRLP4 140+4
INDIRF4
ADDRLP4 152+4
INDIRF4
CNSTF4 1145044992
MULF4
ADDF4
ASGNF4
ADDRLP4 220+8
ADDRLP4 140+8
INDIRF4
ADDRLP4 152+8
INDIRF4
CNSTF4 1145044992
MULF4
ADDF4
ASGNF4
line 1055
;1053:
;1054:	// see if it hit a wall
;1055:	CG_Trace( &trace, muzzlePoint, vec3_origin, vec3_origin, endPoint, 
ADDRLP4 164
ARGP4
ADDRLP4 140
ARGP4
ADDRLP4 240
ADDRGP4 vec3_origin
ASGNP4
ADDRLP4 240
INDIRP4
ARGP4
ADDRLP4 240
INDIRP4
ARGP4
ADDRLP4 220
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 100663297
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 1059
;1056:		cent->currentState.number, MASK_SHOT );
;1057:
;1058:	// this is the endpoint
;1059:	VectorCopy( trace.endpos, beam.oldorigin );
ADDRLP4 0+84
ADDRLP4 164+12
INDIRB
ASGNB 12
line 1063
;1060:
;1061:	// use the provided origin, even though it may be slightly
;1062:	// different than the muzzle origin
;1063:	VectorCopy( origin, beam.origin );
ADDRLP4 0+68
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1065
;1064:
;1065:	beam.reType = RT_LIGHTNING;
ADDRLP4 0
CNSTI4 6
ASGNI4
line 1066
;1066:	beam.customShader = cgs.media.lightningShader;
ADDRLP4 0+112
ADDRGP4 cgs+148752+196
INDIRI4
ASGNI4
line 1067
;1067:	trap_R_AddRefEntityToScene( &beam );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1070
;1068:
;1069:	// add the impact flare if it hit something
;1070:	if ( trace.fraction < 1.0 ) {
ADDRLP4 164+8
INDIRF4
CNSTF4 1065353216
GEF4 $639
line 1074
;1071:		vec3_t	angles;
;1072:		vec3_t	dir;
;1073:
;1074:		VectorSubtract( beam.oldorigin, beam.origin, dir );
ADDRLP4 244
ADDRLP4 0+84
INDIRF4
ADDRLP4 0+68
INDIRF4
SUBF4
ASGNF4
ADDRLP4 244+4
ADDRLP4 0+84+4
INDIRF4
ADDRLP4 0+68+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 244+8
ADDRLP4 0+84+8
INDIRF4
ADDRLP4 0+68+8
INDIRF4
SUBF4
ASGNF4
line 1075
;1075:		VectorNormalize( dir );
ADDRLP4 244
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 1077
;1076:
;1077:		memset( &beam, 0, sizeof( beam ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1078
;1078:		beam.hModel = cgs.media.lightningExplosionModel;
ADDRLP4 0+8
ADDRGP4 cgs+148752+456
INDIRI4
ASGNI4
line 1080
;1079:
;1080:		VectorMA( trace.endpos, -16, dir, beam.origin );
ADDRLP4 0+68
ADDRLP4 164+12
INDIRF4
ADDRLP4 244
INDIRF4
CNSTF4 3246391296
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 164+12+4
INDIRF4
ADDRLP4 244+4
INDIRF4
CNSTF4 3246391296
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 164+12+8
INDIRF4
ADDRLP4 244+8
INDIRF4
CNSTF4 3246391296
MULF4
ADDF4
ASGNF4
line 1083
;1081:
;1082:		// make a random orientation
;1083:		angles[0] = rand() % 360;
ADDRLP4 268
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 256
ADDRLP4 268
INDIRI4
CNSTI4 360
MODI4
CVIF4 4
ASGNF4
line 1084
;1084:		angles[1] = rand() % 360;
ADDRLP4 272
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 256+4
ADDRLP4 272
INDIRI4
CNSTI4 360
MODI4
CVIF4 4
ASGNF4
line 1085
;1085:		angles[2] = rand() % 360;
ADDRLP4 276
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 256+8
ADDRLP4 276
INDIRI4
CNSTI4 360
MODI4
CVIF4 4
ASGNF4
line 1086
;1086:		AnglesToAxis( angles, beam.axis );
ADDRLP4 256
ARGP4
ADDRLP4 0+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1087
;1087:		trap_R_AddRefEntityToScene( &beam );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1088
;1088:	}
LABELV $639
line 1089
;1089:}
LABELV $588
endproc CG_LightningBolt 280 28
proc CG_SpawnRailTrail 4 12
line 1162
;1090:/*
;1091:
;1092:static void CG_LightningBolt( centity_t *cent, vec3_t origin ) {
;1093:	trace_t		trace;
;1094:	refEntity_t		beam;
;1095:	vec3_t			forward;
;1096:	vec3_t			muzzlePoint, endPoint;
;1097:
;1098:	if ( cent->currentState.weapon != WP_LIGHTNING ) {
;1099:		return;
;1100:	}
;1101:
;1102:	memset( &beam, 0, sizeof( beam ) );
;1103:
;1104:	// find muzzle point for this frame
;1105:	VectorCopy( cent->lerpOrigin, muzzlePoint );
;1106:	AngleVectors( cent->lerpAngles, forward, NULL, NULL );
;1107:
;1108:	// FIXME: crouch
;1109:	muzzlePoint[2] += DEFAULT_VIEWHEIGHT;
;1110:
;1111:	VectorMA( muzzlePoint, 14, forward, muzzlePoint );
;1112:
;1113:	// project forward by the lightning range
;1114:	VectorMA( muzzlePoint, LIGHTNING_RANGE, forward, endPoint );
;1115:
;1116:	// see if it hit a wall
;1117:	CG_Trace( &trace, muzzlePoint, vec3_origin, vec3_origin, endPoint, 
;1118:		cent->currentState.number, MASK_SHOT );
;1119:
;1120:	// this is the endpoint
;1121:	VectorCopy( trace.endpos, beam.oldorigin );
;1122:
;1123:	// use the provided origin, even though it may be slightly
;1124:	// different than the muzzle origin
;1125:	VectorCopy( origin, beam.origin );
;1126:
;1127:	beam.reType = RT_LIGHTNING;
;1128:	beam.customShader = cgs.media.lightningShader;
;1129:	trap_R_AddRefEntityToScene( &beam );
;1130:
;1131:	// add the impact flare if it hit something
;1132:	if ( trace.fraction < 1.0 ) {
;1133:		vec3_t	angles;
;1134:		vec3_t	dir;
;1135:
;1136:		VectorSubtract( beam.oldorigin, beam.origin, dir );
;1137:		VectorNormalize( dir );
;1138:
;1139:		memset( &beam, 0, sizeof( beam ) );
;1140:		beam.hModel = cgs.media.lightningExplosionModel;
;1141:
;1142:		VectorMA( trace.endpos, -16, dir, beam.origin );
;1143:
;1144:		// make a random orientation
;1145:		angles[0] = rand() % 360;
;1146:		angles[1] = rand() % 360;
;1147:		angles[2] = rand() % 360;
;1148:		AnglesToAxis( angles, beam.axis );
;1149:		trap_R_AddRefEntityToScene( &beam );
;1150:	}
;1151:}
;1152:*/
;1153:
;1154:/*
;1155:===============
;1156:CG_SpawnRailTrail
;1157:
;1158:Origin will be the exact tag point, which is slightly
;1159:different than the muzzle point used for determining hits.
;1160:===============
;1161:*/
;1162:static void CG_SpawnRailTrail( centity_t *cent, vec3_t origin ) {
line 1165
;1163:	clientInfo_t	*ci;
;1164:
;1165:	if ( cent->currentState.weapon != WP_RAILGUN ) {
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 7
EQI4 $673
line 1166
;1166:		return;
ADDRGP4 $672
JUMPV
LABELV $673
line 1168
;1167:	}
;1168:	if ( !cent->pe.railgunFlash ) {
ADDRFP4 0
INDIRP4
CNSTI4 632
ADDP4
INDIRI4
CNSTI4 0
NEI4 $675
line 1169
;1169:		return;
ADDRGP4 $672
JUMPV
LABELV $675
line 1171
;1170:	}
;1171:	cent->pe.railgunFlash = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 632
ADDP4
CNSTI4 1
ASGNI4
line 1172
;1172:	ci = &cgs.clientinfo[ cent->currentState.clientNum ];
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+40996
ADDP4
ASGNP4
line 1173
;1173:	CG_RailTrail( ci, origin, cent->pe.railgunImpact );
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 620
ADDP4
ARGP4
ADDRGP4 CG_RailTrail
CALLV
pop
line 1174
;1174:}
LABELV $672
endproc CG_SpawnRailTrail 4 12
proc CG_MachinegunSpinAngle 32 4
line 1184
;1175:
;1176:
;1177:/*
;1178:======================
;1179:CG_MachinegunSpinAngle
;1180:======================
;1181:*/
;1182:#define		SPIN_SPEED	0.9
;1183:#define		COAST_TIME	1000
;1184:static float	CG_MachinegunSpinAngle( centity_t *cent ) {
line 1189
;1185:	int		delta;
;1186:	float	angle;
;1187:	float	speed;
;1188:
;1189:	delta = cg.time - cent->pe.barrelTime;
ADDRLP4 0
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 640
ADDP4
INDIRI4
SUBI4
ASGNI4
line 1190
;1190:	if ( cent->pe.barrelSpinning ) {
ADDRFP4 0
INDIRP4
CNSTI4 644
ADDP4
INDIRI4
CNSTI4 0
EQI4 $680
line 1191
;1191:		angle = cent->pe.barrelAngle + delta * SPIN_SPEED;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 636
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CVIF4 4
CNSTF4 1063675494
MULF4
ADDF4
ASGNF4
line 1192
;1192:	} else {
ADDRGP4 $681
JUMPV
LABELV $680
line 1193
;1193:		if ( delta > COAST_TIME ) {
ADDRLP4 0
INDIRI4
CNSTI4 1000
LEI4 $682
line 1194
;1194:			delta = COAST_TIME;
ADDRLP4 0
CNSTI4 1000
ASGNI4
line 1195
;1195:		}
LABELV $682
line 1197
;1196:
;1197:		speed = 0.5 * ( SPIN_SPEED + (float)( COAST_TIME - delta ) / COAST_TIME );
ADDRLP4 8
CNSTI4 1000
ADDRLP4 0
INDIRI4
SUBI4
CVIF4 4
CNSTF4 981668463
MULF4
CNSTF4 1063675494
ADDF4
CNSTF4 1056964608
MULF4
ASGNF4
line 1198
;1198:		angle = cent->pe.barrelAngle + delta * speed;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 636
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRLP4 8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1199
;1199:	}
LABELV $681
line 1201
;1200:
;1201:	if ( cent->pe.barrelSpinning == !(cent->currentState.eFlags & EF_FIRING) ) {
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
NEI4 $687
ADDRLP4 12
CNSTI4 1
ASGNI4
ADDRGP4 $688
JUMPV
LABELV $687
ADDRLP4 12
CNSTI4 0
ASGNI4
LABELV $688
ADDRLP4 16
INDIRP4
CNSTI4 644
ADDP4
INDIRI4
ADDRLP4 12
INDIRI4
NEI4 $684
line 1202
;1202:		cent->pe.barrelTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 640
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1203
;1203:		cent->pe.barrelAngle = AngleMod( angle );
ADDRLP4 4
INDIRF4
ARGF4
ADDRLP4 20
ADDRGP4 AngleMod
CALLF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 636
ADDP4
ADDRLP4 20
INDIRF4
ASGNF4
line 1204
;1204:		cent->pe.barrelSpinning = !!(cent->currentState.eFlags & EF_FIRING);
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $691
ADDRLP4 24
CNSTI4 1
ASGNI4
ADDRGP4 $692
JUMPV
LABELV $691
ADDRLP4 24
CNSTI4 0
ASGNI4
LABELV $692
ADDRLP4 28
INDIRP4
CNSTI4 644
ADDP4
ADDRLP4 24
INDIRI4
ASGNI4
line 1210
;1205:#ifdef MISSIONPACK
;1206:		if ( cent->currentState.weapon == WP_CHAINGUN && !cent->pe.barrelSpinning ) {
;1207:			trap_S_StartSound( NULL, cent->currentState.number, CHAN_WEAPON, trap_S_RegisterSound( "sound/weapons/vulcan/wvulwind.wav", qfalse ) );
;1208:		}
;1209:#endif
;1210:	}
LABELV $684
line 1212
;1211:
;1212:	return angle;
ADDRLP4 4
INDIRF4
RETF4
LABELV $678
endproc CG_MachinegunSpinAngle 32 4
proc CG_AddWeaponWithPowerups 0 4
line 1221
;1213:}
;1214:
;1215:
;1216:/*
;1217:========================
;1218:CG_AddWeaponWithPowerups
;1219:========================
;1220:*/
;1221:static void CG_AddWeaponWithPowerups( refEntity_t *gun, int powerups ) {
line 1223
;1222:	// add powerup effects
;1223:	if ( powerups & ( 1 << PW_INVIS ) ) {
ADDRFP4 4
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $694
line 1224
;1224:		gun->customShader = cgs.media.invisShader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+148752+424
INDIRI4
ASGNI4
line 1225
;1225:		trap_R_AddRefEntityToScene( gun );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1226
;1226:	} else {
ADDRGP4 $695
JUMPV
LABELV $694
line 1227
;1227:		trap_R_AddRefEntityToScene( gun );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1229
;1228:
;1229:		if ( powerups & ( 1 << PW_BATTLESUIT ) ) {
ADDRFP4 4
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $698
line 1230
;1230:			gun->customShader = cgs.media.battleWeaponShader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+148752+436
INDIRI4
ASGNI4
line 1231
;1231:			trap_R_AddRefEntityToScene( gun );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1232
;1232:		}
LABELV $698
line 1233
;1233:		if ( powerups & ( 1 << PW_QUAD ) ) {
ADDRFP4 4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $702
line 1234
;1234:			gun->customShader = cgs.media.quadWeaponShader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+148752+420
INDIRI4
ASGNI4
line 1235
;1235:			trap_R_AddRefEntityToScene( gun );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1236
;1236:		}
LABELV $702
line 1237
;1237:	}
LABELV $695
line 1238
;1238:}
LABELV $693
endproc CG_AddWeaponWithPowerups 0 4
export CG_AddPlayerWeapon
proc CG_AddPlayerWeapon 580 28
line 1250
;1239:
;1240:
;1241:/*
;1242:=============
;1243:CG_AddPlayerWeapon
;1244:
;1245:Used for both the view weapon (ps is valid) and the world modelother character models (ps is NULL)
;1246:The main player will have this called for BOTH cases, so effects like light and
;1247:sound should only be done on the world model case.
;1248:=============
;1249:*/
;1250:void CG_AddPlayerWeapon( refEntity_t *parent, playerState_t *ps, centity_t *cent, int team ) {
line 1261
;1251:	refEntity_t	gun;
;1252:	refEntity_t	barrel;
;1253:	refEntity_t	flash;
;1254:	vec3_t		angles;
;1255:	weapon_t	weaponNum;
;1256:	weaponInfo_t	*weapon;
;1257:	centity_t	*nonPredictedCent;
;1258://	int	col;
;1259:	const	clientInfo_t	*ci;
;1260:
;1261:	ci = &cgs.clientinfo[ cent->currentState.clientNum ];
ADDRLP4 444
ADDRFP4 8
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+40996
ADDP4
ASGNP4
line 1262
;1262:	weaponNum = cent->currentState.weapon;
ADDRLP4 284
ADDRFP4 8
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
ASGNI4
line 1264
;1263:
;1264:	CG_RegisterWeapon( weaponNum );
ADDRLP4 284
INDIRI4
ARGI4
ADDRGP4 CG_RegisterWeapon
CALLV
pop
line 1265
;1265:	weapon = &cg_weapons[weaponNum];
ADDRLP4 280
ADDRLP4 284
INDIRI4
CNSTI4 136
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 1268
;1266:
;1267:	// add the weapon
;1268:	memset( &gun, 0, sizeof( gun ) );
ADDRLP4 140
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1269
;1269:	VectorCopy( parent->lightingOrigin, gun.lightingOrigin );
ADDRLP4 140+12
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 1270
;1270:	gun.shadowPlane = parent->shadowPlane;
ADDRLP4 140+24
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 1271
;1271:	gun.renderfx = parent->renderfx;
ADDRLP4 140+4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 1274
;1272:
;1273:	// set custom shading for railgun refire rate
;1274:	if ( ps ) {
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $711
line 1275
;1275:		if ( cg.predictedPlayerState.weapon == WP_RAILGUN 
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 7
NEI4 $713
ADDRGP4 cg+107636+148
INDIRI4
CNSTI4 3
NEI4 $713
line 1276
;1276:			&& cg.predictedPlayerState.weaponstate == WEAPON_FIRING ) {
line 1278
;1277:			float	f;
;1278:			f = (1.0f - ((float)cg.predictedPlayerState.weaponTime / 1500.0f) );
ADDRLP4 448
CNSTF4 1065353216
ADDRGP4 cg+107636+44
INDIRI4
CVIF4 4
CNSTF4 976143166
MULF4
SUBF4
ASGNF4
line 1279
;1279:			gun.shaderRGBA[0] = 255 * ci->color1[0] * f;
ADDRLP4 456
ADDRLP4 444
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ADDRLP4 448
INDIRF4
MULF4
ASGNF4
ADDRLP4 460
CNSTF4 1325400064
ASGNF4
ADDRLP4 456
INDIRF4
ADDRLP4 460
INDIRF4
LTF4 $723
ADDRLP4 452
ADDRLP4 456
INDIRF4
ADDRLP4 460
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $724
JUMPV
LABELV $723
ADDRLP4 452
ADDRLP4 456
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $724
ADDRLP4 140+116
ADDRLP4 452
INDIRU4
CVUU1 4
ASGNU1
line 1280
;1280:			gun.shaderRGBA[1] = 255 * ci->color1[1] * f;
ADDRLP4 468
ADDRLP4 444
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ADDRLP4 448
INDIRF4
MULF4
ASGNF4
ADDRLP4 472
CNSTF4 1325400064
ASGNF4
ADDRLP4 468
INDIRF4
ADDRLP4 472
INDIRF4
LTF4 $728
ADDRLP4 464
ADDRLP4 468
INDIRF4
ADDRLP4 472
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $729
JUMPV
LABELV $728
ADDRLP4 464
ADDRLP4 468
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $729
ADDRLP4 140+116+1
ADDRLP4 464
INDIRU4
CVUU1 4
ASGNU1
line 1281
;1281:			gun.shaderRGBA[2] = 255 * ci->color1[2] * f;
ADDRLP4 480
ADDRLP4 444
INDIRP4
CNSTI4 52
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ADDRLP4 448
INDIRF4
MULF4
ASGNF4
ADDRLP4 484
CNSTF4 1325400064
ASGNF4
ADDRLP4 480
INDIRF4
ADDRLP4 484
INDIRF4
LTF4 $733
ADDRLP4 476
ADDRLP4 480
INDIRF4
ADDRLP4 484
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $734
JUMPV
LABELV $733
ADDRLP4 476
ADDRLP4 480
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $734
ADDRLP4 140+116+2
ADDRLP4 476
INDIRU4
CVUU1 4
ASGNU1
line 1283
;1282:			//gun.shaderRGBA[3] = 255;
;1283:		} else {
ADDRGP4 $714
JUMPV
LABELV $713
line 1284
;1284:			gun.shaderRGBA[0] = 255 * ci->color1[0];
ADDRLP4 452
ADDRLP4 444
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 456
CNSTF4 1325400064
ASGNF4
ADDRLP4 452
INDIRF4
ADDRLP4 456
INDIRF4
LTF4 $737
ADDRLP4 448
ADDRLP4 452
INDIRF4
ADDRLP4 456
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $738
JUMPV
LABELV $737
ADDRLP4 448
ADDRLP4 452
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $738
ADDRLP4 140+116
ADDRLP4 448
INDIRU4
CVUU1 4
ASGNU1
line 1285
;1285:			gun.shaderRGBA[1] = 255 * ci->color1[1];
ADDRLP4 464
ADDRLP4 444
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 468
CNSTF4 1325400064
ASGNF4
ADDRLP4 464
INDIRF4
ADDRLP4 468
INDIRF4
LTF4 $742
ADDRLP4 460
ADDRLP4 464
INDIRF4
ADDRLP4 468
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $743
JUMPV
LABELV $742
ADDRLP4 460
ADDRLP4 464
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $743
ADDRLP4 140+116+1
ADDRLP4 460
INDIRU4
CVUU1 4
ASGNU1
line 1286
;1286:			gun.shaderRGBA[2] = 255 * ci->color1[2];
ADDRLP4 476
ADDRLP4 444
INDIRP4
CNSTI4 52
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 480
CNSTF4 1325400064
ASGNF4
ADDRLP4 476
INDIRF4
ADDRLP4 480
INDIRF4
LTF4 $747
ADDRLP4 472
ADDRLP4 476
INDIRF4
ADDRLP4 480
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $748
JUMPV
LABELV $747
ADDRLP4 472
ADDRLP4 476
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $748
ADDRLP4 140+116+2
ADDRLP4 472
INDIRU4
CVUU1 4
ASGNU1
line 1288
;1287:			//gun.shaderRGBA[3] = 255;
;1288:			if ( gun.shaderRGBA[1] < 64 ) gun.shaderRGBA[1] = 64;
ADDRLP4 140+116+1
INDIRU1
CVUI4 1
CNSTI4 64
GEI4 $749
ADDRLP4 140+116+1
CNSTU1 64
ASGNU1
LABELV $749
line 1289
;1289:		}
LABELV $714
line 1290
;1290:		gun.shaderRGBA[3] = 255;
ADDRLP4 140+116+3
CNSTU1 255
ASGNU1
line 1291
;1291:	}
LABELV $711
line 1293
;1292:
;1293:	gun.hModel = weapon->weaponModel;
ADDRLP4 140+8
ADDRLP4 280
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ASGNI4
line 1294
;1294:	if (!gun.hModel) {
ADDRLP4 140+8
INDIRI4
CNSTI4 0
NEI4 $758
line 1295
;1295:		return;
ADDRGP4 $706
JUMPV
LABELV $758
line 1298
;1296:	}
;1297:
;1298:	if ( !ps ) {
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $761
line 1300
;1299:		// add weapon ready sound
;1300:		cent->pe.lightningFiring = qfalse;
ADDRFP4 8
INDIRP4
CNSTI4 616
ADDP4
CNSTI4 0
ASGNI4
line 1301
;1301:		if ( ( cent->currentState.eFlags & EF_FIRING ) && weapon->firingSound ) {
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $763
ADDRLP4 280
INDIRP4
CNSTI4 128
ADDP4
INDIRI4
CNSTI4 0
EQI4 $763
line 1303
;1302:			// lightning gun and gauntlet make a different sound when fire is held down
;1303:			trap_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, vec3_origin, weapon->firingSound );
ADDRLP4 448
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 448
INDIRP4
INDIRI4
ARGI4
ADDRLP4 448
INDIRP4
CNSTI4 716
ADDP4
ARGP4
ADDRGP4 vec3_origin
ARGP4
ADDRLP4 280
INDIRP4
CNSTI4 128
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_S_AddLoopingSound
CALLV
pop
line 1304
;1304:			cent->pe.lightningFiring = qtrue;
ADDRFP4 8
INDIRP4
CNSTI4 616
ADDP4
CNSTI4 1
ASGNI4
line 1305
;1305:		} else if ( weapon->readySound ) {
ADDRGP4 $764
JUMPV
LABELV $763
ADDRLP4 280
INDIRP4
CNSTI4 124
ADDP4
INDIRI4
CNSTI4 0
EQI4 $765
line 1306
;1306:			trap_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, vec3_origin, weapon->readySound );
ADDRLP4 448
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 448
INDIRP4
INDIRI4
ARGI4
ADDRLP4 448
INDIRP4
CNSTI4 716
ADDP4
ARGP4
ADDRGP4 vec3_origin
ARGP4
ADDRLP4 280
INDIRP4
CNSTI4 124
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_S_AddLoopingSound
CALLV
pop
line 1307
;1307:		}
LABELV $765
LABELV $764
line 1308
;1308:	}
LABELV $761
line 1310
;1309:
;1310:	CG_PositionEntityOnTag( &gun, parent, parent->hModel, "tag_weapon");
ADDRLP4 140
ARGP4
ADDRLP4 448
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 448
INDIRP4
ARGP4
ADDRLP4 448
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ARGI4
ADDRGP4 $767
ARGP4
ADDRGP4 CG_PositionEntityOnTag
CALLV
pop
line 1312
;1311:
;1312:	CG_AddWeaponWithPowerups( &gun, cent->currentState.powerups );
ADDRLP4 140
ARGP4
ADDRFP4 8
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_AddWeaponWithPowerups
CALLV
pop
line 1315
;1313:
;1314:	// add the spinning barrel
;1315:	if ( weapon->barrelModel ) {
ADDRLP4 280
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 0
EQI4 $768
line 1316
;1316:		memset( &barrel, 0, sizeof( barrel ) );
ADDRLP4 300
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1317
;1317:		VectorCopy( parent->lightingOrigin, barrel.lightingOrigin );
ADDRLP4 300+12
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 1318
;1318:		barrel.shadowPlane = parent->shadowPlane;
ADDRLP4 300+24
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 1319
;1319:		barrel.renderfx = parent->renderfx;
ADDRLP4 300+4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 1321
;1320:
;1321:		barrel.hModel = weapon->barrelModel;
ADDRLP4 300+8
ADDRLP4 280
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ASGNI4
line 1322
;1322:		angles[YAW] = 0;
ADDRLP4 288+4
CNSTF4 0
ASGNF4
line 1323
;1323:		angles[PITCH] = 0;
ADDRLP4 288
CNSTF4 0
ASGNF4
line 1324
;1324:		angles[ROLL] = CG_MachinegunSpinAngle( cent );
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 452
ADDRGP4 CG_MachinegunSpinAngle
CALLF4
ASGNF4
ADDRLP4 288+8
ADDRLP4 452
INDIRF4
ASGNF4
line 1325
;1325:		AnglesToAxis( angles, barrel.axis );
ADDRLP4 288
ARGP4
ADDRLP4 300+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1327
;1326:
;1327:		CG_PositionRotatedEntityOnTag( &barrel, &gun, weapon->weaponModel, "tag_barrel" );
ADDRLP4 300
ARGP4
ADDRLP4 140
ARGP4
ADDRLP4 280
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ARGI4
ADDRGP4 $777
ARGP4
ADDRGP4 CG_PositionRotatedEntityOnTag
CALLV
pop
line 1329
;1328:
;1329:		CG_AddWeaponWithPowerups( &barrel, cent->currentState.powerups );
ADDRLP4 300
ARGP4
ADDRFP4 8
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_AddWeaponWithPowerups
CALLV
pop
line 1330
;1330:	}
LABELV $768
line 1333
;1331:
;1332:	// make sure we aren't looking at cg.predictedPlayerEntity for LG
;1333:	nonPredictedCent = &cg_entities[cent->currentState.clientNum];
ADDRLP4 440
ADDRFP4 8
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
CNSTI4 740
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 1338
;1334:
;1335:	// if the index of the nonPredictedCent is not the same as the clientNum
;1336:	// then this is a fake player (like on teh single player podiums), so
;1337:	// go ahead and use the cent
;1338:	if( ( nonPredictedCent - cg_entities ) != cent->currentState.clientNum ) {
ADDRLP4 440
INDIRP4
CVPU4 4
ADDRGP4 cg_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 740
DIVI4
ADDRFP4 8
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
EQI4 $778
line 1339
;1339:		nonPredictedCent = cent;
ADDRLP4 440
ADDRFP4 8
INDIRP4
ASGNP4
line 1340
;1340:	}
LABELV $778
line 1343
;1341:
;1342:	// add the flash
;1343:	if ( ( weaponNum == WP_LIGHTNING || weaponNum == WP_GAUNTLET || weaponNum == WP_GRAPPLING_HOOK )
ADDRLP4 284
INDIRI4
CNSTI4 6
EQI4 $783
ADDRLP4 284
INDIRI4
CNSTI4 1
EQI4 $783
ADDRLP4 284
INDIRI4
CNSTI4 10
NEI4 $780
LABELV $783
ADDRLP4 440
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $780
line 1345
;1344:		&& ( nonPredictedCent->currentState.eFlags & EF_FIRING ) ) 
;1345:	{
line 1347
;1346:		// continuous flash
;1347:	} else {
ADDRGP4 $781
JUMPV
LABELV $780
line 1349
;1348:		// impulse flash
;1349:		if ( cg.time - cent->muzzleFlashTime > MUZZLE_FLASH_TIME && !cent->pe.railgunFlash ) {
ADDRLP4 456
ADDRFP4 8
INDIRP4
ASGNP4
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 456
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
SUBI4
CNSTI4 20
LEI4 $784
ADDRLP4 456
INDIRP4
CNSTI4 632
ADDP4
INDIRI4
CNSTI4 0
NEI4 $784
line 1350
;1350:			return;
ADDRGP4 $706
JUMPV
LABELV $784
line 1352
;1351:		}
;1352:	}
LABELV $781
line 1354
;1353:
;1354:	memset( &flash, 0, sizeof( flash ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1355
;1355:	VectorCopy( parent->lightingOrigin, flash.lightingOrigin );
ADDRLP4 0+12
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 1356
;1356:	flash.shadowPlane = parent->shadowPlane;
ADDRLP4 0+24
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 1357
;1357:	flash.renderfx = parent->renderfx;
ADDRLP4 0+4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 1359
;1358:
;1359:	flash.hModel = weapon->flashModel;
ADDRLP4 0+8
ADDRLP4 280
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ASGNI4
line 1360
;1360:	if (!flash.hModel) {
ADDRLP4 0+8
INDIRI4
CNSTI4 0
NEI4 $791
line 1361
;1361:		return;
ADDRGP4 $706
JUMPV
LABELV $791
line 1363
;1362:	}
;1363:	angles[YAW] = 0;
ADDRLP4 288+4
CNSTF4 0
ASGNF4
line 1364
;1364:	angles[PITCH] = 0;
ADDRLP4 288
CNSTF4 0
ASGNF4
line 1365
;1365:	angles[ROLL] = crandom() * 10;
ADDRLP4 456
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 288+8
ADDRLP4 456
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1101004800
MULF4
ASGNF4
line 1366
;1366:	AnglesToAxis( angles, flash.axis );
ADDRLP4 288
ARGP4
ADDRLP4 0+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1369
;1367:
;1368:	// colorize the railgun blast
;1369:	if ( weaponNum == WP_RAILGUN ) {
ADDRLP4 284
INDIRI4
CNSTI4 7
NEI4 $797
line 1370
;1370:		flash.shaderRGBA[0] = 255 * ci->color1[0];
ADDRLP4 464
ADDRLP4 444
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 468
CNSTF4 1325400064
ASGNF4
ADDRLP4 464
INDIRF4
ADDRLP4 468
INDIRF4
LTF4 $801
ADDRLP4 460
ADDRLP4 464
INDIRF4
ADDRLP4 468
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $802
JUMPV
LABELV $801
ADDRLP4 460
ADDRLP4 464
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $802
ADDRLP4 0+116
ADDRLP4 460
INDIRU4
CVUU1 4
ASGNU1
line 1371
;1371:		flash.shaderRGBA[1] = 255 * ci->color1[1];
ADDRLP4 476
ADDRLP4 444
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 480
CNSTF4 1325400064
ASGNF4
ADDRLP4 476
INDIRF4
ADDRLP4 480
INDIRF4
LTF4 $806
ADDRLP4 472
ADDRLP4 476
INDIRF4
ADDRLP4 480
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $807
JUMPV
LABELV $806
ADDRLP4 472
ADDRLP4 476
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $807
ADDRLP4 0+116+1
ADDRLP4 472
INDIRU4
CVUU1 4
ASGNU1
line 1372
;1372:		flash.shaderRGBA[2] = 255 * ci->color1[2];
ADDRLP4 488
ADDRLP4 444
INDIRP4
CNSTI4 52
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 492
CNSTF4 1325400064
ASGNF4
ADDRLP4 488
INDIRF4
ADDRLP4 492
INDIRF4
LTF4 $811
ADDRLP4 484
ADDRLP4 488
INDIRF4
ADDRLP4 492
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $812
JUMPV
LABELV $811
ADDRLP4 484
ADDRLP4 488
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $812
ADDRLP4 0+116+2
ADDRLP4 484
INDIRU4
CVUU1 4
ASGNU1
line 1373
;1373:		flash.shaderRGBA[3] = 255;
ADDRLP4 0+116+3
CNSTU1 255
ASGNU1
line 1374
;1374:	}
LABELV $797
line 1376
;1375:
;1376:	CG_PositionRotatedEntityOnTag( &flash, &gun, weapon->weaponModel, "tag_flash" );
ADDRLP4 0
ARGP4
ADDRLP4 140
ARGP4
ADDRLP4 280
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ARGI4
ADDRGP4 $815
ARGP4
ADDRGP4 CG_PositionRotatedEntityOnTag
CALLV
pop
line 1377
;1377:	trap_R_AddRefEntityToScene( &flash );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1379
;1378:
;1379:	if ( ps || cg.renderingThirdPerson || cent->currentState.number != cg.predictedPlayerState.clientNum ) {
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $822
ADDRGP4 cg+107628
INDIRI4
CNSTI4 0
NEI4 $822
ADDRFP4 8
INDIRP4
INDIRI4
ADDRGP4 cg+107636+140
INDIRI4
EQI4 $816
LABELV $822
line 1383
;1380:		int radius;
;1381:
;1382:		// add lightning bolt
;1383:		CG_LightningBolt( nonPredictedCent, flash.origin );
ADDRLP4 440
INDIRP4
ARGP4
ADDRLP4 0+68
ARGP4
ADDRGP4 CG_LightningBolt
CALLV
pop
line 1386
;1384:
;1385:		// add rail trail
;1386:		CG_SpawnRailTrail( cent, flash.origin );
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 0+68
ARGP4
ADDRGP4 CG_SpawnRailTrail
CALLV
pop
line 1390
;1387:
;1388:		// use our own muzzle point as dlight origin 
;1389:		// and put it a bit closer to vieworigin to avoid bad normals near walls
;1390:		if ( ps && cent->currentState.number == cg.predictedPlayerState.clientNum ) {
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $825
ADDRFP4 8
INDIRP4
INDIRI4
ADDRGP4 cg+107636+140
INDIRI4
NEI4 $825
line 1393
;1391:			vec3_t	start, end, muzzle, forward, up;
;1392:			trace_t	tr;
;1393:			AngleVectors( cg.refdefViewAngles, forward, NULL, up );
ADDRGP4 cg+109424
ARGP4
ADDRLP4 464
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 512
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1394
;1394:			VectorMA( cg.refdef.vieworg, 14, forward, muzzle );
ADDRLP4 476
ADDRGP4 cg+109056+24
INDIRF4
ADDRLP4 464
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
ADDRLP4 476+4
ADDRGP4 cg+109056+24+4
INDIRF4
ADDRLP4 464+4
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
ADDRLP4 476+8
ADDRGP4 cg+109056+24+8
INDIRF4
ADDRLP4 464+8
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
line 1395
;1395:			if ( weaponNum == WP_LIGHTNING )
ADDRLP4 284
INDIRI4
CNSTI4 6
NEI4 $842
line 1396
;1396:				VectorMA( muzzle, -8, up, muzzle );
ADDRLP4 476
ADDRLP4 476
INDIRF4
ADDRLP4 512
INDIRF4
CNSTF4 3238002688
MULF4
ADDF4
ASGNF4
ADDRLP4 476+4
ADDRLP4 476+4
INDIRF4
ADDRLP4 512+4
INDIRF4
CNSTF4 3238002688
MULF4
ADDF4
ASGNF4
ADDRLP4 476+8
ADDRLP4 476+8
INDIRF4
ADDRLP4 512+8
INDIRF4
CNSTF4 3238002688
MULF4
ADDF4
ASGNF4
ADDRGP4 $843
JUMPV
LABELV $842
line 1398
;1397:			else
;1398:				VectorMA( muzzle, -6, up, muzzle );
ADDRLP4 476
ADDRLP4 476
INDIRF4
ADDRLP4 512
INDIRF4
CNSTF4 3233808384
MULF4
ADDF4
ASGNF4
ADDRLP4 476+4
ADDRLP4 476+4
INDIRF4
ADDRLP4 512+4
INDIRF4
CNSTF4 3233808384
MULF4
ADDF4
ASGNF4
ADDRLP4 476+8
ADDRLP4 476+8
INDIRF4
ADDRLP4 512+8
INDIRF4
CNSTF4 3233808384
MULF4
ADDF4
ASGNF4
LABELV $843
line 1399
;1399:			VectorMA( cg.refdef.vieworg, 14, forward, start );
ADDRLP4 488
ADDRGP4 cg+109056+24
INDIRF4
ADDRLP4 464
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
ADDRLP4 488+4
ADDRGP4 cg+109056+24+4
INDIRF4
ADDRLP4 464+4
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
ADDRLP4 488+8
ADDRGP4 cg+109056+24+8
INDIRF4
ADDRLP4 464+8
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
line 1400
;1400:			VectorMA( cg.refdef.vieworg, 28, forward, end );
ADDRLP4 500
ADDRGP4 cg+109056+24
INDIRF4
ADDRLP4 464
INDIRF4
CNSTF4 1105199104
MULF4
ADDF4
ASGNF4
ADDRLP4 500+4
ADDRGP4 cg+109056+24+4
INDIRF4
ADDRLP4 464+4
INDIRF4
CNSTF4 1105199104
MULF4
ADDF4
ASGNF4
ADDRLP4 500+8
ADDRGP4 cg+109056+24+8
INDIRF4
ADDRLP4 464+8
INDIRF4
CNSTF4 1105199104
MULF4
ADDF4
ASGNF4
line 1401
;1401:			CG_Trace( &tr, start, NULL, NULL, end, cent->currentState.number, MASK_SHOT | CONTENTS_TRANSLUCENT );
ADDRLP4 524
ARGP4
ADDRLP4 488
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 500
ARGP4
ADDRFP4 8
INDIRP4
INDIRI4
ARGI4
CNSTI4 637534209
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 1402
;1402:			if ( tr.fraction != 1.0 ) {
ADDRLP4 524+8
INDIRF4
CNSTF4 1065353216
EQF4 $880
line 1403
;1403:				VectorMA( muzzle, -13.0 * ( 1.0 - tr.fraction ), forward, flash.origin );
ADDRLP4 0+68
ADDRLP4 476
INDIRF4
ADDRLP4 464
INDIRF4
CNSTF4 1065353216
ADDRLP4 524+8
INDIRF4
SUBF4
CNSTF4 3243245568
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 476+4
INDIRF4
ADDRLP4 464+4
INDIRF4
CNSTF4 1065353216
ADDRLP4 524+8
INDIRF4
SUBF4
CNSTF4 3243245568
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 476+8
INDIRF4
ADDRLP4 464+8
INDIRF4
CNSTF4 1065353216
ADDRLP4 524+8
INDIRF4
SUBF4
CNSTF4 3243245568
MULF4
MULF4
ADDF4
ASGNF4
line 1404
;1404:			} else {
ADDRGP4 $881
JUMPV
LABELV $880
line 1405
;1405:				VectorCopy( muzzle, flash.origin );
ADDRLP4 0+68
ADDRLP4 476
INDIRB
ASGNB 12
line 1406
;1406:			}
LABELV $881
line 1407
;1407:		}
LABELV $825
line 1409
;1408:
;1409:		if ( weaponNum == WP_MACHINEGUN ) // make it a bit less annoying
ADDRLP4 284
INDIRI4
CNSTI4 2
NEI4 $896
line 1410
;1410:			radius = MG_FLASH_RADIUS + (rand() & WEAPON_FLASH_RADIUS_MOD);
ADDRLP4 464
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 460
ADDRLP4 464
INDIRI4
CNSTI4 31
BANDI4
CNSTI4 200
ADDI4
ASGNI4
ADDRGP4 $897
JUMPV
LABELV $896
line 1412
;1411:		else
;1412:			radius = WEAPON_FLASH_RADIUS + (rand() & WEAPON_FLASH_RADIUS_MOD);
ADDRLP4 468
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 460
ADDRLP4 468
INDIRI4
CNSTI4 31
BANDI4
CNSTI4 300
ADDI4
ASGNI4
LABELV $897
line 1414
;1413:
;1414:		if ( weapon->flashDlightColor[0] || weapon->flashDlightColor[1] || weapon->flashDlightColor[2] ) {
ADDRLP4 280
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
CNSTF4 0
NEF4 $901
ADDRLP4 280
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
CNSTF4 0
NEF4 $901
ADDRLP4 280
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
CNSTF4 0
EQF4 $898
LABELV $901
line 1415
;1415:			trap_R_AddLightToScene( flash.origin, radius, 
ADDRLP4 0+68
ARGP4
ADDRLP4 460
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 280
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ARGF4
ADDRLP4 280
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
ARGF4
ADDRLP4 280
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
ARGF4
ADDRGP4 trap_R_AddLightToScene
CALLV
pop
line 1417
;1416:				weapon->flashDlightColor[0], weapon->flashDlightColor[1], weapon->flashDlightColor[2] );
;1417:		}
LABELV $898
line 1418
;1418:	}
LABELV $816
line 1419
;1419:}
LABELV $706
endproc CG_AddPlayerWeapon 580 28
export CG_AddViewWeapon
proc CG_AddViewWeapon 188 16
line 1429
;1420:
;1421:
;1422:/*
;1423:==============
;1424:CG_AddViewWeapon
;1425:
;1426:Add the weapon, and flash for the player's view
;1427:==============
;1428:*/
;1429:void CG_AddViewWeapon( playerState_t *ps ) {
line 1437
;1430:	refEntity_t	hand;
;1431:	centity_t	*cent;
;1432:	const clientInfo_t *ci;
;1433:	const weaponInfo_t *weapon;
;1434:	vec3_t		fovOffset;
;1435:	vec3_t		angles;
;1436:
;1437:	if ( ps->persistant[PERS_TEAM] == TEAM_SPECTATOR ) {
ADDRFP4 0
INDIRP4
CNSTI4 260
ADDP4
INDIRI4
CNSTI4 3
NEI4 $904
line 1438
;1438:		return;
ADDRGP4 $903
JUMPV
LABELV $904
line 1441
;1439:	}
;1440:
;1441:	if ( ps->pm_type == PM_INTERMISSION ) {
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 5
NEI4 $906
line 1442
;1442:		return;
ADDRGP4 $903
JUMPV
LABELV $906
line 1447
;1443:	}
;1444:
;1445:	// no gun if in third person view or a camera is active
;1446:	//if ( cg.renderingThirdPerson || cg.cameraMode) {
;1447:	if ( cg.renderingThirdPerson ) {
ADDRGP4 cg+107628
INDIRI4
CNSTI4 0
EQI4 $908
line 1448
;1448:		return;
ADDRGP4 $903
JUMPV
LABELV $908
line 1453
;1449:	}
;1450:
;1451:
;1452:	// allow the gun to be completely removed
;1453:	if ( !cg_drawGun.integer ) {
ADDRGP4 cg_drawGun+12
INDIRI4
CNSTI4 0
NEI4 $911
line 1456
;1454:		vec3_t		origin;
;1455:
;1456:		if ( cg.predictedPlayerState.eFlags & EF_FIRING ) {
ADDRGP4 cg+107636+104
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $903
line 1458
;1457:			// special hack for lightning gun...
;1458:			VectorCopy( cg.refdef.vieworg, origin );
ADDRLP4 176
ADDRGP4 cg+109056+24
INDIRB
ASGNB 12
line 1459
;1459:			VectorMA( origin, -8, cg.refdef.viewaxis[2], origin );
ADDRLP4 176
ADDRLP4 176
INDIRF4
ADDRGP4 cg+109056+36+24
INDIRF4
CNSTF4 3238002688
MULF4
ADDF4
ASGNF4
ADDRLP4 176+4
ADDRLP4 176+4
INDIRF4
ADDRGP4 cg+109056+36+24+4
INDIRF4
CNSTF4 3238002688
MULF4
ADDF4
ASGNF4
ADDRLP4 176+8
ADDRLP4 176+8
INDIRF4
ADDRGP4 cg+109056+36+24+8
INDIRF4
CNSTF4 3238002688
MULF4
ADDF4
ASGNF4
line 1460
;1460:			CG_LightningBolt( &cg_entities[ps->clientNum], origin );
ADDRFP4 0
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
CNSTI4 740
MULI4
ADDRGP4 cg_entities
ADDP4
ARGP4
ADDRLP4 176
ARGP4
ADDRGP4 CG_LightningBolt
CALLV
pop
line 1461
;1461:		}
line 1462
;1462:		return;
ADDRGP4 $903
JUMPV
LABELV $911
line 1466
;1463:	}
;1464:
;1465:	// don't draw if testing a gun model
;1466:	if ( cg.testGun ) {
ADDRGP4 cg+118188
INDIRI4
CNSTI4 0
EQI4 $935
line 1467
;1467:		return;
ADDRGP4 $903
JUMPV
LABELV $935
line 1471
;1468:	}
;1469:
;1470:	// drop gun lower at higher fov
;1471:	if ( cgs.fov > 90.0 ) {
ADDRGP4 cgs+149796
INDIRF4
CNSTF4 1119092736
LEF4 $938
line 1472
;1472:		fovOffset[0] = 0;
ADDRLP4 140
CNSTF4 0
ASGNF4
line 1473
;1473:		fovOffset[2] = -0.2 * ( cgs.fov - 90.0 );
ADDRLP4 140+8
ADDRGP4 cgs+149796
INDIRF4
CNSTF4 1119092736
SUBF4
CNSTF4 3192704205
MULF4
ASGNF4
line 1474
;1474:	} else {
ADDRGP4 $939
JUMPV
LABELV $938
line 1476
;1475:		// move gun forward at lowerer fov
;1476:		fovOffset[0] = -0.2 * ( cgs.fov - 90.0 );
ADDRLP4 140
ADDRGP4 cgs+149796
INDIRF4
CNSTF4 1119092736
SUBF4
CNSTF4 3192704205
MULF4
ASGNF4
line 1477
;1477:		fovOffset[2] = 0;
ADDRLP4 140+8
CNSTF4 0
ASGNF4
line 1478
;1478:	}
LABELV $939
line 1480
;1479:
;1480:	cent = &cg.predictedPlayerEntity;	// &cg_entities[cg.snap->ps.clientNum];
ADDRLP4 152
ADDRGP4 cg+108104
ASGNP4
line 1481
;1481:	CG_RegisterWeapon( ps->weapon );
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_RegisterWeapon
CALLV
pop
line 1482
;1482:	weapon = &cg_weapons[ ps->weapon ];
ADDRLP4 156
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 136
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 1484
;1483:
;1484:	memset (&hand, 0, sizeof(hand));
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1487
;1485:
;1486:	// set up gun position
;1487:	CG_CalculateWeaponPosition( hand.origin, angles );
ADDRLP4 0+68
ARGP4
ADDRLP4 160
ARGP4
ADDRGP4 CG_CalculateWeaponPosition
CALLV
pop
line 1489
;1488:
;1489:	VectorMA( hand.origin, (cg_gun_x.value+fovOffset[0]), cg.refdef.viewaxis[0], hand.origin );
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
ADDRGP4 cg+109056+36
INDIRF4
ADDRGP4 cg_gun_x+8
INDIRF4
ADDRLP4 140
INDIRF4
ADDF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
ADDRGP4 cg+109056+36+4
INDIRF4
ADDRGP4 cg_gun_x+8
INDIRF4
ADDRLP4 140
INDIRF4
ADDF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
ADDRGP4 cg+109056+36+8
INDIRF4
ADDRGP4 cg_gun_x+8
INDIRF4
ADDRLP4 140
INDIRF4
ADDF4
MULF4
ADDF4
ASGNF4
line 1490
;1490:	VectorMA( hand.origin, cg_gun_y.value, cg.refdef.viewaxis[1], hand.origin );
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
ADDRGP4 cg+109056+36+12
INDIRF4
ADDRGP4 cg_gun_y+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
ADDRGP4 cg+109056+36+12+4
INDIRF4
ADDRGP4 cg_gun_y+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
ADDRGP4 cg+109056+36+12+8
INDIRF4
ADDRGP4 cg_gun_y+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1491
;1491:	VectorMA( hand.origin, (cg_gun_z.value+fovOffset[2]), cg.refdef.viewaxis[2], hand.origin );
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
ADDRGP4 cg+109056+36+24
INDIRF4
ADDRGP4 cg_gun_z+8
INDIRF4
ADDRLP4 140+8
INDIRF4
ADDF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
ADDRGP4 cg+109056+36+24+4
INDIRF4
ADDRGP4 cg_gun_z+8
INDIRF4
ADDRLP4 140+8
INDIRF4
ADDF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
ADDRGP4 cg+109056+36+24+8
INDIRF4
ADDRGP4 cg_gun_z+8
INDIRF4
ADDRLP4 140+8
INDIRF4
ADDF4
MULF4
ADDF4
ASGNF4
line 1493
;1492:
;1493:	AnglesToAxis( angles, hand.axis );
ADDRLP4 160
ARGP4
ADDRLP4 0+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1496
;1494:
;1495:	// map torso animations to weapon animations
;1496:	if ( cg_gun_frame.integer ) {
ADDRGP4 cg_gun_frame+12
INDIRI4
CNSTI4 0
EQI4 $1020
line 1498
;1497:		// development tool
;1498:		hand.frame = hand.oldframe = cg_gun_frame.integer;
ADDRLP4 176
ADDRGP4 cg_gun_frame+12
INDIRI4
ASGNI4
ADDRLP4 0+96
ADDRLP4 176
INDIRI4
ASGNI4
ADDRLP4 0+80
ADDRLP4 176
INDIRI4
ASGNI4
line 1499
;1499:		hand.backlerp = 0;
ADDRLP4 0+100
CNSTF4 0
ASGNF4
line 1500
;1500:	} else {
ADDRGP4 $1021
JUMPV
LABELV $1020
line 1502
;1501:		// get clientinfo for animation map
;1502:		ci = &cgs.clientinfo[ cent->currentState.clientNum ];
ADDRLP4 172
ADDRLP4 152
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+40996
ADDP4
ASGNP4
line 1503
;1503:		hand.frame = CG_MapTorsoToWeaponFrame( ci, cent->pe.torso.frame );
ADDRLP4 172
INDIRP4
ARGP4
ADDRLP4 152
INDIRP4
CNSTI4 516
ADDP4
INDIRI4
ARGI4
ADDRLP4 176
ADDRGP4 CG_MapTorsoToWeaponFrame
CALLI4
ASGNI4
ADDRLP4 0+80
ADDRLP4 176
INDIRI4
ASGNI4
line 1504
;1504:		hand.oldframe = CG_MapTorsoToWeaponFrame( ci, cent->pe.torso.oldFrame );
ADDRLP4 172
INDIRP4
ARGP4
ADDRLP4 152
INDIRP4
CNSTI4 508
ADDP4
INDIRI4
ARGI4
ADDRLP4 180
ADDRGP4 CG_MapTorsoToWeaponFrame
CALLI4
ASGNI4
ADDRLP4 0+96
ADDRLP4 180
INDIRI4
ASGNI4
line 1505
;1505:		hand.backlerp = cent->pe.torso.backlerp;
ADDRLP4 0+100
ADDRLP4 152
INDIRP4
CNSTI4 524
ADDP4
INDIRF4
ASGNF4
line 1506
;1506:	}
LABELV $1021
line 1508
;1507:
;1508:	hand.hModel = weapon->handsModel;
ADDRLP4 0+8
ADDRLP4 156
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ASGNI4
line 1509
;1509:	hand.renderfx = RF_DEPTHHACK | RF_FIRST_PERSON | RF_MINLIGHT;
ADDRLP4 0+4
CNSTI4 13
ASGNI4
line 1512
;1510:
;1511:	// add everything onto the hand
;1512:	CG_AddPlayerWeapon( &hand, ps, &cg.predictedPlayerEntity, ps->persistant[PERS_TEAM] );
ADDRLP4 0
ARGP4
ADDRLP4 176
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 176
INDIRP4
ARGP4
ADDRGP4 cg+108104
ARGP4
ADDRLP4 176
INDIRP4
CNSTI4 260
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_AddPlayerWeapon
CALLV
pop
line 1513
;1513:}
LABELV $903
endproc CG_AddViewWeapon 188 16
proc CG_DrawWeaponSelect 3752 32
line 1530
;1514:
;1515:/*
;1516:==============================================================================
;1517:
;1518:WEAPON SELECTION
;1519:
;1520:==============================================================================
;1521:*/
;1522:
;1523:
;1524:/*
;1525:===================
;1526:CG_DrawWeaponSelect
;1527:===================
;1528:*/
;1529:#ifdef NEOHUD
;1530:static void CG_DrawWeaponSelect( item_t *itm ) {
line 1548
;1531:	int			i;
;1532:	int			bits;
;1533:	int			count;
;1534:	int			weaponSelect;
;1535:	const char	*name;
;1536:	//float		*forecolor;
;1537:	float		*fadeColor;
;1538:	vec4_t		forecolor;
;1539:
;1540:	char		buf[16];
;1541:	float		icoX, icoY;
;1542:	qhandle_t	shader;
;1543:	qboolean	SelectedColExist;
;1544:	rectangle_t r;
;1545:	item_t		ico;
;1546:	item_t		icoS;
;1547:
;1548:	if ( cg_drawWeaponSelect.integer == 0 ) {
ADDRGP4 cg_drawWeaponSelect+12
INDIRI4
CNSTI4 0
NEI4 $1035
line 1549
;1549:		return;
ADDRGP4 $1034
JUMPV
LABELV $1035
line 1552
;1550:	}
;1551:
;1552:	if ( !CG_HUDItemVisible(itm) ) {
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 2512
ADDRGP4 CG_HUDItemVisible
CALLI4
ASGNI4
ADDRLP4 2512
INDIRI4
CNSTI4 0
NEI4 $1038
line 1553
;1553:		return;
ADDRGP4 $1034
JUMPV
LABELV $1038
line 1557
;1554:	}
;1555:
;1556:	// don't draw if dead or the scoreboard is being explicitly shown
;1557:	if (cg.showScores || !cg.snap->ps.stats[STAT_HEALTH] > 0) {
ADDRGP4 cg+115356
INDIRI4
CNSTI4 0
NEI4 $1045
ADDRGP4 cg+36
INDIRP4
CNSTI4 228
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1046
ADDRLP4 2516
CNSTI4 1
ASGNI4
ADDRGP4 $1047
JUMPV
LABELV $1046
ADDRLP4 2516
CNSTI4 0
ASGNI4
LABELV $1047
ADDRLP4 2516
INDIRI4
CNSTI4 0
LEI4 $1040
LABELV $1045
line 1558
;1558:		return;
ADDRGP4 $1034
JUMPV
LABELV $1040
line 1561
;1559:	}
;1560:
;1561:	ico = dyn_itemArray[IcoWeapList_idx];
ADDRLP4 1216
ADDRGP4 IcoWeapList_idx
INDIRI4
CNSTI4 1212
MULI4
ADDRGP4 dyn_itemArray
ADDP4
INDIRB
ASGNB 1212
line 1562
;1562:	icoS = dyn_itemArray[IcoWeapListSel_idx];
ADDRLP4 4
ADDRGP4 IcoWeapListSel_idx
INDIRI4
CNSTI4 1212
MULI4
ADDRGP4 dyn_itemArray
ADDP4
INDIRB
ASGNB 1212
line 1564
;1563:
;1564:	weaponSelect = abs( cg_drawWeaponSelect.integer );
ADDRGP4 cg_drawWeaponSelect+12
INDIRI4
ARGI4
ADDRLP4 2520
ADDRGP4 abs
CALLI4
ASGNI4
ADDRLP4 2440
ADDRLP4 2520
INDIRI4
ASGNI4
line 1567
;1565:
;1566:	// color of text (ammo counters/selected name)
;1567:	HUD_color(itm, &itm->forecolor, &forecolor, colorWhite);
ADDRLP4 2524
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 2524
INDIRP4
ARGP4
ADDRLP4 2524
INDIRP4
CNSTI4 1152
ADDP4
ARGP4
ADDRLP4 2492
ARGP4
ADDRGP4 colorWhite
ARGP4
ADDRGP4 HUD_color
CALLV
pop
line 1569
;1568:	
;1569:	fadeColor = CG_FadeColor( cg.weaponSelectTime, itm->time, forecolor);
ADDRGP4 cg+117876
INDIRI4
ARGI4
ADDRFP4 0
INDIRP4
CNSTI4 1032
ADDP4
INDIRI4
ARGI4
ADDRLP4 2492
ARGP4
ADDRLP4 2528
ADDRGP4 CG_FadeColor
CALLP4
ASGNP4
ADDRLP4 2472
ADDRLP4 2528
INDIRP4
ASGNP4
line 1570
;1570:	if ( !fadeColor) {
ADDRLP4 2472
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1050
line 1571
;1571:		return;
ADDRGP4 $1034
JUMPV
LABELV $1050
line 1574
;1572:	}
;1573:
;1574:	trap_R_SetColor( fadeColor );
ADDRLP4 2472
INDIRP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1577
;1575:
;1576:	// showing weapon select clears pickup item display, but not the blend blob
;1577:	cg.itemPickupTime = 0;
ADDRGP4 cg+117868
CNSTI4 0
ASGNI4
line 1580
;1578:
;1579:	// count the number of weapons owned
;1580:	bits = cg.snap->ps.stats[ STAT_WEAPONS ];
ADDRLP4 2436
ADDRGP4 cg+36
INDIRP4
CNSTI4 236
ADDP4
INDIRI4
ASGNI4
line 1581
;1581:	count = 0;
ADDRLP4 2464
CNSTI4 0
ASGNI4
line 1582
;1582:	for ( i = WP_GAUNTLET ; i < MAX_WEAPONS ; i++ ) {
ADDRLP4 0
CNSTI4 1
ASGNI4
LABELV $1054
line 1583
;1583:		if ( bits & ( 1 << i ) ) {
ADDRLP4 2436
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
EQI4 $1058
line 1584
;1584:			count++;
ADDRLP4 2464
ADDRLP4 2464
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1585
;1585:		}
LABELV $1058
line 1586
;1586:	}
LABELV $1055
line 1582
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $1054
line 1589
;1587:
;1588:	// pos & size according to anchor & margins
;1589:	HUD_Update_Anchors(itm, &r);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 2448
ARGP4
ADDRGP4 HUD_Update_Anchors
CALLV
pop
line 1593
;1590:	//CG_Update_Margin(itm, &r);
;1591:
;1592:	// horizontal ammo counters
;1593:	if ( weaponSelect < 3 ) {
ADDRLP4 2440
INDIRI4
CNSTI4 3
GEI4 $1060
line 1594
;1594:		icoX = itm->rect.x - count * icoS.rect.w * 0.5;
ADDRLP4 2432
ADDRFP4 0
INDIRP4
CNSTI4 1088
ADDP4
INDIRF4
ADDRLP4 2464
INDIRI4
CVIF4 4
ADDRLP4 4+1088+8
INDIRF4
MULF4
CNSTF4 1056964608
MULF4
SUBF4
ASGNF4
line 1595
;1595:		icoY = itm->rect.y + cgs.screenYmin;
ADDRLP4 2428
ADDRFP4 0
INDIRP4
CNSTI4 1092
ADDP4
INDIRF4
ADDRGP4 cgs+31460
INDIRF4
ADDF4
ASGNF4
line 1596
;1596:	} else {// vertical ammo counters
ADDRGP4 $1061
JUMPV
LABELV $1060
line 1597
;1597:		icoX = itm->rect.x + cgs.screenXmin;
ADDRLP4 2432
ADDRFP4 0
INDIRP4
CNSTI4 1088
ADDP4
INDIRF4
ADDRGP4 cgs+31452
INDIRF4
ADDF4
ASGNF4
line 1601
;1598:		//icoY = itm->rect.y - count * icoS.rect.h * 0.5;
;1599:		//CG_Update_Valign(itm, &r); // TODO
;1600:
;1601:		if (itm->propFlags & PROP_VALIGN_TOP)
ADDRFP4 0
INDIRP4
CNSTI4 1052
ADDP4
INDIRU4
CNSTU4 1
BANDU4
CNSTU4 0
EQU4 $1066
line 1602
;1602:			icoY = itm->rect.y;
ADDRLP4 2428
ADDRFP4 0
INDIRP4
CNSTI4 1092
ADDP4
INDIRF4
ASGNF4
ADDRGP4 $1067
JUMPV
LABELV $1066
line 1603
;1603:		else if (itm->propFlags & PROP_VALIGN_MIDDLE)
ADDRFP4 0
INDIRP4
CNSTI4 1052
ADDP4
INDIRU4
CNSTU4 2
BANDU4
CNSTU4 0
EQU4 $1068
line 1604
;1604:			icoY = itm->rect.y - count * icoS.rect.h * 0.5;
ADDRLP4 2428
ADDRFP4 0
INDIRP4
CNSTI4 1092
ADDP4
INDIRF4
ADDRLP4 2464
INDIRI4
CVIF4 4
ADDRLP4 4+1088+12
INDIRF4
MULF4
CNSTF4 1056964608
MULF4
SUBF4
ASGNF4
ADDRGP4 $1069
JUMPV
LABELV $1068
line 1605
;1605:		else if (itm->propFlags & PROP_VALIGN_BOTTOM)
ADDRFP4 0
INDIRP4
CNSTI4 1052
ADDP4
INDIRU4
CNSTU4 4
BANDU4
CNSTU4 0
EQU4 $1072
line 1606
;1606:			icoY = itm->rect.y - count * icoS.rect.h ;
ADDRLP4 2428
ADDRFP4 0
INDIRP4
CNSTI4 1092
ADDP4
INDIRF4
ADDRLP4 2464
INDIRI4
CVIF4 4
ADDRLP4 4+1088+12
INDIRF4
MULF4
SUBF4
ASGNF4
LABELV $1072
LABELV $1069
LABELV $1067
line 1607
;1607:	}
LABELV $1061
line 1609
;1608:
;1609:	r.x = icoX;
ADDRLP4 2448
ADDRLP4 2432
INDIRF4
ASGNF4
line 1610
;1610:	r.y = icoY;
ADDRLP4 2448+4
ADDRLP4 2428
INDIRF4
ASGNF4
line 1611
;1611:	r.w = count * icoS.rect.w;
ADDRLP4 2448+8
ADDRLP4 2464
INDIRI4
CVIF4 4
ADDRLP4 4+1088+8
INDIRF4
MULF4
ASGNF4
line 1612
;1612:	r.h = icoS.rect.h;
ADDRLP4 2448+12
ADDRLP4 4+1088+12
INDIRF4
ASGNF4
line 1614
;1613:
;1614:	HUD_Update_finalRect(itm, r.x, r.y, r.w, r.h);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 2448
INDIRF4
CVFI4 4
ARGI4
ADDRLP4 2448+4
INDIRF4
CVFI4 4
ARGI4
ADDRLP4 2448+8
INDIRF4
CVFI4 4
ARGI4
ADDRLP4 2448+12
INDIRF4
CVFI4 4
ARGI4
ADDRGP4 HUD_Update_finalRect
CALLV
pop
line 1617
;1615:
;1616:	// is selected color defined in HUD file?
;1617:	SelectedColExist = (icoS.backcolor.colorflags & C_COLOR_RGBA );//TOOD use HUD_Getbackcolor
ADDRLP4 2444
ADDRLP4 4+1128+16
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
ASGNI4
line 1619
;1618:
;1619:	shader = CG_HUDShader(&icoS, cgs.media.selectShader );
ADDRLP4 4
ARGP4
ADDRGP4 cgs+148752+212
INDIRI4
ARGI4
ADDRLP4 2532
ADDRGP4 CG_HUDShader
CALLI4
ASGNI4
ADDRLP4 2468
ADDRLP4 2532
INDIRI4
ASGNI4
line 1621
;1620:
;1621:	for ( i = WP_GAUNTLET ; i < MAX_WEAPONS ; i++ ) {
ADDRLP4 0
CNSTI4 1
ASGNI4
LABELV $1090
line 1622
;1622:		if ( !( bits & ( 1 << i ) ) ) {
ADDRLP4 2436
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
NEI4 $1094
line 1623
;1623:			continue;
ADDRGP4 $1091
JUMPV
LABELV $1094
line 1626
;1624:		}
;1625:
;1626:		CG_RegisterWeapon( i );
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_RegisterWeapon
CALLV
pop
line 1629
;1627:
;1628:		// draw weapon icon
;1629:		CG_DrawPic( icoX, icoY, ico.rect.w, ico.rect.h, cg_weapons[i].weaponIcon );
ADDRLP4 2432
INDIRF4
ARGF4
ADDRLP4 2428
INDIRF4
ARGF4
ADDRLP4 1216+1088+8
INDIRF4
ARGF4
ADDRLP4 1216+1088+12
INDIRF4
ARGF4
ADDRLP4 0
INDIRI4
CNSTI4 136
MULI4
ADDRGP4 cg_weapons+68
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 1632
;1630:
;1631:		// draw selection marker
;1632:		if ( i == cg.weaponSelect ) {
ADDRLP4 0
INDIRI4
ADDRGP4 cg+108956
INDIRI4
NEI4 $1101
line 1634
;1633:
;1634:			if (SelectedColExist) {
ADDRLP4 2444
INDIRI4
CNSTI4 0
EQI4 $1104
line 1635
;1635:				trap_R_SetColor(icoS.backcolor.color);
ADDRLP4 4+1128
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1636
;1636:			}
LABELV $1104
line 1638
;1637:
;1638:			if (icoS.param == 1) { // allow a better control of the selection mark
ADDRLP4 4+1036
INDIRI4
CNSTI4 1
NEI4 $1107
line 1639
;1639:				CG_DrawPic(icoX + icoS.rect.x, icoY + icoS.rect.y, icoS.rect.w, icoS.rect.h, shader);
ADDRLP4 2432
INDIRF4
ADDRLP4 4+1088
INDIRF4
ADDF4
ARGF4
ADDRLP4 2428
INDIRF4
ADDRLP4 4+1088+4
INDIRF4
ADDF4
ARGF4
ADDRLP4 4+1088+8
INDIRF4
ARGF4
ADDRLP4 4+1088+12
INDIRF4
ARGF4
ADDRLP4 2468
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 1640
;1640:			}
ADDRGP4 $1108
JUMPV
LABELV $1107
line 1641
;1641:			else {
line 1642
;1642:				int icoSX = icoX - (icoS.rect.w - ico.rect.w) * 0.5f;
ADDRLP4 2536
ADDRLP4 2432
INDIRF4
ADDRLP4 4+1088+8
INDIRF4
ADDRLP4 1216+1088+8
INDIRF4
SUBF4
CNSTF4 1056964608
MULF4
SUBF4
CVFI4 4
ASGNI4
line 1643
;1643:				int icoSY = icoY - (icoS.rect.h - ico.rect.h) * 0.5f;
ADDRLP4 2540
ADDRLP4 2428
INDIRF4
ADDRLP4 4+1088+12
INDIRF4
ADDRLP4 1216+1088+12
INDIRF4
SUBF4
CNSTF4 1056964608
MULF4
SUBF4
CVFI4 4
ASGNI4
line 1645
;1644:
;1645:				CG_DrawPic(icoSX, icoSY, icoS.rect.w, icoS.rect.h, shader);
ADDRLP4 2536
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 2540
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 4+1088+8
INDIRF4
ARGF4
ADDRLP4 4+1088+12
INDIRF4
ARGF4
ADDRLP4 2468
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 1646
;1646:			}
LABELV $1108
line 1648
;1647:
;1648:			if (SelectedColExist) {
ADDRLP4 2444
INDIRI4
CNSTI4 0
EQI4 $1129
line 1649
;1649:				trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1650
;1650:			}
LABELV $1129
line 1651
;1651:		}
LABELV $1101
line 1654
;1652:
;1653:		// no-ammo cross on top
;1654:		if ( !cg.snap->ps.ammo[ i ] ) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1131
line 1655
;1655:			CG_DrawPic( icoX, icoY, ico.rect.w, ico.rect.h, cgs.media.noammoShader );
ADDRLP4 2432
INDIRF4
ARGF4
ADDRLP4 2428
INDIRF4
ARGF4
ADDRLP4 1216+1088+8
INDIRF4
ARGF4
ADDRLP4 1216+1088+12
INDIRF4
ARGF4
ADDRGP4 cgs+148752+272
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 1656
;1656:		} else if ( weaponSelect > 1 && cg.snap->ps.ammo[ i ] > 0 ) {
ADDRGP4 $1132
JUMPV
LABELV $1131
ADDRLP4 2440
INDIRI4
CNSTI4 1
LEI4 $1140
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
CNSTI4 0
LEI4 $1140
line 1657
;1657:			item_t WpNameP = dyn_itemArray[WeapListSelName_idx];
ADDRLP4 2536
ADDRGP4 WeapListSelName_idx
INDIRI4
CNSTI4 1212
MULI4
ADDRGP4 dyn_itemArray
ADDP4
INDIRB
ASGNB 1212
line 1660
;1658:			
;1659:			// ammo counter
;1660:			BG_sprintf( buf, "%i", cg.snap->ps.ammo[ i ] );
ADDRLP4 2476
ARGP4
ADDRGP4 $1143
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
ARGI4
ADDRGP4 BG_sprintf
CALLI4
pop
line 1662
;1661:			
;1662:			if ( weaponSelect == 2 ) {
ADDRLP4 2440
INDIRI4
CNSTI4 2
NEI4 $1145
line 1664
;1663:				// horizontal ammo counters
;1664:				CG_DrawString( icoX + ico.rect.w/2, icoY - icoS.rect.h*0.5, buf, fadeColor,
ADDRLP4 2432
INDIRF4
ADDRLP4 1216+1088+8
INDIRF4
CNSTF4 1056964608
MULF4
ADDF4
ARGF4
ADDRLP4 2428
INDIRF4
ADDRLP4 4+1088+12
INDIRF4
CNSTF4 1056964608
MULF4
SUBF4
ARGF4
ADDRLP4 2476
ARGP4
ADDRLP4 2472
INDIRP4
ARGP4
ADDRLP4 2536+1120
INDIRF4
ARGF4
ADDRLP4 2536+1120+4
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRLP4 2536+1196+4
INDIRU4
CVUI4 4
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 1666
;1665:					WpNameP.fontsize.w, WpNameP.fontsize.h, 0, WpNameP.text.styleflags);// DS_CENTER | DS_PROPORTIONAL );
;1666:			} else {
ADDRGP4 $1146
JUMPV
LABELV $1145
line 1668
;1667:				// vertical ammo counters
;1668:				if (icoS.param == 1) {
ADDRLP4 4+1036
INDIRI4
CNSTI4 1
NEI4 $1156
line 1669
;1669:					int x = icoX + ico.rect.w;
ADDRLP4 3748
ADDRLP4 2432
INDIRF4
ADDRLP4 1216+1088+8
INDIRF4
ADDF4
CVFI4 4
ASGNI4
line 1671
;1670:
;1671:					if (WpNameP.text.styleflags & DS_RIGHT)
ADDRLP4 2536+1196+4
INDIRU4
CNSTU4 16
BANDU4
CNSTU4 0
EQU4 $1161
line 1672
;1672:						x += (3 * WpNameP.fontsize.w);
ADDRLP4 3748
ADDRLP4 3748
INDIRI4
CVIF4 4
ADDRLP4 2536+1120
INDIRF4
CNSTF4 1077936128
MULF4
ADDF4
CVFI4 4
ASGNI4
LABELV $1161
line 1674
;1673:
;1674:					CG_DrawString(x, icoY + (ico.rect.h - WpNameP.fontsize.h) / 2, buf, fadeColor,
ADDRLP4 3748
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 2428
INDIRF4
ADDRLP4 1216+1088+12
INDIRF4
ADDRLP4 2536+1120+4
INDIRF4
SUBF4
CNSTF4 1056964608
MULF4
ADDF4
ARGF4
ADDRLP4 2476
ARGP4
ADDRLP4 2472
INDIRP4
ARGP4
ADDRLP4 2536+1120
INDIRF4
ARGF4
ADDRLP4 2536+1120+4
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRLP4 2536+1196+4
INDIRU4
CVUI4 4
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 1676
;1675:						WpNameP.fontsize.w, WpNameP.fontsize.h, 0, WpNameP.text.styleflags);// DS_RIGHT );
;1676:				}
ADDRGP4 $1157
JUMPV
LABELV $1156
line 1677
;1677:				else {
line 1678
;1678:					CG_DrawString(icoX + icoS.rect.w - 1 + (3 * WpNameP.fontsize.w), icoY + (ico.rect.h - WpNameP.fontsize.h) / 2, buf, fadeColor,
ADDRLP4 2432
INDIRF4
ADDRLP4 4+1088+8
INDIRF4
ADDF4
CNSTF4 1065353216
SUBF4
ADDRLP4 2536+1120
INDIRF4
CNSTF4 1077936128
MULF4
ADDF4
ARGF4
ADDRLP4 2428
INDIRF4
ADDRLP4 1216+1088+12
INDIRF4
ADDRLP4 2536+1120+4
INDIRF4
SUBF4
CNSTF4 1056964608
MULF4
ADDF4
ARGF4
ADDRLP4 2476
ARGP4
ADDRLP4 2472
INDIRP4
ARGP4
ADDRLP4 2536+1120
INDIRF4
ARGF4
ADDRLP4 2536+1120+4
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRLP4 2536+1196+4
INDIRU4
CVUI4 4
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 1680
;1679:						WpNameP.fontsize.w, WpNameP.fontsize.h, 0, WpNameP.text.styleflags);// DS_RIGHT );
;1680:				}
LABELV $1157
line 1682
;1681:
;1682:			}
LABELV $1146
line 1683
;1683:		}
LABELV $1140
LABELV $1132
line 1685
;1684:
;1685:		if (weaponSelect < 3)
ADDRLP4 2440
INDIRI4
CNSTI4 3
GEI4 $1187
line 1686
;1686:			icoX += icoS.rect.w;
ADDRLP4 2432
ADDRLP4 2432
INDIRF4
ADDRLP4 4+1088+8
INDIRF4
ADDF4
ASGNF4
ADDRGP4 $1188
JUMPV
LABELV $1187
line 1688
;1687:		else
;1688:			icoY += icoS.rect.h + itm->margin.top;
ADDRLP4 2428
ADDRLP4 2428
INDIRF4
ADDRLP4 4+1088+12
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 1184
ADDP4
INDIRF4
ADDF4
ADDF4
ASGNF4
LABELV $1188
line 1689
;1689:	}
LABELV $1091
line 1621
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $1090
line 1692
;1690:
;1691:	// draw selected weapon name
;1692:	if ( cg_weapons[ cg.weaponSelect ].item && weaponSelect == 1 ) {
ADDRGP4 cg+108956
INDIRI4
CNSTI4 136
MULI4
ADDRGP4 cg_weapons+4
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1193
ADDRLP4 2440
INDIRI4
CNSTI4 1
NEI4 $1193
line 1693
;1693:		name = cg_weapons[ cg.weaponSelect ].item->pickup_name;
ADDRLP4 2508
ADDRGP4 cg+108956
INDIRI4
CNSTI4 136
MULI4
ADDRGP4 cg_weapons+4
ADDP4
INDIRP4
CNSTI4 28
ADDP4
INDIRP4
ASGNP4
line 1694
;1694:		if ( name ) {
ADDRLP4 2508
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1199
line 1695
;1695:			item_t WpNameP = dyn_itemArray[WeapListSelName_idx];
ADDRLP4 2536
ADDRGP4 WeapListSelName_idx
INDIRI4
CNSTI4 1212
MULI4
ADDRGP4 dyn_itemArray
ADDP4
INDIRB
ASGNB 1212
line 1697
;1696:
;1697:			CG_DrawString(itm->rect.x, icoY - (WpNameP.fontsize.h + 6), name, fadeColor,
ADDRFP4 0
INDIRP4
CNSTI4 1088
ADDP4
INDIRF4
ARGF4
ADDRLP4 2428
INDIRF4
ADDRLP4 2536+1120+4
INDIRF4
CNSTF4 1086324736
ADDF4
SUBF4
ARGF4
ADDRLP4 2508
INDIRP4
ARGP4
ADDRLP4 2472
INDIRP4
ARGP4
ADDRLP4 2536+1120
INDIRF4
ARGF4
ADDRLP4 2536+1120+4
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRLP4 2536+1196+4
INDIRU4
CNSTU4 2
BORU4
CVUI4 4
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 1699
;1698:				WpNameP.fontsize.w, WpNameP.fontsize.h, 0, WpNameP.text.styleflags | DS_FORCE_COLOR);// DS_SHADOW | DS_PROPORTIONAL | DS_CENTER | DS_FORCE_COLOR);
;1699:		}
LABELV $1199
line 1700
;1700:	}
LABELV $1193
line 1701
;1701:	trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1702
;1702:}
LABELV $1034
endproc CG_DrawWeaponSelect 3752 32
export CG_DrawWeaponSelect_H
proc CG_DrawWeaponSelect_H 4 4
line 1705
;1703:
;1704:// horizontal ammo
;1705:void CG_DrawWeaponSelect_H( item_t *itm ) {
line 1706
;1706:	if (abs(cg_drawWeaponSelect.integer) < 3) {
ADDRGP4 cg_drawWeaponSelect+12
INDIRI4
ARGI4
ADDRLP4 0
ADDRGP4 abs
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
GEI4 $1209
line 1707
;1707:		CG_DrawWeaponSelect(itm);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_DrawWeaponSelect
CALLV
pop
line 1708
;1708:	}
LABELV $1209
line 1709
;1709:}
LABELV $1208
endproc CG_DrawWeaponSelect_H 4 4
export CG_DrawWeaponSelect_V
proc CG_DrawWeaponSelect_V 4 4
line 1712
;1710:
;1711:// vertical ammo
;1712:void CG_DrawWeaponSelect_V( item_t *itm ) {
line 1713
;1713:	if (abs(cg_drawWeaponSelect.integer) >= 3) {
ADDRGP4 cg_drawWeaponSelect+12
INDIRI4
ARGI4
ADDRLP4 0
ADDRGP4 abs
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $1213
line 1714
;1714:		CG_DrawWeaponSelect(itm);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_DrawWeaponSelect
CALLV
pop
line 1715
;1715:	}
LABELV $1213
line 1716
;1716:}
LABELV $1212
endproc CG_DrawWeaponSelect_V 4 4
proc CG_WeaponSelectable 0 0
line 1823
;1717:#else
;1718:#define AMMO_FONT_SIZE 12
;1719:void CG_DrawWeaponSelect( void ) {
;1720:	int		i;
;1721:	int		bits;
;1722:	int		count;
;1723:	int		x, y;
;1724:	int		dx, dy;
;1725:	int		weaponSelect;
;1726:	const char *name;
;1727:	float	*color;
;1728:	char	buf[16];
;1729:
;1730:	// don't display if dead
;1731:	if ( cg.predictedPlayerState.stats[STAT_HEALTH] <= 0 || cg_drawWeaponSelect.integer == 0 ) {
;1732:		return;
;1733:	}
;1734:
;1735:	if ( cg_drawWeaponSelect.integer < 0 ) {
;1736:		color = colorWhite;
;1737:	} else {
;1738:		color = CG_FadeColor( cg.weaponSelectTime, WEAPON_SELECT_TIME );
;1739:		if ( !color ) {
;1740:			return;
;1741:		}
;1742:	}
;1743:	trap_R_SetColor( color );
;1744:
;1745:	weaponSelect = abs( cg_drawWeaponSelect.integer );
;1746:
;1747:	// showing weapon select clears pickup item display, but not the blend blob
;1748:	cg.itemPickupTime = 0;
;1749:
;1750:	// count the number of weapons owned
;1751:	bits = cg.snap->ps.stats[ STAT_WEAPONS ];
;1752:	count = 0;
;1753:	for ( i = WP_GAUNTLET ; i < MAX_WEAPONS ; i++ ) {
;1754:		if ( bits & ( 1 << i ) ) {
;1755:			count++;
;1756:		}
;1757:	}
;1758:
;1759:	if ( weaponSelect < 3 ) {
;1760:		x = 320 - count * 20;
;1761:		y = cgs.screenYmax + 1 - 100; // - STATUSBAR_HEIGHT - 40
;1762:		dx = 40;
;1763:		dy = 0;
;1764:	} else {
;1765:		x = cgs.screenXmin + 6;
;1766:		y = 240 - count * 20;
;1767:		dx = 0;
;1768:		dy = 40;
;1769:	}
;1770:
;1771:	for ( i = WP_GAUNTLET ; i < MAX_WEAPONS ; i++ ) {
;1772:		if ( !( bits & ( 1 << i ) ) ) {
;1773:			continue;
;1774:		}
;1775:
;1776:		CG_RegisterWeapon( i );
;1777:
;1778:		// draw weapon icon
;1779:		CG_DrawPic( x, y, 32, 32, cg_weapons[i].weaponIcon );
;1780:
;1781:		// draw selection marker
;1782:		if ( i == cg.weaponSelect ) {
;1783:			CG_DrawPic( x-4, y-4, 32+8, 32+8, cgs.media.selectShader );
;1784:		}
;1785:
;1786:		// no ammo cross on top
;1787:		if ( !cg.snap->ps.ammo[ i ] ) {
;1788:			CG_DrawPic( x, y, 32, 32, cgs.media.noammoShader );
;1789:		} else if ( weaponSelect > 1 && cg.snap->ps.ammo[ i ] > 0 ) {
;1790:			// ammo counter
;1791:			BG_sprintf( buf, "%i", cg.snap->ps.ammo[ i ] );
;1792:			if ( weaponSelect == 2 ) {
;1793:				// horizontal ammo counters
;1794:				CG_DrawString( x + 32/2, y - 20, buf, color, AMMO_FONT_SIZE, AMMO_FONT_SIZE, 0, DS_CENTER | DS_PROPORTIONAL );
;1795:			} else {
;1796:				// vectical ammo counters
;1797:				CG_DrawString( x + 39 + (3*AMMO_FONT_SIZE), y + (32-AMMO_FONT_SIZE)/2, buf, color, AMMO_FONT_SIZE, AMMO_FONT_SIZE, 0, DS_RIGHT );
;1798:			}
;1799:		}
;1800:
;1801:		x += dx;
;1802:		y += dy;
;1803:	}
;1804:
;1805:	// draw the selected name
;1806:	if ( cg_weapons[ cg.weaponSelect ].item && weaponSelect == 1 ) {
;1807:		name = cg_weapons[ cg.weaponSelect ].item->pickup_name;
;1808:		if ( name ) {
;1809:			CG_DrawString( 320, y - 22, name, color, BIGCHAR_WIDTH, BIGCHAR_HEIGHT, 0, DS_SHADOW | DS_PROPORTIONAL | DS_CENTER | DS_FORCE_COLOR );
;1810:		}
;1811:	}
;1812:
;1813:	trap_R_SetColor( NULL );
;1814:}
;1815:#endif
;1816:
;1817:
;1818:/*
;1819:===============
;1820:CG_WeaponSelectable
;1821:===============
;1822:*/
;1823:static qboolean CG_WeaponSelectable( int i ) {
line 1824
;1824:	if ( !cg.snap->ps.ammo[i] ) {
ADDRFP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1217
line 1825
;1825:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $1216
JUMPV
LABELV $1217
line 1827
;1826:	}
;1827:	if ( ! (cg.snap->ps.stats[ STAT_WEAPONS ] & ( 1 << i ) ) ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 236
ADDP4
INDIRI4
CNSTI4 1
ADDRFP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
NEI4 $1220
line 1828
;1828:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $1216
JUMPV
LABELV $1220
line 1831
;1829:	}
;1830:
;1831:	return qtrue;
CNSTI4 1
RETI4
LABELV $1216
endproc CG_WeaponSelectable 0 0
export CG_NextWeapon_f
proc CG_NextWeapon_f 16 4
line 1840
;1832:}
;1833:
;1834:
;1835:/*
;1836:===============
;1837:CG_NextWeapon_f
;1838:===============
;1839:*/
;1840:void CG_NextWeapon_f( void ) {
line 1844
;1841:	int		i;
;1842:	int		original;
;1843:
;1844:	if ( !cg.snap ) {
ADDRGP4 cg+36
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1224
line 1845
;1845:		return;
ADDRGP4 $1223
JUMPV
LABELV $1224
line 1848
;1846:	}
;1847:
;1848:	cg.weaponSelectTime = cg.time;
ADDRGP4 cg+117876
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1850
;1849:
;1850:	if ( cg.snap->ps.pm_flags & PMF_FOLLOW || cg.demoPlayback ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
NEI4 $1233
ADDRGP4 cg+8
INDIRI4
CNSTI4 0
EQI4 $1229
LABELV $1233
line 1851
;1851:		return;
ADDRGP4 $1223
JUMPV
LABELV $1229
line 1854
;1852:	}
;1853:
;1854:	original = cg.weaponSelect;
ADDRLP4 4
ADDRGP4 cg+108956
INDIRI4
ASGNI4
line 1856
;1855:
;1856:	for ( i = 0 ; i < MAX_WEAPONS ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1235
line 1857
;1857:		cg.weaponSelect++;
ADDRLP4 8
ADDRGP4 cg+108956
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1858
;1858:		if ( cg.weaponSelect == MAX_WEAPONS ) {
ADDRGP4 cg+108956
INDIRI4
CNSTI4 16
NEI4 $1240
line 1859
;1859:			cg.weaponSelect = 0;
ADDRGP4 cg+108956
CNSTI4 0
ASGNI4
line 1860
;1860:		}
LABELV $1240
line 1861
;1861:		if ( cg.weaponSelect == WP_GAUNTLET ) {
ADDRGP4 cg+108956
INDIRI4
CNSTI4 1
NEI4 $1244
line 1862
;1862:			continue;		// never cycle to gauntlet
ADDRGP4 $1236
JUMPV
LABELV $1244
line 1864
;1863:		}
;1864:		if ( CG_WeaponSelectable( cg.weaponSelect ) ) {
ADDRGP4 cg+108956
INDIRI4
ARGI4
ADDRLP4 12
ADDRGP4 CG_WeaponSelectable
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
EQI4 $1247
line 1865
;1865:			break;
ADDRGP4 $1237
JUMPV
LABELV $1247
line 1867
;1866:		}
;1867:	}
LABELV $1236
line 1856
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $1235
LABELV $1237
line 1868
;1868:	if ( i == MAX_WEAPONS ) {
ADDRLP4 0
INDIRI4
CNSTI4 16
NEI4 $1250
line 1869
;1869:		cg.weaponSelect = original;
ADDRGP4 cg+108956
ADDRLP4 4
INDIRI4
ASGNI4
line 1870
;1870:	}
LABELV $1250
line 1871
;1871:}
LABELV $1223
endproc CG_NextWeapon_f 16 4
export CG_PrevWeapon_f
proc CG_PrevWeapon_f 16 4
line 1879
;1872:
;1873:
;1874:/*
;1875:===============
;1876:CG_PrevWeapon_f
;1877:===============
;1878:*/
;1879:void CG_PrevWeapon_f( void ) {
line 1883
;1880:	int		i;
;1881:	int		original;
;1882:
;1883:	if ( !cg.snap ) {
ADDRGP4 cg+36
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1254
line 1884
;1884:		return;
ADDRGP4 $1253
JUMPV
LABELV $1254
line 1887
;1885:	}
;1886:
;1887:	cg.weaponSelectTime = cg.time;
ADDRGP4 cg+117876
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1889
;1888:
;1889:	if ( cg.snap->ps.pm_flags & PMF_FOLLOW || cg.demoPlayback ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
NEI4 $1263
ADDRGP4 cg+8
INDIRI4
CNSTI4 0
EQI4 $1259
LABELV $1263
line 1890
;1890:		return;
ADDRGP4 $1253
JUMPV
LABELV $1259
line 1893
;1891:	}
;1892:
;1893:	original = cg.weaponSelect;
ADDRLP4 4
ADDRGP4 cg+108956
INDIRI4
ASGNI4
line 1895
;1894:
;1895:	for ( i = 0 ; i < MAX_WEAPONS ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1265
line 1896
;1896:		cg.weaponSelect--;
ADDRLP4 8
ADDRGP4 cg+108956
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 1897
;1897:		if ( cg.weaponSelect == -1 ) {
ADDRGP4 cg+108956
INDIRI4
CNSTI4 -1
NEI4 $1270
line 1898
;1898:			cg.weaponSelect = MAX_WEAPONS - 1;
ADDRGP4 cg+108956
CNSTI4 15
ASGNI4
line 1899
;1899:		}
LABELV $1270
line 1900
;1900:		if ( cg.weaponSelect == WP_GAUNTLET ) {
ADDRGP4 cg+108956
INDIRI4
CNSTI4 1
NEI4 $1274
line 1901
;1901:			continue;		// never cycle to gauntlet
ADDRGP4 $1266
JUMPV
LABELV $1274
line 1903
;1902:		}
;1903:		if ( CG_WeaponSelectable( cg.weaponSelect ) ) {
ADDRGP4 cg+108956
INDIRI4
ARGI4
ADDRLP4 12
ADDRGP4 CG_WeaponSelectable
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
EQI4 $1277
line 1904
;1904:			break;
ADDRGP4 $1267
JUMPV
LABELV $1277
line 1906
;1905:		}
;1906:	}
LABELV $1266
line 1895
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $1265
LABELV $1267
line 1907
;1907:	if ( i == MAX_WEAPONS ) {
ADDRLP4 0
INDIRI4
CNSTI4 16
NEI4 $1280
line 1908
;1908:		cg.weaponSelect = original;
ADDRGP4 cg+108956
ADDRLP4 4
INDIRI4
ASGNI4
line 1909
;1909:	}
LABELV $1280
line 1910
;1910:}
LABELV $1253
endproc CG_PrevWeapon_f 16 4
export CG_Weapon_f
proc CG_Weapon_f 16 4
line 1918
;1911:
;1912:
;1913:/*
;1914:===============
;1915:CG_Weapon_f
;1916:===============
;1917:*/
;1918:void CG_Weapon_f( void ) {
line 1921
;1919:	int		num;
;1920:
;1921:	if ( !cg.snap ) {
ADDRGP4 cg+36
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1284
line 1922
;1922:		return;
ADDRGP4 $1283
JUMPV
LABELV $1284
line 1925
;1923:	}
;1924:
;1925:	cg.weaponSelectTime = cg.time;
ADDRGP4 cg+117876
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1927
;1926:
;1927:	if ( cg.snap->ps.pm_flags & PMF_FOLLOW || cg.demoPlayback ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
NEI4 $1293
ADDRGP4 cg+8
INDIRI4
CNSTI4 0
EQI4 $1289
LABELV $1293
line 1928
;1928:		return;
ADDRGP4 $1283
JUMPV
LABELV $1289
line 1931
;1929:	}
;1930:
;1931:	num = atoi( CG_Argv( 1 ) );
CNSTI4 1
ARGI4
ADDRLP4 4
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 8
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 8
INDIRI4
ASGNI4
line 1933
;1932:
;1933:	if ( num < 1 || num > MAX_WEAPONS-1 ) {
ADDRLP4 0
INDIRI4
CNSTI4 1
LTI4 $1296
ADDRLP4 0
INDIRI4
CNSTI4 15
LEI4 $1294
LABELV $1296
line 1934
;1934:		return;
ADDRGP4 $1283
JUMPV
LABELV $1294
line 1937
;1935:	}
;1936:
;1937:	if ( ! ( cg.snap->ps.stats[STAT_WEAPONS] & ( 1 << num ) ) ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 236
ADDP4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
NEI4 $1297
line 1938
;1938:		return;		// don't have the weapon
ADDRGP4 $1283
JUMPV
LABELV $1297
line 1941
;1939:	}
;1940:
;1941:	cg.weaponSelect = num;
ADDRGP4 cg+108956
ADDRLP4 0
INDIRI4
ASGNI4
line 1942
;1942:}
LABELV $1283
endproc CG_Weapon_f 16 4
export CG_OutOfAmmoChange
proc CG_OutOfAmmoChange 8 4
line 1952
;1943:
;1944:
;1945:/*
;1946:===================
;1947:CG_OutOfAmmoChange
;1948:
;1949:The current weapon has just run out of ammo
;1950:===================
;1951:*/
;1952:void CG_OutOfAmmoChange( void ) {
line 1955
;1953:	int		i;
;1954:
;1955:	cg.weaponSelectTime = cg.time;
ADDRGP4 cg+117876
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1957
;1956:
;1957:	if ( cg.snap->ps.pm_flags & PMF_FOLLOW || cg.demoPlayback ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
NEI4 $1308
ADDRGP4 cg+8
INDIRI4
CNSTI4 0
EQI4 $1304
LABELV $1308
line 1958
;1958:		return;
ADDRGP4 $1301
JUMPV
LABELV $1304
line 1961
;1959:	}
;1960:
;1961:	for ( i = MAX_WEAPONS-1 ; i > 0 ; i-- ) {
ADDRLP4 0
CNSTI4 15
ASGNI4
LABELV $1309
line 1962
;1962:		if ( CG_WeaponSelectable( i ) ) {
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 4
ADDRGP4 CG_WeaponSelectable
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
EQI4 $1313
line 1963
;1963:			cg.weaponSelect = i;
ADDRGP4 cg+108956
ADDRLP4 0
INDIRI4
ASGNI4
line 1964
;1964:			break;
ADDRGP4 $1311
JUMPV
LABELV $1313
line 1966
;1965:		}
;1966:	}
LABELV $1310
line 1961
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
GTI4 $1309
LABELV $1311
line 1967
;1967:}
LABELV $1301
endproc CG_OutOfAmmoChange 8 4
export CG_FireWeapon
proc CG_FireWeapon 20 16
line 1985
;1968:
;1969:
;1970:/*
;1971:===================================================================================================
;1972:
;1973:WEAPON EVENTS
;1974:
;1975:===================================================================================================
;1976:*/
;1977:
;1978:/*
;1979:================
;1980:CG_FireWeapon
;1981:
;1982:Caused by an EV_FIRE_WEAPON event
;1983:================
;1984:*/
;1985:void CG_FireWeapon( centity_t *cent ) {
line 1990
;1986:	entityState_t *ent;
;1987:	int				c;
;1988:	weaponInfo_t	*weap;
;1989:
;1990:	ent = &cent->currentState;
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
line 1991
;1991:	if ( ent->weapon == WP_NONE ) {
ADDRLP4 8
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1317
line 1992
;1992:		return;
ADDRGP4 $1316
JUMPV
LABELV $1317
line 1994
;1993:	}
;1994:	if ( ent->weapon >= WP_NUM_WEAPONS ) {
ADDRLP4 8
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 11
LTI4 $1319
line 1995
;1995:		CG_Error( "CG_FireWeapon: ent->weapon >= WP_NUM_WEAPONS" );
ADDRGP4 $1321
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 1996
;1996:		return;
ADDRGP4 $1316
JUMPV
LABELV $1319
line 1998
;1997:	}
;1998:	weap = &cg_weapons[ ent->weapon ];
ADDRLP4 4
ADDRLP4 8
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 136
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 2000
;1999:
;2000:	if ( ent->number >= 0 && ent->number < MAX_CLIENTS && cent != &cg.predictedPlayerEntity ) {
ADDRLP4 12
ADDRLP4 8
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
LTI4 $1322
ADDRLP4 12
INDIRI4
CNSTI4 64
GEI4 $1322
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 cg+108104
CVPU4 4
EQU4 $1322
line 2002
;2001:		// point from external event to client entity
;2002:		cent = &cg_entities[ ent->number ];
ADDRFP4 0
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 740
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 2003
;2003:	}
LABELV $1322
line 2007
;2004:
;2005:	// mark the entity as muzzle flashing, so when it is added it will
;2006:	// append the flash to the weapon model
;2007:	cent->muzzleFlashTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 424
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 2010
;2008:
;2009:	// lightning gun only does this this on initial press
;2010:	if ( ent->weapon == WP_LIGHTNING ) {
ADDRLP4 8
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 6
NEI4 $1326
line 2011
;2011:		if ( cent->pe.lightningFiring ) {
ADDRFP4 0
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1328
line 2012
;2012:			return;
ADDRGP4 $1316
JUMPV
LABELV $1328
line 2014
;2013:		}
;2014:	}
LABELV $1326
line 2017
;2015:
;2016:	// play quad sound if needed
;2017:	if ( cent->currentState.powerups & ( 1 << PW_QUAD ) ) {
ADDRFP4 0
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $1330
line 2018
;2018:		trap_S_StartSound (NULL, cent->currentState.number, CHAN_ITEM, cgs.media.quadSound );
CNSTP4 0
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRGP4 cgs+148752+536
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 2019
;2019:	}
LABELV $1330
line 2022
;2020:
;2021:	// play a sound
;2022:	for ( c = 0; c < ARRAY_LEN( weap->flashSound ); c++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $1337
JUMPV
LABELV $1334
line 2023
;2023:		if ( !weap->flashSound[c] ) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 52
ADDP4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1338
line 2024
;2024:			break;
ADDRGP4 $1336
JUMPV
LABELV $1338
line 2026
;2025:		}
;2026:	}
LABELV $1335
line 2022
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $1337
ADDRLP4 0
INDIRI4
CVIU4 4
CNSTU4 4
LTU4 $1334
LABELV $1336
line 2027
;2027:	if ( c > 0 ) {
ADDRLP4 0
INDIRI4
CNSTI4 0
LEI4 $1340
line 2028
;2028:		c = rand() % c;
ADDRLP4 16
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 16
INDIRI4
ADDRLP4 0
INDIRI4
MODI4
ASGNI4
line 2029
;2029:		if ( weap->flashSound[c] )
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 52
ADDP4
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1342
line 2030
;2030:		{
line 2031
;2031:			trap_S_StartSound( NULL, ent->number, CHAN_WEAPON, weap->flashSound[c] );
CNSTP4 0
ARGP4
ADDRLP4 8
INDIRP4
INDIRI4
ARGI4
CNSTI4 2
ARGI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 52
ADDP4
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 2032
;2032:		}
LABELV $1342
line 2033
;2033:	}
LABELV $1340
line 2036
;2034:
;2035:	// do brass ejection
;2036:	if ( weap->ejectBrassFunc && cg_brassTime.integer > 0 ) {
ADDRLP4 4
INDIRP4
CNSTI4 112
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1344
ADDRGP4 cg_brassTime+12
INDIRI4
CNSTI4 0
LEI4 $1344
line 2037
;2037:		weap->ejectBrassFunc( cent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 112
ADDP4
INDIRP4
CALLV
pop
line 2038
;2038:	}
LABELV $1344
line 2039
;2039:}
LABELV $1316
endproc CG_FireWeapon 20 16
export CG_MissileHitWall
proc CG_MissileHitWall 140 44
line 2049
;2040:
;2041:
;2042:/*
;2043:=================
;2044:CG_MissileHitWall
;2045:
;2046:Caused by an EV_MISSILE_MISS event, or directly by local bullet tracing
;2047:=================
;2048:*/
;2049:void CG_MissileHitWall( weapon_t weapon, int clientNum, vec3_t origin, vec3_t dir, impactSound_t soundType ) {
line 2065
;2050:	qhandle_t		mod;
;2051:	qhandle_t		mark;
;2052:	qhandle_t		shader;
;2053:	sfxHandle_t		sfx;
;2054:	float			radius;
;2055:	float			light;
;2056:	vec3_t			lightColor;
;2057:	localEntity_t	*le;
;2058:	int				r;
;2059:	qboolean		alphaFade;
;2060:	qboolean		isSprite;
;2061:	int				duration;
;2062:	vec3_t			sprOrg;
;2063:	vec3_t			sprVel;
;2064:
;2065:	mark = 0;
ADDRLP4 12
CNSTI4 0
ASGNI4
line 2066
;2066:	radius = 32;
ADDRLP4 28
CNSTF4 1107296256
ASGNF4
line 2067
;2067:	sfx = 0;
ADDRLP4 20
CNSTI4 0
ASGNI4
line 2068
;2068:	mod = 0;
ADDRLP4 24
CNSTI4 0
ASGNI4
line 2069
;2069:	shader = 0;
ADDRLP4 32
CNSTI4 0
ASGNI4
line 2070
;2070:	light = 0;
ADDRLP4 40
CNSTF4 0
ASGNF4
line 2071
;2071:	lightColor[0] = 1;
ADDRLP4 0
CNSTF4 1065353216
ASGNF4
line 2072
;2072:	lightColor[1] = 1;
ADDRLP4 0+4
CNSTF4 1065353216
ASGNF4
line 2073
;2073:	lightColor[2] = 0;
ADDRLP4 0+8
CNSTF4 0
ASGNF4
line 2076
;2074:
;2075:	// set defaults
;2076:	isSprite = qfalse;
ADDRLP4 44
CNSTI4 0
ASGNI4
line 2077
;2077:	duration = 600;
ADDRLP4 48
CNSTI4 600
ASGNI4
line 2079
;2078:
;2079:	switch ( weapon ) {
ADDRLP4 80
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 80
INDIRI4
CNSTI4 2
LTI4 $1350
ADDRLP4 80
INDIRI4
CNSTI4 9
GTI4 $1350
ADDRLP4 80
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $1447-8
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $1447
address $1430
address $1423
address $1366
address $1375
address $1353
address $1394
address $1403
address $1412
code
LABELV $1350
LABELV $1353
line 2096
;2080:	default:
;2081:#ifdef MISSIONPACK
;2082:	case WP_NAILGUN:
;2083:		if( soundType == IMPACTSOUND_FLESH ) {
;2084:			sfx = cgs.media.sfx_nghitflesh;
;2085:		} else if( soundType == IMPACTSOUND_METAL ) {
;2086:			sfx = cgs.media.sfx_nghitmetal;
;2087:		} else {
;2088:			sfx = cgs.media.sfx_nghit;
;2089:		}
;2090:		mark = cgs.media.holeMarkShader;
;2091:		radius = 12;
;2092:		break;
;2093:#endif
;2094:	case WP_LIGHTNING:
;2095:		// no explosion at LG impact, it is added with the beam
;2096:		r = rand() & 3;
ADDRLP4 88
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 52
ADDRLP4 88
INDIRI4
CNSTI4 3
BANDI4
ASGNI4
line 2097
;2097:		if ( r < 2 ) {
ADDRLP4 52
INDIRI4
CNSTI4 2
GEI4 $1354
line 2098
;2098:			sfx = cgs.media.sfx_lghit2;
ADDRLP4 20
ADDRGP4 cgs+148752+672
INDIRI4
ASGNI4
line 2099
;2099:		} else if ( r == 2 ) {
ADDRGP4 $1355
JUMPV
LABELV $1354
ADDRLP4 52
INDIRI4
CNSTI4 2
NEI4 $1358
line 2100
;2100:			sfx = cgs.media.sfx_lghit1;
ADDRLP4 20
ADDRGP4 cgs+148752+668
INDIRI4
ASGNI4
line 2101
;2101:		} else {
ADDRGP4 $1359
JUMPV
LABELV $1358
line 2102
;2102:			sfx = cgs.media.sfx_lghit3;
ADDRLP4 20
ADDRGP4 cgs+148752+676
INDIRI4
ASGNI4
line 2103
;2103:		}
LABELV $1359
LABELV $1355
line 2104
;2104:		mark = cgs.media.holeMarkShader;
ADDRLP4 12
ADDRGP4 cgs+148752+404
INDIRI4
ASGNI4
line 2105
;2105:		radius = 12;
ADDRLP4 28
CNSTF4 1094713344
ASGNF4
line 2106
;2106:		break;
ADDRGP4 $1351
JUMPV
LABELV $1366
line 2119
;2107:#ifdef MISSIONPACK
;2108:	case WP_PROX_LAUNCHER:
;2109:		mod = cgs.media.dishFlashModel;
;2110:		shader = cgs.media.grenadeExplosionShader;
;2111:		sfx = cgs.media.sfx_proxexp;
;2112:		mark = cgs.media.burnMarkShader;
;2113:		radius = 64;
;2114:		light = 300;
;2115:		isSprite = qtrue;
;2116:		break;
;2117:#endif
;2118:	case WP_GRENADE_LAUNCHER:
;2119:		mod = cgs.media.dishFlashModel;
ADDRLP4 24
ADDRGP4 cgs+148752+452
INDIRI4
ASGNI4
line 2120
;2120:		shader = cgs.media.grenadeExplosionShader;
ADDRLP4 32
ADDRGP4 cgs+148752+476
INDIRI4
ASGNI4
line 2121
;2121:		sfx = cgs.media.sfx_rockexp;
ADDRLP4 20
ADDRGP4 cgs+148752+696
INDIRI4
ASGNI4
line 2122
;2122:		mark = cgs.media.burnMarkShader;
ADDRLP4 12
ADDRGP4 cgs+148752+400
INDIRI4
ASGNI4
line 2123
;2123:		radius = 64;
ADDRLP4 28
CNSTF4 1115684864
ASGNF4
line 2124
;2124:		light = GL_EXPLOSION_RADIUS;
ADDRLP4 40
CNSTF4 1133903872
ASGNF4
line 2125
;2125:		isSprite = qtrue;
ADDRLP4 44
CNSTI4 1
ASGNI4
line 2126
;2126:		break;
ADDRGP4 $1351
JUMPV
LABELV $1375
line 2128
;2127:	case WP_ROCKET_LAUNCHER:
;2128:		mod = cgs.media.dishFlashModel;
ADDRLP4 24
ADDRGP4 cgs+148752+452
INDIRI4
ASGNI4
line 2129
;2129:		shader = cgs.media.rocketExplosionShader;
ADDRLP4 32
ADDRGP4 cgs+148752+472
INDIRI4
ASGNI4
line 2130
;2130:		sfx = cgs.media.sfx_rockexp;
ADDRLP4 20
ADDRGP4 cgs+148752+696
INDIRI4
ASGNI4
line 2131
;2131:		mark = cgs.media.burnMarkShader;
ADDRLP4 12
ADDRGP4 cgs+148752+400
INDIRI4
ASGNI4
line 2132
;2132:		radius = 64;
ADDRLP4 28
CNSTF4 1115684864
ASGNF4
line 2133
;2133:		light = RL_EXPLOSION_RADIUS;
ADDRLP4 40
CNSTF4 1133903872
ASGNF4
line 2134
;2134:		isSprite = qtrue;
ADDRLP4 44
CNSTI4 1
ASGNI4
line 2135
;2135:		duration = 1000;
ADDRLP4 48
CNSTI4 1000
ASGNI4
line 2136
;2136:		lightColor[0] = 1.0;
ADDRLP4 0
CNSTF4 1065353216
ASGNF4
line 2137
;2137:		lightColor[1] = 0.75;
ADDRLP4 0+4
CNSTF4 1061158912
ASGNF4
line 2138
;2138:		lightColor[2] = 0.0;
ADDRLP4 0+8
CNSTF4 0
ASGNF4
line 2139
;2139:		if (cg_oldRocket.integer == 0) {
ADDRGP4 cg_oldRocket+12
INDIRI4
CNSTI4 0
NEI4 $1351
line 2141
;2140:			// explosion sprite animation
;2141:			VectorMA( origin, 24, dir, sprOrg );
ADDRLP4 92
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 96
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 56
ADDRLP4 92
INDIRP4
INDIRF4
ADDRLP4 96
INDIRP4
INDIRF4
CNSTF4 1103101952
MULF4
ADDF4
ASGNF4
ADDRLP4 56+4
ADDRLP4 92
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 96
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CNSTF4 1103101952
MULF4
ADDF4
ASGNF4
ADDRLP4 56+8
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1103101952
MULF4
ADDF4
ASGNF4
line 2142
;2142:			VectorScale( dir, 64, sprVel );
ADDRLP4 100
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 68
ADDRLP4 100
INDIRP4
INDIRF4
CNSTF4 1115684864
MULF4
ASGNF4
ADDRLP4 68+4
ADDRLP4 100
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CNSTF4 1115684864
MULF4
ASGNF4
ADDRLP4 68+8
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1115684864
MULF4
ASGNF4
line 2144
;2143:
;2144:			CG_ParticleExplosion( "explode1", sprOrg, sprVel, 1400, 20, 30 );
ADDRGP4 $1393
ARGP4
ADDRLP4 56
ARGP4
ADDRLP4 68
ARGP4
CNSTI4 1400
ARGI4
CNSTI4 20
ARGI4
CNSTI4 30
ARGI4
ADDRGP4 CG_ParticleExplosion
CALLV
pop
line 2145
;2145:		}
line 2146
;2146:		break;
ADDRGP4 $1351
JUMPV
LABELV $1394
line 2148
;2147:	case WP_RAILGUN:
;2148:		mod = cgs.media.ringFlashModel;
ADDRLP4 24
ADDRGP4 cgs+148752+448
INDIRI4
ASGNI4
line 2149
;2149:		shader = cgs.media.railExplosionShader;
ADDRLP4 32
ADDRGP4 cgs+148752+460
INDIRI4
ASGNI4
line 2150
;2150:		sfx = cgs.media.sfx_plasmaexp;
ADDRLP4 20
ADDRGP4 cgs+148752+700
INDIRI4
ASGNI4
line 2151
;2151:		mark = cgs.media.energyMarkShader;
ADDRLP4 12
ADDRGP4 cgs+148752+408
INDIRI4
ASGNI4
line 2152
;2152:		radius = 24;
ADDRLP4 28
CNSTF4 1103101952
ASGNF4
line 2153
;2153:		break;
ADDRGP4 $1351
JUMPV
LABELV $1403
line 2155
;2154:	case WP_PLASMAGUN:
;2155:		mod = cgs.media.ringFlashModel;
ADDRLP4 24
ADDRGP4 cgs+148752+448
INDIRI4
ASGNI4
line 2156
;2156:		shader = cgs.media.plasmaExplosionShader;
ADDRLP4 32
ADDRGP4 cgs+148752+464
INDIRI4
ASGNI4
line 2157
;2157:		sfx = cgs.media.sfx_plasmaexp;
ADDRLP4 20
ADDRGP4 cgs+148752+700
INDIRI4
ASGNI4
line 2158
;2158:		mark = cgs.media.energyMarkShader;
ADDRLP4 12
ADDRGP4 cgs+148752+408
INDIRI4
ASGNI4
line 2159
;2159:		radius = 16;
ADDRLP4 28
CNSTF4 1098907648
ASGNF4
line 2160
;2160:		break;
ADDRGP4 $1351
JUMPV
LABELV $1412
line 2162
;2161:	case WP_BFG:
;2162:		mod = cgs.media.dishFlashModel;
ADDRLP4 24
ADDRGP4 cgs+148752+452
INDIRI4
ASGNI4
line 2163
;2163:		shader = cgs.media.bfgExplosionShader;
ADDRLP4 32
ADDRGP4 cgs+148752+480
INDIRI4
ASGNI4
line 2164
;2164:		sfx = cgs.media.sfx_rockexp;
ADDRLP4 20
ADDRGP4 cgs+148752+696
INDIRI4
ASGNI4
line 2165
;2165:		mark = cgs.media.burnMarkShader;
ADDRLP4 12
ADDRGP4 cgs+148752+400
INDIRI4
ASGNI4
line 2166
;2166:		radius = 32;
ADDRLP4 28
CNSTF4 1107296256
ASGNF4
line 2167
;2167:		light = BFG_EXPLOSION_RADIUS;
ADDRLP4 40
CNSTF4 1133903872
ASGNF4
line 2168
;2168:		lightColor[0] = 0.2f;
ADDRLP4 0
CNSTF4 1045220557
ASGNF4
line 2169
;2169:		lightColor[1] = 1.0f;
ADDRLP4 0+4
CNSTF4 1065353216
ASGNF4
line 2170
;2170:		lightColor[2] = 0.2f;
ADDRLP4 0+8
CNSTF4 1045220557
ASGNF4
line 2171
;2171:		isSprite = qtrue;
ADDRLP4 44
CNSTI4 1
ASGNI4
line 2172
;2172:		break;
ADDRGP4 $1351
JUMPV
LABELV $1423
line 2174
;2173:	case WP_SHOTGUN:
;2174:		mod = cgs.media.bulletFlashModel;
ADDRLP4 24
ADDRGP4 cgs+148752+444
INDIRI4
ASGNI4
line 2175
;2175:		shader = cgs.media.bulletExplosionShader;
ADDRLP4 32
ADDRGP4 cgs+148752+468
INDIRI4
ASGNI4
line 2176
;2176:		mark = cgs.media.bulletMarkShader;
ADDRLP4 12
ADDRGP4 cgs+148752+396
INDIRI4
ASGNI4
line 2177
;2177:		sfx = 0;
ADDRLP4 20
CNSTI4 0
ASGNI4
line 2178
;2178:		radius = 4;
ADDRLP4 28
CNSTF4 1082130432
ASGNF4
line 2179
;2179:		break;
ADDRGP4 $1351
JUMPV
LABELV $1430
line 2207
;2180:
;2181:#ifdef MISSIONPACK
;2182:	case WP_CHAINGUN:
;2183:		mod = cgs.media.bulletFlashModel;
;2184:		if( soundType == IMPACTSOUND_FLESH ) {
;2185:			sfx = cgs.media.sfx_chghitflesh;
;2186:		} else if( soundType == IMPACTSOUND_METAL ) {
;2187:			sfx = cgs.media.sfx_chghitmetal;
;2188:		} else {
;2189:			sfx = cgs.media.sfx_chghit;
;2190:		}
;2191:		mark = cgs.media.bulletMarkShader;
;2192:
;2193:		r = rand() & 3;
;2194:		if ( r < 2 ) {
;2195:			sfx = cgs.media.sfx_ric1;
;2196:		} else if ( r == 2 ) {
;2197:			sfx = cgs.media.sfx_ric2;
;2198:		} else {
;2199:			sfx = cgs.media.sfx_ric3;
;2200:		}
;2201:
;2202:		radius = 8;
;2203:		break;
;2204:#endif
;2205:
;2206:	case WP_MACHINEGUN:
;2207:		mod = cgs.media.bulletFlashModel;
ADDRLP4 24
ADDRGP4 cgs+148752+444
INDIRI4
ASGNI4
line 2208
;2208:		shader = cgs.media.bulletExplosionShader;
ADDRLP4 32
ADDRGP4 cgs+148752+468
INDIRI4
ASGNI4
line 2209
;2209:		mark = cgs.media.bulletMarkShader;
ADDRLP4 12
ADDRGP4 cgs+148752+396
INDIRI4
ASGNI4
line 2211
;2210:
;2211:		r = rand() & 3;
ADDRLP4 92
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 52
ADDRLP4 92
INDIRI4
CNSTI4 3
BANDI4
ASGNI4
line 2212
;2212:		if ( r == 0 ) {
ADDRLP4 52
INDIRI4
CNSTI4 0
NEI4 $1437
line 2213
;2213:			sfx = cgs.media.sfx_ric1;
ADDRLP4 20
ADDRGP4 cgs+148752+680
INDIRI4
ASGNI4
line 2214
;2214:		} else if ( r == 1 ) {
ADDRGP4 $1438
JUMPV
LABELV $1437
ADDRLP4 52
INDIRI4
CNSTI4 1
NEI4 $1441
line 2215
;2215:			sfx = cgs.media.sfx_ric2;
ADDRLP4 20
ADDRGP4 cgs+148752+684
INDIRI4
ASGNI4
line 2216
;2216:		} else {
ADDRGP4 $1442
JUMPV
LABELV $1441
line 2217
;2217:			sfx = cgs.media.sfx_ric3;
ADDRLP4 20
ADDRGP4 cgs+148752+688
INDIRI4
ASGNI4
line 2218
;2218:		}
LABELV $1442
LABELV $1438
line 2220
;2219:
;2220:		radius = 8;
ADDRLP4 28
CNSTF4 1090519040
ASGNF4
line 2221
;2221:		break;
LABELV $1351
line 2224
;2222:	}
;2223:
;2224:	if ( sfx ) {
ADDRLP4 20
INDIRI4
CNSTI4 0
EQI4 $1449
line 2225
;2225:		trap_S_StartSound( origin, ENTITYNUM_WORLD, CHAN_AUTO, sfx );
ADDRFP4 8
INDIRP4
ARGP4
CNSTI4 1022
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 20
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 2226
;2226:	}
LABELV $1449
line 2231
;2227:
;2228:	//
;2229:	// create the explosion
;2230:	//
;2231:	if ( mod ) {
ADDRLP4 24
INDIRI4
CNSTI4 0
EQI4 $1451
line 2232
;2232:		le = CG_MakeExplosion( origin, dir, mod, shader, duration, isSprite );
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRLP4 24
INDIRI4
ARGI4
ADDRLP4 32
INDIRI4
ARGI4
ADDRLP4 48
INDIRI4
ARGI4
ADDRLP4 44
INDIRI4
ARGI4
ADDRLP4 88
ADDRGP4 CG_MakeExplosion
CALLP4
ASGNP4
ADDRLP4 16
ADDRLP4 88
INDIRP4
ASGNP4
line 2233
;2233:		le->light = light;
ADDRLP4 16
INDIRP4
CNSTI4 128
ADDP4
ADDRLP4 40
INDIRF4
ASGNF4
line 2234
;2234:		VectorCopy( lightColor, le->lightColor );
ADDRLP4 16
INDIRP4
CNSTI4 132
ADDP4
ADDRLP4 0
INDIRB
ASGNB 12
line 2235
;2235:		if ( weapon == WP_RAILGUN ) {
ADDRFP4 0
INDIRI4
CNSTI4 7
NEI4 $1453
line 2237
;2236:			// colorize with client color
;2237:			VectorCopy( cgs.clientinfo[clientNum].color1, le->color );
ADDRLP4 16
INDIRP4
CNSTI4 108
ADDP4
ADDRFP4 4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+40996+44
ADDP4
INDIRB
ASGNB 12
line 2238
;2238:			le->refEntity.shaderRGBA[0] = le->color[0] * 255;
ADDRLP4 100
ADDRLP4 16
INDIRP4
CNSTI4 108
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 104
CNSTF4 1325400064
ASGNF4
ADDRLP4 100
INDIRF4
ADDRLP4 104
INDIRF4
LTF4 $1458
ADDRLP4 92
ADDRLP4 100
INDIRF4
ADDRLP4 104
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1459
JUMPV
LABELV $1458
ADDRLP4 92
ADDRLP4 100
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1459
ADDRLP4 16
INDIRP4
CNSTI4 268
ADDP4
ADDRLP4 92
INDIRU4
CVUU1 4
ASGNU1
line 2239
;2239:			le->refEntity.shaderRGBA[1] = le->color[1] * 255;
ADDRLP4 116
ADDRLP4 16
INDIRP4
CNSTI4 112
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 120
CNSTF4 1325400064
ASGNF4
ADDRLP4 116
INDIRF4
ADDRLP4 120
INDIRF4
LTF4 $1461
ADDRLP4 108
ADDRLP4 116
INDIRF4
ADDRLP4 120
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1462
JUMPV
LABELV $1461
ADDRLP4 108
ADDRLP4 116
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1462
ADDRLP4 16
INDIRP4
CNSTI4 269
ADDP4
ADDRLP4 108
INDIRU4
CVUU1 4
ASGNU1
line 2240
;2240:			le->refEntity.shaderRGBA[2] = le->color[2] * 255;
ADDRLP4 132
ADDRLP4 16
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 136
CNSTF4 1325400064
ASGNF4
ADDRLP4 132
INDIRF4
ADDRLP4 136
INDIRF4
LTF4 $1464
ADDRLP4 124
ADDRLP4 132
INDIRF4
ADDRLP4 136
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1465
JUMPV
LABELV $1464
ADDRLP4 124
ADDRLP4 132
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1465
ADDRLP4 16
INDIRP4
CNSTI4 270
ADDP4
ADDRLP4 124
INDIRU4
CVUU1 4
ASGNU1
line 2241
;2241:			le->refEntity.shaderRGBA[3] = 255;
ADDRLP4 16
INDIRP4
CNSTI4 271
ADDP4
CNSTU1 255
ASGNU1
line 2242
;2242:		}
LABELV $1453
line 2243
;2243:	}
LABELV $1451
line 2248
;2244:
;2245:	//
;2246:	// impact mark
;2247:	//
;2248:	alphaFade = (mark == cgs.media.energyMarkShader);	// plasma fades alpha, all others fade color
ADDRLP4 12
INDIRI4
ADDRGP4 cgs+148752+408
INDIRI4
NEI4 $1469
ADDRLP4 88
CNSTI4 1
ASGNI4
ADDRGP4 $1470
JUMPV
LABELV $1469
ADDRLP4 88
CNSTI4 0
ASGNI4
LABELV $1470
ADDRLP4 36
ADDRLP4 88
INDIRI4
ASGNI4
line 2249
;2249:	if ( weapon == WP_RAILGUN ) {
ADDRFP4 0
INDIRI4
CNSTI4 7
NEI4 $1471
line 2253
;2250:		float	*color;
;2251:
;2252:		// colorize with client color
;2253:		color = cgs.clientinfo[ clientNum ].color1; // was color2
ADDRLP4 92
ADDRFP4 4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+40996+44
ADDP4
ASGNP4
line 2255
;2254:
;2255:		CG_ImpactMark( mark, origin, dir, random()*360, color[0], color[1], color[2], 1.0, alphaFade, radius, qfalse );
ADDRLP4 96
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
ARGI4
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRLP4 96
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1010041192
MULF4
ARGF4
ADDRLP4 100
ADDRLP4 92
INDIRP4
ASGNP4
ADDRLP4 100
INDIRP4
INDIRF4
ARGF4
ADDRLP4 100
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 100
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
CNSTF4 1065353216
ARGF4
ADDRLP4 36
INDIRI4
ARGI4
ADDRLP4 28
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRGP4 CG_ImpactMark
CALLV
pop
line 2256
;2256:	} else {
ADDRGP4 $1472
JUMPV
LABELV $1471
line 2257
;2257:		CG_ImpactMark( mark, origin, dir, random()*360, 1.0, 1.0, 1.0, 1.0, alphaFade, radius, qfalse );
ADDRLP4 92
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
ARGI4
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRLP4 92
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1010041192
MULF4
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
ADDRLP4 36
INDIRI4
ARGI4
ADDRLP4 28
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRGP4 CG_ImpactMark
CALLV
pop
line 2258
;2258:	}
LABELV $1472
line 2259
;2259:}
LABELV $1347
endproc CG_MissileHitWall 140 44
export CG_MissileHitPlayer
proc CG_MissileHitPlayer 4 20
line 2267
;2260:
;2261:
;2262:/*
;2263:=================
;2264:CG_MissileHitPlayer
;2265:=================
;2266:*/
;2267:void CG_MissileHitPlayer( int weapon, vec3_t origin, vec3_t dir, int entityNum ) {
line 2268
;2268:	CG_Bleed( origin, entityNum );
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 CG_Bleed
CALLV
pop
line 2272
;2269:
;2270:	// some weapons will make an explosion with the blood, while
;2271:	// others will just make the blood
;2272:	switch ( weapon ) {
ADDRLP4 0
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 4
LTI4 $1477
ADDRLP4 0
INDIRI4
CNSTI4 9
GTI4 $1477
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $1479-16
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $1479
address $1478
address $1478
address $1477
address $1477
address $1478
address $1478
code
LABELV $1478
line 2282
;2273:	case WP_GRENADE_LAUNCHER:
;2274:	case WP_ROCKET_LAUNCHER:
;2275:	case WP_PLASMAGUN:
;2276:	case WP_BFG:
;2277:#ifdef MISSIONPACK
;2278:	case WP_NAILGUN:
;2279:	case WP_CHAINGUN:
;2280:	case WP_PROX_LAUNCHER:
;2281:#endif
;2282:		CG_MissileHitWall( weapon, 0, origin, dir, IMPACTSOUND_FLESH );
ADDRFP4 0
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
CNSTI4 2
ARGI4
ADDRGP4 CG_MissileHitWall
CALLV
pop
line 2283
;2283:		break;
line 2285
;2284:	default:
;2285:		break;
LABELV $1477
line 2287
;2286:	}
;2287:}
LABELV $1475
endproc CG_MissileHitPlayer 4 20
proc CG_ShotgunPellet 128 28
line 2304
;2288:
;2289:
;2290:
;2291:/*
;2292:============================================================================
;2293:
;2294:SHOTGUN TRACING
;2295:
;2296:============================================================================
;2297:*/
;2298:
;2299:/*
;2300:================
;2301:CG_ShotgunPellet
;2302:================
;2303:*/
;2304:static void CG_ShotgunPellet( vec3_t start, vec3_t end, int skipNum ) {
line 2308
;2305:	trace_t		tr;
;2306:	int sourceContentType, destContentType;
;2307:
;2308:	CG_Trace( &tr, start, NULL, NULL, end, skipNum, MASK_SHOT );
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
CNSTI4 100663297
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 2310
;2309:
;2310:	sourceContentType = CG_PointContents( start, 0 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 64
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 56
ADDRLP4 64
INDIRI4
ASGNI4
line 2311
;2311:	destContentType = CG_PointContents( tr.endpos, 0 );
ADDRLP4 0+12
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 68
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 60
ADDRLP4 68
INDIRI4
ASGNI4
line 2314
;2312:
;2313:	// FIXME: should probably move this cruft into CG_BubbleTrail
;2314:	if ( sourceContentType == destContentType ) {
ADDRLP4 56
INDIRI4
ADDRLP4 60
INDIRI4
NEI4 $1483
line 2315
;2315:		if ( sourceContentType & CONTENTS_WATER ) {
ADDRLP4 56
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $1484
line 2316
;2316:			CG_BubbleTrail( start, tr.endpos, 32 );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0+12
ARGP4
CNSTF4 1107296256
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 2317
;2317:		}
line 2318
;2318:	} else if ( sourceContentType & CONTENTS_WATER ) {
ADDRGP4 $1484
JUMPV
LABELV $1483
ADDRLP4 56
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $1488
line 2321
;2319:		trace_t trace;
;2320:
;2321:		trap_CM_BoxTrace( &trace, end, start, NULL, NULL, 0, CONTENTS_WATER );
ADDRLP4 72
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 32
ARGI4
ADDRGP4 trap_CM_BoxTrace
CALLV
pop
line 2322
;2322:		CG_BubbleTrail( start, trace.endpos, 32 );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 72+12
ARGP4
CNSTF4 1107296256
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 2323
;2323:	} else if ( destContentType & CONTENTS_WATER ) {
ADDRGP4 $1489
JUMPV
LABELV $1488
ADDRLP4 60
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $1491
line 2326
;2324:		trace_t trace;
;2325:
;2326:		trap_CM_BoxTrace( &trace, start, end, NULL, NULL, 0, CONTENTS_WATER );
ADDRLP4 72
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 32
ARGI4
ADDRGP4 trap_CM_BoxTrace
CALLV
pop
line 2327
;2327:		CG_BubbleTrail( tr.endpos, trace.endpos, 32 );
ADDRLP4 0+12
ARGP4
ADDRLP4 72+12
ARGP4
CNSTF4 1107296256
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 2328
;2328:	}
LABELV $1491
LABELV $1489
LABELV $1484
line 2330
;2329:
;2330:	if (  tr.surfaceFlags & SURF_NOIMPACT ) {
ADDRLP4 0+44
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $1495
line 2331
;2331:		return;
ADDRGP4 $1481
JUMPV
LABELV $1495
line 2334
;2332:	}
;2333:
;2334:	if ( cg_entities[tr.entityNum].currentState.eType == ET_PLAYER ) {
ADDRLP4 0+52
INDIRI4
CNSTI4 740
MULI4
ADDRGP4 cg_entities+4
ADDP4
INDIRI4
CNSTI4 1
NEI4 $1498
line 2335
;2335:		CG_MissileHitPlayer( WP_SHOTGUN, tr.endpos, tr.plane.normal, tr.entityNum );
CNSTI4 3
ARGI4
ADDRLP4 0+12
ARGP4
ADDRLP4 0+24
ARGP4
ADDRLP4 0+52
INDIRI4
ARGI4
ADDRGP4 CG_MissileHitPlayer
CALLV
pop
line 2336
;2336:	} else {
ADDRGP4 $1499
JUMPV
LABELV $1498
line 2337
;2337:		if ( tr.surfaceFlags & SURF_NOIMPACT ) {
ADDRLP4 0+44
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $1505
line 2339
;2338:			// SURF_NOIMPACT will not make a flame puff or a mark
;2339:			return;
ADDRGP4 $1481
JUMPV
LABELV $1505
line 2341
;2340:		}
;2341:		if ( tr.surfaceFlags & SURF_METALSTEPS ) {
ADDRLP4 0+44
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $1508
line 2342
;2342:			CG_MissileHitWall( WP_SHOTGUN, 0, tr.endpos, tr.plane.normal, IMPACTSOUND_METAL );
CNSTI4 3
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 0+12
ARGP4
ADDRLP4 0+24
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 CG_MissileHitWall
CALLV
pop
line 2343
;2343:		} else {
ADDRGP4 $1509
JUMPV
LABELV $1508
line 2344
;2344:			CG_MissileHitWall( WP_SHOTGUN, 0, tr.endpos, tr.plane.normal, IMPACTSOUND_DEFAULT );
CNSTI4 3
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 0+12
ARGP4
ADDRLP4 0+24
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 CG_MissileHitWall
CALLV
pop
line 2345
;2345:		}
LABELV $1509
line 2346
;2346:	}
LABELV $1499
line 2347
;2347:}
LABELV $1481
endproc CG_ShotgunPellet 128 28
proc CG_ShotgunPattern 80 12
line 2357
;2348:
;2349:/*
;2350:================
;2351:CG_ShotgunPattern
;2352:
;2353:Perform the same traces the server did to locate the
;2354:hit splashes
;2355:================
;2356:*/
;2357:static void CG_ShotgunPattern( vec3_t origin, vec3_t origin2, int seed, int otherEntNum ) {
line 2365
;2358:	int			i;
;2359:	float		r, u;
;2360:	vec3_t		end;
;2361:	vec3_t		forward, right, up;
;2362:
;2363:	// derive the right and up vectors from the forward vector, because
;2364:	// the client won't have any other information
;2365:	VectorNormalize2( origin2, forward );
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 20
ARGP4
ADDRGP4 VectorNormalize2
CALLF4
pop
line 2366
;2366:	PerpendicularVector( right, forward );
ADDRLP4 32
ARGP4
ADDRLP4 20
ARGP4
ADDRGP4 PerpendicularVector
CALLV
pop
line 2367
;2367:	CrossProduct( forward, right, up );
ADDRLP4 20
ARGP4
ADDRLP4 32
ARGP4
ADDRLP4 44
ARGP4
ADDRGP4 CrossProduct
CALLV
pop
line 2370
;2368:
;2369:	// generate the "random" spread pattern
;2370:	for ( i = 0 ; i < DEFAULT_SHOTGUN_COUNT ; i++ ) {
ADDRLP4 56
CNSTI4 0
ASGNI4
LABELV $1516
line 2371
;2371:		r = Q_crandom( &seed ) * DEFAULT_SHOTGUN_SPREAD * 16;
ADDRFP4 8
ARGP4
ADDRLP4 60
ADDRGP4 Q_crandom
CALLF4
ASGNF4
ADDRLP4 12
ADDRLP4 60
INDIRF4
CNSTF4 1177485312
MULF4
ASGNF4
line 2372
;2372:		u = Q_crandom( &seed ) * DEFAULT_SHOTGUN_SPREAD * 16;
ADDRFP4 8
ARGP4
ADDRLP4 64
ADDRGP4 Q_crandom
CALLF4
ASGNF4
ADDRLP4 16
ADDRLP4 64
INDIRF4
CNSTF4 1177485312
MULF4
ASGNF4
line 2373
;2373:		VectorMA( origin, 8192 * 16, forward, end);
ADDRLP4 68
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 68
INDIRP4
INDIRF4
ADDRLP4 20
INDIRF4
CNSTF4 1207959552
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 68
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 20+4
INDIRF4
CNSTF4 1207959552
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 20+8
INDIRF4
CNSTF4 1207959552
MULF4
ADDF4
ASGNF4
line 2374
;2374:		VectorMA (end, r, right, end);
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 32
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 32+4
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 32+8
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
line 2375
;2375:		VectorMA (end, u, up, end);
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 44
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 44+4
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 44+8
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
line 2377
;2376:
;2377:		CG_ShotgunPellet( origin, end, otherEntNum );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 CG_ShotgunPellet
CALLV
pop
line 2378
;2378:	}
LABELV $1517
line 2370
ADDRLP4 56
ADDRLP4 56
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 56
INDIRI4
CNSTI4 11
LTI4 $1516
line 2379
;2379:}
LABELV $1515
endproc CG_ShotgunPattern 80 12
export CG_ShotgunFire
proc CG_ShotgunFire 44 48
line 2386
;2380:
;2381:/*
;2382:==============
;2383:CG_ShotgunFire
;2384:==============
;2385:*/
;2386:void CG_ShotgunFire( entityState_t *es ) {
line 2390
;2387:	vec3_t	v;
;2388:	int		contents;
;2389:
;2390:	VectorSubtract( es->origin2, es->pos.trBase, v );
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 16
INDIRP4
CNSTI4 104
ADDP4
INDIRF4
ADDRLP4 16
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 16
INDIRP4
CNSTI4 108
ADDP4
INDIRF4
ADDRLP4 16
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0+8
ADDRLP4 20
INDIRP4
CNSTI4 112
ADDP4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
SUBF4
ASGNF4
line 2391
;2391:	VectorNormalize( v );
ADDRLP4 0
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 2392
;2392:	VectorScale( v, 32, v );
ADDRLP4 0
ADDRLP4 0
INDIRF4
CNSTF4 1107296256
MULF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
CNSTF4 1107296256
MULF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
CNSTF4 1107296256
MULF4
ASGNF4
line 2393
;2393:	VectorAdd( es->pos.trBase, v, v );
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 24
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 24
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 0+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 0+8
INDIRF4
ADDF4
ASGNF4
line 2394
;2394:	if ( cgs.glconfig.hardwareType != GLHW_RAGEPRO ) {
ADDRGP4 cgs+20100+11288
INDIRI4
CNSTI4 3
EQI4 $1547
line 2398
;2395:		// ragepro can't alpha fade, so don't even bother with smoke
;2396:		vec3_t			up;
;2397:
;2398:		contents = CG_PointContents( es->pos.trBase, 0 );
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 40
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 40
INDIRI4
ASGNI4
line 2399
;2399:		if ( !( contents & CONTENTS_WATER ) ) {
ADDRLP4 12
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
NEI4 $1551
line 2400
;2400:			VectorSet( up, 0, 0, 8 );
ADDRLP4 28
CNSTF4 0
ASGNF4
ADDRLP4 28+4
CNSTF4 0
ASGNF4
ADDRLP4 28+8
CNSTF4 1090519040
ASGNF4
line 2401
;2401:			CG_SmokePuff( v, up, 32, 1, 1, 1, 0.33f, 900, cg.time, 0, LEF_PUFF_DONT_SCALE, cgs.media.shotgunSmokePuffShader );
ADDRLP4 0
ARGP4
ADDRLP4 28
ARGP4
CNSTF4 1107296256
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1051260355
ARGF4
CNSTF4 1147207680
ARGF4
ADDRGP4 cg+107604
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 cgs+148752+284
INDIRI4
ARGI4
ADDRGP4 CG_SmokePuff
CALLP4
pop
line 2402
;2402:		}
LABELV $1551
line 2403
;2403:	}
LABELV $1547
line 2404
;2404:	CG_ShotgunPattern( es->pos.trBase, es->origin2, es->eventParm, es->otherEntityNum );
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 28
INDIRP4
CNSTI4 104
ADDP4
ARGP4
ADDRLP4 28
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ARGI4
ADDRLP4 28
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_ShotgunPattern
CALLV
pop
line 2405
;2405:}
LABELV $1536
endproc CG_ShotgunFire 44 48
export CG_Tracer
proc CG_Tracer 216 16
line 2421
;2406:
;2407:/*
;2408:============================================================================
;2409:
;2410:BULLETS
;2411:
;2412:============================================================================
;2413:*/
;2414:
;2415:
;2416:/*
;2417:===============
;2418:CG_Tracer
;2419:===============
;2420:*/
;2421:void CG_Tracer( vec3_t source, vec3_t dest ) {
line 2430
;2422:	vec3_t		forward, right;
;2423:	polyVert_t	verts[4];
;2424:	vec3_t		line;
;2425:	float		len, begin, end;
;2426:	vec3_t		start, finish;
;2427:	vec3_t		midpoint;
;2428:
;2429:	// tracer
;2430:	VectorSubtract( dest, source, forward );
ADDRLP4 180
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 184
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 108
ADDRLP4 180
INDIRP4
INDIRF4
ADDRLP4 184
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 108+4
ADDRLP4 180
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 184
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 108+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
SUBF4
ASGNF4
line 2431
;2431:	len = VectorNormalize( forward );
ADDRLP4 108
ARGP4
ADDRLP4 188
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 164
ADDRLP4 188
INDIRF4
ASGNF4
line 2434
;2432:
;2433:	// start at least a little ways from the muzzle
;2434:	if ( len < 100 ) {
ADDRLP4 164
INDIRF4
CNSTF4 1120403456
GEF4 $1561
line 2435
;2435:		return;
ADDRGP4 $1558
JUMPV
LABELV $1561
line 2437
;2436:	}
;2437:	begin = 50 + random() * (len - 60);
ADDRLP4 192
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 160
ADDRLP4 192
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
ADDRLP4 164
INDIRF4
CNSTF4 1114636288
SUBF4
MULF4
CNSTF4 1112014848
ADDF4
ASGNF4
line 2438
;2438:	end = begin + cg_tracerLength.value;
ADDRLP4 156
ADDRLP4 160
INDIRF4
ADDRGP4 cg_tracerLength+8
INDIRF4
ADDF4
ASGNF4
line 2439
;2439:	if ( end > len ) {
ADDRLP4 156
INDIRF4
ADDRLP4 164
INDIRF4
LEF4 $1564
line 2440
;2440:		end = len;
ADDRLP4 156
ADDRLP4 164
INDIRF4
ASGNF4
line 2441
;2441:	}
LABELV $1564
line 2442
;2442:	VectorMA( source, begin, forward, start );
ADDRLP4 196
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 120
ADDRLP4 196
INDIRP4
INDIRF4
ADDRLP4 108
INDIRF4
ADDRLP4 160
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 120+4
ADDRLP4 196
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 108+4
INDIRF4
ADDRLP4 160
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 120+8
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 108+8
INDIRF4
ADDRLP4 160
INDIRF4
MULF4
ADDF4
ASGNF4
line 2443
;2443:	VectorMA( source, end, forward, finish );
ADDRLP4 204
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 132
ADDRLP4 204
INDIRP4
INDIRF4
ADDRLP4 108
INDIRF4
ADDRLP4 156
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 132+4
ADDRLP4 204
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 108+4
INDIRF4
ADDRLP4 156
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 132+8
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 108+8
INDIRF4
ADDRLP4 156
INDIRF4
MULF4
ADDF4
ASGNF4
line 2445
;2444:
;2445:	line[0] = DotProduct( forward, cg.refdef.viewaxis[1] );
ADDRLP4 144
ADDRLP4 108
INDIRF4
ADDRGP4 cg+109056+36+12
INDIRF4
MULF4
ADDRLP4 108+4
INDIRF4
ADDRGP4 cg+109056+36+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 108+8
INDIRF4
ADDRGP4 cg+109056+36+12+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 2446
;2446:	line[1] = DotProduct( forward, cg.refdef.viewaxis[2] );
ADDRLP4 144+4
ADDRLP4 108
INDIRF4
ADDRGP4 cg+109056+36+24
INDIRF4
MULF4
ADDRLP4 108+4
INDIRF4
ADDRGP4 cg+109056+36+24+4
INDIRF4
MULF4
ADDF4
ADDRLP4 108+8
INDIRF4
ADDRGP4 cg+109056+36+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 2448
;2447:
;2448:	VectorScale( cg.refdef.viewaxis[1], line[1], right );
ADDRLP4 96
ADDRGP4 cg+109056+36+12
INDIRF4
ADDRLP4 144+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 96+4
ADDRGP4 cg+109056+36+12+4
INDIRF4
ADDRLP4 144+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 96+8
ADDRGP4 cg+109056+36+12+8
INDIRF4
ADDRLP4 144+4
INDIRF4
MULF4
ASGNF4
line 2449
;2449:	VectorMA( right, -line[0], cg.refdef.viewaxis[2], right );
ADDRLP4 212
ADDRLP4 144
INDIRF4
NEGF4
ASGNF4
ADDRLP4 96
ADDRLP4 96
INDIRF4
ADDRGP4 cg+109056+36+24
INDIRF4
ADDRLP4 212
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 96+4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg+109056+36+24+4
INDIRF4
ADDRLP4 212
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 96+8
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg+109056+36+24+8
INDIRF4
ADDRLP4 144
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 2450
;2450:	VectorNormalize( right );
ADDRLP4 96
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 2452
;2451:
;2452:	VectorMA( finish, cg_tracerWidth.value, right, verts[0].xyz );
ADDRLP4 0
ADDRLP4 132
INDIRF4
ADDRLP4 96
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 132+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 132+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 2453
;2453:	verts[0].st[0] = 0;
ADDRLP4 0+12
CNSTF4 0
ASGNF4
line 2454
;2454:	verts[0].st[1] = 1;
ADDRLP4 0+12+4
CNSTF4 1065353216
ASGNF4
line 2455
;2455:	verts[0].modulate[0] = 255;
ADDRLP4 0+20
CNSTU1 255
ASGNU1
line 2456
;2456:	verts[0].modulate[1] = 255;
ADDRLP4 0+20+1
CNSTU1 255
ASGNU1
line 2457
;2457:	verts[0].modulate[2] = 255;
ADDRLP4 0+20+2
CNSTU1 255
ASGNU1
line 2458
;2458:	verts[0].modulate[3] = 255;
ADDRLP4 0+20+3
CNSTU1 255
ASGNU1
line 2460
;2459:
;2460:	VectorMA( finish, -cg_tracerWidth.value, right, verts[1].xyz );
ADDRLP4 0+24
ADDRLP4 132
INDIRF4
ADDRLP4 96
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+24+4
ADDRLP4 132+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+24+8
ADDRLP4 132+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 2461
;2461:	verts[1].st[0] = 1;
ADDRLP4 0+24+12
CNSTF4 1065353216
ASGNF4
line 2462
;2462:	verts[1].st[1] = 0;
ADDRLP4 0+24+12+4
CNSTF4 0
ASGNF4
line 2463
;2463:	verts[1].modulate[0] = 255;
ADDRLP4 0+24+20
CNSTU1 255
ASGNU1
line 2464
;2464:	verts[1].modulate[1] = 255;
ADDRLP4 0+24+20+1
CNSTU1 255
ASGNU1
line 2465
;2465:	verts[1].modulate[2] = 255;
ADDRLP4 0+24+20+2
CNSTU1 255
ASGNU1
line 2466
;2466:	verts[1].modulate[3] = 255;
ADDRLP4 0+24+20+3
CNSTU1 255
ASGNU1
line 2468
;2467:
;2468:	VectorMA( start, -cg_tracerWidth.value, right, verts[2].xyz );
ADDRLP4 0+48
ADDRLP4 120
INDIRF4
ADDRLP4 96
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+48+4
ADDRLP4 120+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+48+8
ADDRLP4 120+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 2469
;2469:	verts[2].st[0] = 1;
ADDRLP4 0+48+12
CNSTF4 1065353216
ASGNF4
line 2470
;2470:	verts[2].st[1] = 1;
ADDRLP4 0+48+12+4
CNSTF4 1065353216
ASGNF4
line 2471
;2471:	verts[2].modulate[0] = 255;
ADDRLP4 0+48+20
CNSTU1 255
ASGNU1
line 2472
;2472:	verts[2].modulate[1] = 255;
ADDRLP4 0+48+20+1
CNSTU1 255
ASGNU1
line 2473
;2473:	verts[2].modulate[2] = 255;
ADDRLP4 0+48+20+2
CNSTU1 255
ASGNU1
line 2474
;2474:	verts[2].modulate[3] = 255;
ADDRLP4 0+48+20+3
CNSTU1 255
ASGNU1
line 2476
;2475:
;2476:	VectorMA( start, cg_tracerWidth.value, right, verts[3].xyz );
ADDRLP4 0+72
ADDRLP4 120
INDIRF4
ADDRLP4 96
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+72+4
ADDRLP4 120+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+72+8
ADDRLP4 120+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 2477
;2477:	verts[3].st[0] = 0;
ADDRLP4 0+72+12
CNSTF4 0
ASGNF4
line 2478
;2478:	verts[3].st[1] = 0;
ADDRLP4 0+72+12+4
CNSTF4 0
ASGNF4
line 2479
;2479:	verts[3].modulate[0] = 255;
ADDRLP4 0+72+20
CNSTU1 255
ASGNU1
line 2480
;2480:	verts[3].modulate[1] = 255;
ADDRLP4 0+72+20+1
CNSTU1 255
ASGNU1
line 2481
;2481:	verts[3].modulate[2] = 255;
ADDRLP4 0+72+20+2
CNSTU1 255
ASGNU1
line 2482
;2482:	verts[3].modulate[3] = 255;
ADDRLP4 0+72+20+3
CNSTU1 255
ASGNU1
line 2484
;2483:
;2484:	trap_R_AddPolyToScene( cgs.media.tracerShader, 4, verts );
ADDRGP4 cgs+148752+220
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddPolyToScene
CALLV
pop
line 2486
;2485:
;2486:	midpoint[0] = ( start[0] + finish[0] ) * 0.5;
ADDRLP4 168
ADDRLP4 120
INDIRF4
ADDRLP4 132
INDIRF4
ADDF4
CNSTF4 1056964608
MULF4
ASGNF4
line 2487
;2487:	midpoint[1] = ( start[1] + finish[1] ) * 0.5;
ADDRLP4 168+4
ADDRLP4 120+4
INDIRF4
ADDRLP4 132+4
INDIRF4
ADDF4
CNSTF4 1056964608
MULF4
ASGNF4
line 2488
;2488:	midpoint[2] = ( start[2] + finish[2] ) * 0.5;
ADDRLP4 168+8
ADDRLP4 120+8
INDIRF4
ADDRLP4 132+8
INDIRF4
ADDF4
CNSTF4 1056964608
MULF4
ASGNF4
line 2491
;2489:
;2490:	// add the tracer sound
;2491:	trap_S_StartSound( midpoint, ENTITYNUM_WORLD, CHAN_AUTO, cgs.media.tracerSound );
ADDRLP4 168
ARGP4
CNSTI4 1022
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 cgs+148752+540
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 2493
;2492:
;2493:}
LABELV $1558
endproc CG_Tracer 216 16
proc CG_CalcMuzzlePoint 36 16
line 2501
;2494:
;2495:
;2496:/*
;2497:======================
;2498:CG_CalcMuzzlePoint
;2499:======================
;2500:*/
;2501:static qboolean	CG_CalcMuzzlePoint( int entityNum, vec3_t muzzle ) {
line 2506
;2502:	vec3_t		forward;
;2503:	centity_t	*cent;
;2504:	int			anim;
;2505:
;2506:	if ( entityNum == cg.snap->ps.clientNum ) {
ADDRFP4 0
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
NEI4 $1746
line 2507
;2507:		VectorCopy( cg.snap->ps.origin, muzzle );
ADDRFP4 4
INDIRP4
ADDRGP4 cg+36
INDIRP4
CNSTI4 64
ADDP4
INDIRB
ASGNB 12
line 2508
;2508:		muzzle[2] += cg.snap->ps.viewheight;
ADDRLP4 20
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRF4
ADDRGP4 cg+36
INDIRP4
CNSTI4 208
ADDP4
INDIRI4
CVIF4 4
ADDF4
ASGNF4
line 2509
;2509:		AngleVectors( cg.snap->ps.viewangles, forward, NULL, NULL );
ADDRGP4 cg+36
INDIRP4
CNSTI4 196
ADDP4
ARGP4
ADDRLP4 0
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 2510
;2510:		VectorMA( muzzle, 14, forward, muzzle );
ADDRLP4 24
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
ADDRLP4 28
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 28
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0+4
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
ADDRLP4 32
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 32
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0+8
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
line 2511
;2511:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $1745
JUMPV
LABELV $1746
line 2514
;2512:	}
;2513:
;2514:	cent = &cg_entities[entityNum];
ADDRLP4 12
ADDRFP4 0
INDIRI4
CNSTI4 740
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 2515
;2515:	if ( !cent->currentValid ) {
ADDRLP4 12
INDIRP4
CNSTI4 420
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1754
line 2516
;2516:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $1745
JUMPV
LABELV $1754
line 2519
;2517:	}
;2518:
;2519:	VectorCopy( cent->currentState.pos.trBase, muzzle );
ADDRFP4 4
INDIRP4
ADDRLP4 12
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 2521
;2520:
;2521:	AngleVectors( cent->currentState.apos.trBase, forward, NULL, NULL );
ADDRLP4 12
INDIRP4
CNSTI4 60
ADDP4
ARGP4
ADDRLP4 0
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 2522
;2522:	anim = cent->currentState.legsAnim & ~ANIM_TOGGLEBIT;
ADDRLP4 16
ADDRLP4 12
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
CNSTI4 -129
BANDI4
ASGNI4
line 2523
;2523:	if ( anim == LEGS_WALKCR || anim == LEGS_IDLECR ) {
ADDRLP4 16
INDIRI4
CNSTI4 13
EQI4 $1758
ADDRLP4 16
INDIRI4
CNSTI4 23
NEI4 $1756
LABELV $1758
line 2524
;2524:		muzzle[2] += CROUCH_VIEWHEIGHT;
ADDRLP4 24
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
CNSTF4 1094713344
ADDF4
ASGNF4
line 2525
;2525:	} else {
ADDRGP4 $1757
JUMPV
LABELV $1756
line 2526
;2526:		muzzle[2] += DEFAULT_VIEWHEIGHT;
ADDRLP4 24
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
CNSTF4 1104150528
ADDF4
ASGNF4
line 2527
;2527:	}
LABELV $1757
line 2529
;2528:
;2529:	VectorMA( muzzle, 14, forward, muzzle );
ADDRLP4 24
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
ADDRLP4 28
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 28
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0+4
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
ADDRLP4 32
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 32
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0+8
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
line 2531
;2530:
;2531:	return qtrue;
CNSTI4 1
RETI4
LABELV $1745
endproc CG_CalcMuzzlePoint 36 16
export CG_Bullet
proc CG_Bullet 96 28
line 2542
;2532:
;2533:}
;2534:
;2535:/*
;2536:======================
;2537:CG_Bullet
;2538:
;2539:Renders bullet effects.
;2540:======================
;2541:*/
;2542:void CG_Bullet( vec3_t end, int sourceEntityNum, vec3_t normal, qboolean flesh, int fleshEntityNum ) {
line 2549
;2543:	trace_t trace;
;2544:	int sourceContentType, destContentType;
;2545:	vec3_t		start;
;2546:
;2547:	// if the shooter is currently valid, calc a source point and possibly
;2548:	// do trail effects
;2549:	if ( sourceEntityNum >= 0 && cg_tracerChance.value > 0 ) {
ADDRFP4 4
INDIRI4
CNSTI4 0
LTI4 $1762
ADDRGP4 cg_tracerChance+8
INDIRF4
CNSTF4 0
LEF4 $1762
line 2550
;2550:		if ( CG_CalcMuzzlePoint( sourceEntityNum, start ) ) {
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 0
ARGP4
ADDRLP4 76
ADDRGP4 CG_CalcMuzzlePoint
CALLI4
ASGNI4
ADDRLP4 76
INDIRI4
CNSTI4 0
EQI4 $1765
line 2551
;2551:			sourceContentType = CG_PointContents( start, 0 );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 80
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 80
INDIRI4
ASGNI4
line 2552
;2552:			destContentType = CG_PointContents( end, 0 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 84
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 16
ADDRLP4 84
INDIRI4
ASGNI4
line 2555
;2553:
;2554:			// do a complete bubble trail if necessary
;2555:			if ( ( sourceContentType == destContentType ) && ( sourceContentType & CONTENTS_WATER ) ) {
ADDRLP4 88
ADDRLP4 12
INDIRI4
ASGNI4
ADDRLP4 88
INDIRI4
ADDRLP4 16
INDIRI4
NEI4 $1767
ADDRLP4 88
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $1767
line 2556
;2556:				CG_BubbleTrail( start, end, 32 );
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
CNSTF4 1107296256
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 2557
;2557:			}
ADDRGP4 $1768
JUMPV
LABELV $1767
line 2559
;2558:			// bubble trail from water into air
;2559:			else if ( ( sourceContentType & CONTENTS_WATER ) ) {
ADDRLP4 12
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $1769
line 2560
;2560:				trap_CM_BoxTrace( &trace, end, start, NULL, NULL, 0, CONTENTS_WATER );
ADDRLP4 20
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 32
ARGI4
ADDRGP4 trap_CM_BoxTrace
CALLV
pop
line 2561
;2561:				CG_BubbleTrail( start, trace.endpos, 32 );
ADDRLP4 0
ARGP4
ADDRLP4 20+12
ARGP4
CNSTF4 1107296256
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 2562
;2562:			}
ADDRGP4 $1770
JUMPV
LABELV $1769
line 2564
;2563:			// bubble trail from air into water
;2564:			else if ( ( destContentType & CONTENTS_WATER ) ) {
ADDRLP4 16
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $1772
line 2565
;2565:				trap_CM_BoxTrace( &trace, start, end, NULL, NULL, 0, CONTENTS_WATER );
ADDRLP4 20
ARGP4
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 32
ARGI4
ADDRGP4 trap_CM_BoxTrace
CALLV
pop
line 2566
;2566:				CG_BubbleTrail( trace.endpos, end, 32 );
ADDRLP4 20+12
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
CNSTF4 1107296256
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 2567
;2567:			}
LABELV $1772
LABELV $1770
LABELV $1768
line 2570
;2568:
;2569:			// draw a tracer
;2570:			if ( random() < cg_tracerChance.value ) {
ADDRLP4 92
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 92
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
ADDRGP4 cg_tracerChance+8
INDIRF4
GEF4 $1775
line 2571
;2571:				CG_Tracer( start, end );
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Tracer
CALLV
pop
line 2572
;2572:			}
LABELV $1775
line 2573
;2573:		}
LABELV $1765
line 2574
;2574:	}
LABELV $1762
line 2577
;2575:
;2576:	// impact splash and mark
;2577:	if ( flesh ) {
ADDRFP4 12
INDIRI4
CNSTI4 0
EQI4 $1778
line 2578
;2578:		CG_Bleed( end, fleshEntityNum );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 16
INDIRI4
ARGI4
ADDRGP4 CG_Bleed
CALLV
pop
line 2579
;2579:	} else {
ADDRGP4 $1779
JUMPV
LABELV $1778
line 2580
;2580:		CG_MissileHitWall( WP_MACHINEGUN, 0, end, normal, IMPACTSOUND_DEFAULT );
CNSTI4 2
ARGI4
CNSTI4 0
ARGI4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 CG_MissileHitWall
CALLV
pop
line 2581
;2581:	}
LABELV $1779
line 2583
;2582:
;2583:}
LABELV $1761
endproc CG_Bullet 96 28
import trap_R_AddLinearLightToScene
import trap_R_AddRefEntityToScene2
import linearLight
import intShaderTime
import CG_NewParticleArea
import initparticles
import CG_ParticleExplosion
import CG_ParticleMisc
import CG_ParticleDust
import CG_ParticleSparks
import CG_ParticleBulletDebris
import CG_ParticleSnowFlurry
import CG_AddParticleShrapnel
import CG_ParticleSmoke
import CG_ParticleSnow
import CG_AddParticles
import CG_ClearParticles
import trap_GetEntityToken
import trap_getCameraInfo
import trap_startCamera
import trap_loadCamera
import trap_SnapVector
import trap_CIN_SetExtents
import trap_CIN_DrawCinematic
import trap_CIN_RunCinematic
import trap_CIN_StopCinematic
import trap_CIN_PlayCinematic
import trap_Key_GetKey
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_IsDown
import trap_R_RegisterFont
import trap_MemoryRemaining
import testPrintFloat
import testPrintInt
import trap_SetUserCmdValue
import trap_GetUserCmd
import trap_GetCurrentCmdNumber
import trap_GetServerCommand
import trap_GetSnapshot
import trap_GetCurrentSnapshotNumber
import trap_GetGameState
import trap_GetGlconfig
import trap_R_inPVS
import trap_R_RemapShader
import trap_R_LerpTag
import trap_R_ModelBounds
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_LightForPoint
import trap_R_AddAdditiveLightToScene
import trap_R_AddLightToScene
import trap_R_AddPolysToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_R_RegisterShaderNoMip
import trap_R_RegisterShader
import trap_R_RegisterSkin
import trap_R_RegisterModel
import trap_R_LoadWorldMap
import trap_S_StopBackgroundTrack
import trap_S_StartBackgroundTrack
import trap_S_RegisterSound
import trap_S_Respatialize
import trap_S_UpdateEntityPosition
import trap_S_AddRealLoopingSound
import trap_S_AddLoopingSound
import trap_S_ClearLoopingSounds
import trap_S_StartLocalSound
import trap_S_StopLoopingSound
import trap_S_StartSound
import trap_CM_MarkFragments
import trap_CM_TransformedCapsuleTrace
import trap_CM_TransformedBoxTrace
import trap_CM_CapsuleTrace
import trap_CM_BoxTrace
import trap_CM_TransformedPointContents
import trap_CM_PointContents
import trap_CM_TempBoxModel
import trap_CM_InlineModel
import trap_CM_NumInlineModels
import trap_CM_LoadMap
import trap_UpdateScreen
import trap_SendClientCommand
import trap_RemoveCommand
import trap_AddCommand
import trap_RealTime
import trap_SendConsoleCommand
import trap_FS_Seek
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_Cvar_VariableStringBuffer
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import CG_CheckChangedPredictableEvents
import CG_TransitionPlayerState
import CG_Respawn
import CG_PlayBufferedVoiceChats
import CG_VoiceChatLocal
import CG_LoadVoiceChats
import CG_ShaderStateChanged
import CG_SetConfigValues
import CG_ParseSysteminfo
import CG_ParseServerinfo
import CG_ExecuteNewServerCommands
import CG_InitConsoleCommands
import CG_ConsoleCommand
import CG_ScoreboardClick
import CG_DrawOldTourneyScoreboard
import CG_DrawOldScoreboard
import CG_DrawInformation
import CG_LoadingClient
import CG_LoadingItem
import CG_LoadingString
import CG_ProcessSnapshots
import CG_MakeExplosion
import CG_Bleed
import CG_BigExplode
import CG_GibPlayer
import CG_ScorePlum
import CG_SpawnEffect
import CG_BubbleTrail
import CG_SmokePuff
import CG_AddLocalEntities
import CG_AllocLocalEntity
import CG_InitLocalEntities
import CG_ImpactMark
import CG_AddMarks
import CG_InitMarkPolys
import CG_PositionRotatedEntityOnTag
import CG_PositionEntityOnTag
import CG_AdjustPositionForMover
import CG_Beam
import CG_AddPacketEntities
import CG_SetEntitySoundPosition
import CG_PainEvent
import CG_EntityEvent
import CG_PlaceString
import CG_CheckEvents
import CG_PlayDroppedEvents
import CG_LoadDeferredPlayers
import CG_PredictPlayerState
import CG_Trace
import CG_PointContents
import CG_BuildSolidList
import CG_CustomSound
import CG_NewClientInfo
import CG_AddRefEntityWithPowerups
import CG_ResetPlayerEntity
import CG_Player
import CG_TrackClientTeamChange
import CG_ForceModelChange
import CG_ShowResponseHead
import CG_CheckOrderPending
import CG_OtherTeamHasFlag
import CG_YourTeamHasFlag
import CG_SelectNextPlayer
import CG_SelectPrevPlayer
import CG_Draw3DModel
import CG_Text_Height
import CG_Text_Width
import CG_Text_Paint
import CG_DrawTeamBackground
import CG_DrawFlagModel
import CG_DrawActive
import CG_DrawHead
import CG_CenterPrint
import CG_AddLagometerSnapshotInfo
import CG_AddLagometerFrameInfo
import teamChat2
import teamChat1
import systemChat
import drawTeamOverlayModificationCount
import numSortedTeamPlayers
import sortedTeamPlayers
import CG_SelectFont
import CG_LoadFonts
import CG_DrawString
import CG_DrawTopBottom
import CG_DrawSides
import CG_DrawRect
import UI_DrawProportionalString
import CG_GetColorForHealth
import CG_ColorForHealth
import CG_TileClear
import CG_TeamColor
import CG_FadeColorTime
import CG_FadeColor
import CG_DrawStrlen
import CG_DrawStringExt
import CG_DrawGradientPic
import CG_DrawPic
import CG_FillScreen
import CG_FillRect
import CG_AdjustFrom640
import CG_DrawActiveFrame
import CG_AddBufferedSound
import CG_ZoomUp_f
import CG_ZoomDown_f
import CG_TestModelPrevSkin_f
import CG_TestModelNextSkin_f
import CG_TestModelPrevFrame_f
import CG_TestModelNextFrame_f
import CG_TestGun_f
import CG_TestModel_f
import CG_SetScoreCatcher
import CG_BuildSpectatorString
import CG_SetScoreSelection
import CG_RankRunFrame
import CG_EventHandling
import CG_MouseEvent
import CG_KeyEvent
import CG_LoadMenus
import CG_LastAttacker
import CG_CrosshairPlayer
import CG_UpdateCvars
import CG_StartMusic
import CG_Error
import CG_Printf
import CG_Argv
import CG_ConfigString
import eventnames
import cg_followKiller
import cg_fovAdjust
import cg_deadBodyDarken
import cg_teamColors
import cg_teamModel
import cg_enemyColors
import cg_enemyModel
import cg_hitSounds
import cg_currentSelectedPlayer
import cg_trueLightning
import cg_oldPlasma
import cg_oldRocket
import cg_oldRail
import cg_noProjectileTrail
import cg_noTaunt
import cg_bigFont
import cg_smallFont
import cg_cameraMode
import cg_timescale
import cg_timescaleFadeSpeed
import cg_timescaleFadeEnd
import cg_cameraOrbitDelay
import cg_cameraOrbit
import cg_smoothClients
import cg_scorePlum
import cg_noVoiceText
import cg_noVoiceChats
import cg_teamChatsOnly
import cg_drawFriend
import cg_deferPlayers
import cg_predictItems
import cg_blood
import cg_paused
import cg_buildScript
import cg_forceModel
import cg_stats
import cg_teamChatHeight
import cg_teamChatTime
import cg_drawSpeed
import cg_drawAttacker
import cg_drawPing
import cg_lagometer
import cg_thirdPerson
import cg_thirdPersonAngle
import cg_thirdPersonRange
import cg_zoomFov
import cg_fov
import cg_simpleItems
import cg_ignore
import cg_autoswitch
import cg_tracerLength
import cg_tracerWidth
import cg_tracerChance
import cg_viewsize
import cg_drawGun
import cg_gun_z
import cg_gun_y
import cg_gun_x
import cg_gun_frame
import cg_brassTime
import cg_addMarks
import cg_footsteps
import cg_showmiss
import cg_noPlayerAnims
import cg_nopredict
import cg_errorDecay
import cg_railTrailRadius
import cg_railTrailTime
import cg_debugEvents
import cg_debugPosition
import cg_debugAnim
import cg_animSpeed
import cg_draw2D
import cg_drawStatus
import cg_crosshairHealth
import cg_crosshairSize
import cg_crosshairY
import cg_crosshairX
import cg_drawWeaponSelect
import cg_teamOverlayUserinfo
import cg_drawTeamOverlay
import cg_drawRewards
import cg_drawCrosshairNames
import cg_drawCrosshair
import cg_drawAmmoWarning
import cg_drawIcons
import cg_draw3dIcons
import cg_drawSnapshot
import cg_drawFPS
import cg_drawTimer
import cg_gibs
import cg_shadows
import cg_swingSpeed
import cg_bobroll
import cg_bobpitch
import cg_bobup
import cg_runroll
import cg_runpitch
import cg_centertime
import cg_markPolys
import cg_items
import cg_weapons
import cg_entities
import cg
import cgs
import CG_DrawAttacker_icon
import CG_DrawSelectedPlayerStatus
import HUD_color
import HUD_ItemCaptionValue
import CG_DrawTeamPlayerPowerup
import CG_Draw_Icon_Ammo
import CG_Draw_Icon_Armor
import CG_DrawStatusBarHead
import playerTeam
import getPlayerHealth
import getPlayerLocation
import getTeamPlayerName
import HUD_Update_finalRect
import HUD_DrawGradientBackground
import HUD_DrawBackground
import copyColor
import HUD_Draw_Text
import HUD_GradientValue
import FPS
import TeamOverlay_Sel_idx
import ServerMsg_idx
import ItemMsg_idx
import Attacker_idx
import KillMsg_idx
import WarmFightMsg_idx
import IcoPowerUp_idx
import WeapListSelName_idx
import IcoWeapListSel_idx
import IcoWeapList_idx
import HUD_Update_Valign
import HUD_Update_Margin
import HUD_Update_Anchors
import CG_HUDItemVisible
import CG_HUDShader
import item_Keywords
import dyn_itemCount
import dyn_itemArray
import itemCount
import itemArray
import CG_CheckHUD
import String_Init
import String_Alloc
import teams_colors
import ammo_colors
import armor_colors
import health_colors
import BigEndian
import replace1
import Q_stradd
import Q_strcpy
import BG_StripColor
import BG_CleanName
import DecodedString
import EncodedString
import strtok
import Q_stristr
import BG_sprintf
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_CanItemBeGrabbed
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import Com_Printf
import Com_Error
import Info_NextPair
import Info_ValidateKeyValue
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_ValueForKey
import va
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import locase
import trap_PC_FreeSource
import trap_PC_LoadSource
import trap_PC_ReadToken
import trap_PC_SourceFileAndLine
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import Com_Split
import COM_ParseSep
import Com_InitSeparators
import SkipTillSeparators
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Hunk_Alloc
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import Q_sscanf
import ED_vsprintf
import atoi
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $1393
byte 1 101
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 100
byte 1 101
byte 1 49
byte 1 0
align 1
LABELV $1321
byte 1 67
byte 1 71
byte 1 95
byte 1 70
byte 1 105
byte 1 114
byte 1 101
byte 1 87
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 58
byte 1 32
byte 1 101
byte 1 110
byte 1 116
byte 1 45
byte 1 62
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 32
byte 1 62
byte 1 61
byte 1 32
byte 1 87
byte 1 80
byte 1 95
byte 1 78
byte 1 85
byte 1 77
byte 1 95
byte 1 87
byte 1 69
byte 1 65
byte 1 80
byte 1 79
byte 1 78
byte 1 83
byte 1 0
align 1
LABELV $1143
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $815
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 102
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 0
align 1
LABELV $777
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 98
byte 1 97
byte 1 114
byte 1 114
byte 1 101
byte 1 108
byte 1 0
align 1
LABELV $767
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $541
byte 1 37
byte 1 115
byte 1 95
byte 1 100
byte 1 102
byte 1 0
align 1
LABELV $535
byte 1 67
byte 1 71
byte 1 95
byte 1 82
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 73
byte 1 116
byte 1 101
byte 1 109
byte 1 86
byte 1 105
byte 1 115
byte 1 117
byte 1 97
byte 1 108
byte 1 115
byte 1 58
byte 1 32
byte 1 105
byte 1 116
byte 1 101
byte 1 109
byte 1 78
byte 1 117
byte 1 109
byte 1 32
byte 1 37
byte 1 100
byte 1 32
byte 1 111
byte 1 117
byte 1 116
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 114
byte 1 97
byte 1 110
byte 1 103
byte 1 101
byte 1 32
byte 1 91
byte 1 48
byte 1 45
byte 1 37
byte 1 100
byte 1 93
byte 1 0
align 1
LABELV $528
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 104
byte 1 105
byte 1 116
byte 1 115
byte 1 47
byte 1 98
byte 1 102
byte 1 103
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $527
byte 1 98
byte 1 102
byte 1 103
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $524
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 98
byte 1 102
byte 1 103
byte 1 47
byte 1 98
byte 1 102
byte 1 103
byte 1 95
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $523
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 98
byte 1 102
byte 1 103
byte 1 47
byte 1 98
byte 1 102
byte 1 103
byte 1 95
byte 1 104
byte 1 117
byte 1 109
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $521
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 67
byte 1 111
byte 1 114
byte 1 101
byte 1 0
align 1
LABELV $516
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $513
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 103
byte 1 102
byte 1 49
byte 1 97
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $512
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 114
byte 1 103
byte 1 95
byte 1 104
byte 1 117
byte 1 109
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $510
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 68
byte 1 105
byte 1 115
byte 1 99
byte 1 0
align 1
LABELV $507
byte 1 112
byte 1 108
byte 1 97
byte 1 115
byte 1 109
byte 1 97
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $504
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 115
byte 1 109
byte 1 97
byte 1 47
byte 1 104
byte 1 121
byte 1 112
byte 1 114
byte 1 98
byte 1 102
byte 1 49
byte 1 97
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $503
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 115
byte 1 109
byte 1 97
byte 1 47
byte 1 108
byte 1 97
byte 1 115
byte 1 102
byte 1 108
byte 1 121
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $501
byte 1 103
byte 1 114
byte 1 101
byte 1 110
byte 1 97
byte 1 100
byte 1 101
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $498
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 103
byte 1 114
byte 1 101
byte 1 110
byte 1 97
byte 1 100
byte 1 101
byte 1 47
byte 1 103
byte 1 114
byte 1 101
byte 1 110
byte 1 108
byte 1 102
byte 1 49
byte 1 97
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $497
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 97
byte 1 109
byte 1 109
byte 1 111
byte 1 47
byte 1 103
byte 1 114
byte 1 101
byte 1 110
byte 1 97
byte 1 100
byte 1 101
byte 1 49
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $495
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 116
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $492
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 116
byte 1 47
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 108
byte 1 102
byte 1 49
byte 1 97
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $491
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 116
byte 1 47
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 102
byte 1 108
byte 1 121
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $489
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 115
byte 1 104
byte 1 111
byte 1 116
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 115
byte 1 115
byte 1 104
byte 1 111
byte 1 116
byte 1 102
byte 1 49
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $487
byte 1 98
byte 1 117
byte 1 108
byte 1 108
byte 1 101
byte 1 116
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $484
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 105
byte 1 110
byte 1 101
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 103
byte 1 102
byte 1 52
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $483
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 105
byte 1 110
byte 1 101
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 103
byte 1 102
byte 1 51
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $482
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 105
byte 1 110
byte 1 101
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 103
byte 1 102
byte 1 50
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $481
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 105
byte 1 110
byte 1 101
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 103
byte 1 102
byte 1 49
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $479
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 97
byte 1 109
byte 1 109
byte 1 111
byte 1 47
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 116
byte 1 47
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 116
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $477
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 47
byte 1 108
byte 1 103
byte 1 95
byte 1 104
byte 1 105
byte 1 116
byte 1 51
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $474
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 47
byte 1 108
byte 1 103
byte 1 95
byte 1 104
byte 1 105
byte 1 116
byte 1 50
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $471
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 47
byte 1 108
byte 1 103
byte 1 95
byte 1 104
byte 1 105
byte 1 116
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $468
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 104
byte 1 105
byte 1 116
byte 1 115
byte 1 47
byte 1 99
byte 1 114
byte 1 97
byte 1 99
byte 1 107
byte 1 108
byte 1 101
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $465
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 66
byte 1 111
byte 1 108
byte 1 116
byte 1 78
byte 1 101
byte 1 119
byte 1 0
align 1
LABELV $462
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 47
byte 1 108
byte 1 103
byte 1 95
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $461
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 47
byte 1 108
byte 1 103
byte 1 95
byte 1 104
byte 1 117
byte 1 109
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $460
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 101
byte 1 108
byte 1 101
byte 1 101
byte 1 47
byte 1 102
byte 1 115
byte 1 116
byte 1 104
byte 1 117
byte 1 109
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $458
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 101
byte 1 108
byte 1 101
byte 1 101
byte 1 47
byte 1 102
byte 1 115
byte 1 116
byte 1 97
byte 1 116
byte 1 99
byte 1 107
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $457
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 101
byte 1 108
byte 1 101
byte 1 101
byte 1 47
byte 1 102
byte 1 115
byte 1 116
byte 1 114
byte 1 117
byte 1 110
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $453
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 50
byte 1 47
byte 1 115
byte 1 104
byte 1 111
byte 1 116
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 115
byte 1 104
byte 1 111
byte 1 116
byte 1 103
byte 1 117
byte 1 110
byte 1 95
byte 1 104
byte 1 97
byte 1 110
byte 1 100
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $450
byte 1 95
byte 1 104
byte 1 97
byte 1 110
byte 1 100
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $449
byte 1 95
byte 1 98
byte 1 97
byte 1 114
byte 1 114
byte 1 101
byte 1 108
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $448
byte 1 95
byte 1 102
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $434
byte 1 67
byte 1 111
byte 1 117
byte 1 108
byte 1 100
byte 1 110
byte 1 39
byte 1 116
byte 1 32
byte 1 102
byte 1 105
byte 1 110
byte 1 100
byte 1 32
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 32
byte 1 37
byte 1 105
byte 1 0
