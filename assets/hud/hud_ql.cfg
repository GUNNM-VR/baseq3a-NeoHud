#include "HUD/include/include.cfg"

	INFO
	{
		name 		"Quake Live" 		// name as it appeared in Select HUD menu
		author 		"GUNNM"				// author of the HUD file
		description "Quake live HUD"	// short description
	}

	SetCvar
	{
		cg_drawWeaponSelect 	3 // 0: hide weapon list | 1: horizontal & name | 2: horizontal & ammo | 3: vertical
		cg_drawAttacker			1
		cg_drawTeamOverlay 		1
		cg_drawCrosshairNames 	1
		cg_drawIcons			1
		cg_draw3dIcons 			0
		cg_drawFPS 				0
		cg_drawSpeed			0
		cg_drawTimer			1
		cg_lagometer			0
		cg_drawPing				0
		cg_drawSnapshot			0
		cg_drawStatus 			1
		cg_drawRewards			1
		cg_drawAmmoWarning		1
	}
	
	//==========================
	// Colors
	//==========================
	HealthColors
	{
		color 1.0, 0.69, 0.0, 1.0	// normal
		color 1.0, 0.2,  0.2, 1.0	// low health
		color 0.5, 0.5,  0.5, 1.0	// health > 0 ?
		color 1.0, 1.0,  1.0, 1.0	// health > 100
	}
	
	ArmorColors
	{
		color 1.0, 0.69, 0.0, 1.0
		color 1.0, 0.2,  0.2, 1.0
		color 0.5, 0.5,  0.5, 1.0
		color 1.0, 1.0,  1.0, 1.0
	}
	
	AmmoColors
	{
		color 1.0, 0.69, 0.0, 1.0
		color 1.0, 0.2,  0.2, 1.0
		color 0.5, 0.5,  0.5, 1.0
		color 1.0, 1.0,  1.0, 1.0
	}
	
	TeamsColors
	{
		color 1.0, 0.941, 0.2, 0.8
		//color 0.7, 0.5, 0.3, 1	// colorGreyTeam (spectator or gametype not GT_TEAM)
		color 1, 0, 0, 1			// colorRedTeam
		color 0, 0, 1, 1			// colorBlueTeam
		color 0, 1, 0, 1			// colorOtherTeam (green)
	}
	
	//==========================
	// GameType icons
	//==========================
	GameTypeIcons
	{
		background "hud/quakeLive/ffa"	// free for all GT_FFA
		background "hud/quakeLive/duel"	// one on one tournament GT_TOURNAMENT
		background "hud/quakeLive/ffa"	// single player ffa GT_SINGLE_PLAYER
		background "hud/quakeLive/tdm"	// team deathmatch GT_TEAM
		background "hud/quakeLive/ctf"	// capture the flag GT_CTF
	}
	
	//==========================
	// Crosshair TODO
	//==========================
	Crosshair
	{
		//rect NULL NULL NULL NULL
		cvarTest "cg_drawCrosshair"
		visible !VIS_IN_MENU
	}

	//==========================
	// health icon
	//==========================

	//health icon shadow
	itemDef 
	{
		rect 221 441 22 22
		background "hud/quakeLive/health"
		backcolor 0 0 0 0.8
		cvarTest "cg_drawStatus"
	}

	//health icon
	itemDef 
	{
		rect 220 440 22 22
		background "hud/quakeLive/health"
		backcolor 1 0.941 0.2 0.8
		cvarTest "cg_drawStatus"
	}
	
	//==========================
	// health Count
	//==========================
	itemDef
	{
		name "StatusBar_HealthCount"
		rect 176 439 20 24
		font numbers
		fontsize 20 24
		textAlign C
		proportional
		forecolor HealthColors
		caption VAL_HEALTH
		shadow
		cvarTest "cg_drawStatus"
	}	
	
	//==========================
	// health BAR
	//==========================
	
	// soft limit & hard limit shadows
	itemDef 
	{
		name "healthshadow"
		rect 131 443 142 33
		background "hud/quakeLive/bars_shadow"
		backcolor 0 0 0 0.5
		cvarTest "cg_drawStatus"
	}

	// soft limit outline
	itemDef
	{
		rect 130 462 128 16
		background "hud/quakeLive/bar100.tga"
		backcolor T
		cvarTest "cg_drawStatus"
	}

	itemDef 
	{
		rect 130 462 128 16
		background "hud/quakeLive/bar100_fill.tga"
		backcolor T
		gradient VAL_HEALTH
		param 1
		cvarTest "cg_drawStatus"
	}

	// brighten soft limit outline
	itemDef 
	{
		rect 130 462 128 16
		background "hud/quakeLive/bar100.tga"
		backcolor 1 1 1 0.3
		cvarTest "cg_drawStatus"
	}

	// hard limit outline (health over limit)
	itemDef 
	{
		rect 240 445 31 20
		background "hud/quakeLive/bar200.tga"
		backcolor T
		cvarTest "cg_drawStatus"
	}

	// use a texture gradient for the health value
	itemDef 
	{
		rect 240 445 31 20
		background "hud/quakeLive/bar200_fill.tga"
		backcolor T
		verticalbar
		gradient VAL_HEALTH
		param 2
		cvarTest "cg_drawStatus"
	}

	// brighten hard limit outline
	itemDef 
	{
		rect 240 445 31 20
		background "hud/quakeLive/bar200.tga"
		backcolor 1 1 1 0.5
		cvarTest "cg_drawStatus"
	}


	//==========================
	// ammo count
	//==========================
	itemDef
	{
		name "StatusBar_AmmoCount"
		rect 324 443 16 20
		font numbers
		fontsize 16 20
		textAlign C
		proportional
		forecolor AmmoColors
		caption VAL_AMMO
		shadow
		cvarTest "cg_drawStatus"
	}
	//==========================
	// ammo icon
	//==========================
	itemDef
	{
		name "StatusBar_AmmoIcon"
		rect 284 442 22 22
		background ICON_AMMO
		cvarTest "cg_drawStatus"
	}

	//==========================
	// armor icon
	//==========================
		
	// armor icon shadow
	itemDef 
	{
		rect 401 441 22 22
		background "hud/quakeLive/armor"
		backcolor 0 0 0 0.8
		cvarTest "cg_drawStatus"
	}

	// armor icon
	itemDef 
	{
		rect 400 440 22 22
		background "hud/quakeLive/armor"
		backcolor 1 0.941 0.2 0.8
		cvarTest "cg_drawStatus"
	}
	
	//==========================
	// armor Count
	//==========================
	itemDef
	{
		name "StatusBar_ArmorCount"
		rect 440 439 20 24
		font numbers
		fontsize 20 24
		textAlign L
		proportional
		forecolor ArmorColors
		caption VAL_ARMOR
		shadow
		cvarTest "cg_drawStatus"
	}	
	
	//==========================
	// armor BAR
	//==========================

	// soft limit & hard limit shadows
	itemDef 
	{
		rect 511 443 -142 33
		background "hud/quakeLive/bars_shadow.tga"
		backcolor 0 0 0 0.5
		cvarTest "cg_drawStatus"
	}


	itemDef 
	{	
		// armor soft limit outline
		rect 512 462 -128 16
		background "hud/quakeLive/bar100"
		backcolor T
		cvarTest "cg_drawStatus"
	}

	itemDef 
	{
		rect 512 462 -128 16
		background "hud/quakeLive/bar100_fill"
		backcolor T
		gradient VAL_ARMOR
		param 1
		cvarTest "cg_drawStatus"
	}
	
	
	// brighten soft limit outline
	itemDef 
	{
		rect 512 462 -128 16
		background "hud/quakeLive/bar100"
		backcolor 1 1 1 0.3
		cvarTest "cg_drawStatus"
	}

	// hard limit outline (armor over limit)
	itemDef 
	{
		rect 402 445 -31 20
		background "hud/quakeLive/bar200"
		backcolor T
		cvarTest "cg_drawStatus"
	}

	itemDef 
	{
		rect 402 445 -31 20
		background "hud/quakeLive/bar200_fill"
		backcolor T
		verticalbar
		gradient VAL_ARMOR
		param 2
		cvarTest "cg_drawStatus"
	}
	
	//brighten hard limit outline
	itemDef 
	{
		rect 402 445 -31 20
		background "hud/quakeLive/bar200"
		backcolor 1 1 1 0.5		
		cvarTest "cg_drawStatus"
	}

	//==========================
	// Game Time
	//==========================
	itemDef//GameTime
	{
		name "GameTime"
		rect 16 48 NULL NULL
		forecolor 1 1 1 1
		shadow
		proportional
		caption VAL_TIMER
		param 2 // 2: countdown
		fontsize 12 14
		textalign L
		visible VIS_IN_SCORE
		cvarTest "cg_drawTimer"
	}
	
	//Game Time icon
	itemDef 
	{
		name "GameTime_Icon"
		rect NULL NULL 14 14
		background "hud/quakeLive/icon_time.tga"
		anchors Left Middle
		parent GameTime
		visible VIS_IN_SCORE
		cvarTest "cg_drawTimer"
	}


	//==========================
	// WeaponList
	//==========================

	Icon_WeaponList
	{
		rect NULL NULL 16 16
	}

	// Horizontal weapons list
	WeaponList
	{
		rect SCREEN_X_MID $evalint(SCREEN_Y_MAX + 1 - STATUSBAR_HEIGHT - 40 ) NULL NULL
		fontsize 15 14
		forecolor 1 1 1 1
		time WEAPON_SELECT_TIME //weapon select show time
		textAlign C
		proportional
	}
	
	// vertical WeaponList (cg_drawWeaponSelect = 3)
	WeaponList_Vertical
	{	
		rect 2 94 0 0
		time 99999 // always show weapons
		textAlign R
		valign T
		margin 0 0 4 0 // l r t b
	}

	WeaponList_SelectedName
	{
		fontsize 12 12
		//shadow
		proportional
		textAlign L
	}

	Icon_WeaponList_Selected
	{
		rect -4 -3 52 20
		//background "ui/assets/hud/weaplit2.tga"
		background "hud/quakeLive/weaplit2.tga"
		backcolor 1 1 1 0.8
		param 1
	}


	//==========================
	// Score Box
	//==========================

	//Score Frame BG, can be scaled wider if needed to make more room for names
	// Score Frame left part
	itemDef {
		name "scoreboxl"
		rect 2 0 32 64 
		backcolor 1 1 1 0.8
		background "hud/quakeLive/scoreboxl.tga"
	}
	
	// Score Frame center part
	itemDef {
		name "scorebox2"
		rect 34 0 145 64 
		backcolor 1 1 1 0.8
		background "hud/quakeLive/scoreboxm.tga"
	}
	
	// Score Frame right part
	itemDef {
		name "scorebox3"
		rect 177 0 8 64 
		backcolor 1 1 1 0.8
		background "hud/quakeLive/scoreboxr.tga"
	}



	// Gametype Icon
	itemDef {
		name "gameType"
		rect 8 7 19 19
		backcolor 1 1 1 1
		background ICON_GAME_TYPE // icon according to game type
	}
	
	//==========================
	// frag/Time limit
	//==========================
	itemDef
	{
		name "WinLimit"
		rect 8 26 40 12
		forecolor 0 0 0 1
		caption VAL_CAPFRAG_LIMIT
		fontsize 10 12
	}
		
		
	//------------------------------
	// roundBox around player name
	// 3 part to allow larger name
	//------------------------------
	itemDef {
		name "RoundBoxl"
		rect $evalfloat(64*0.5 + 2) 8 8 16
		background "hud/quakeLive/roundboxlt.tga"
		backcolor T
	}
	
	itemDef {
		name "RoundBoxm"
		rect $evalfloat(64*0.5 + 2 + 8) 8 130 16
		background "hud/quakeLive/roundboxmt.tga"
		backcolor T
	}
	
	itemDef {
		name "RoundBoxr"
		rect $evalfloat(64*0.5 + 2 + 8 + 130 ) 8 8 16
		background "hud/quakeLive/roundboxrt.tga"
		backcolor T
	}
	
	//------------------------------
	// roundBox around enemy name
	//------------------------------
	/*itemDef {
		name "RoundBoxl"
		rect $evalint(64*0.5 + 2) 24 8 16
		background "hud/quakeLive/teamonl"
		backcolor E
	}
	
	itemDef {
		name "RoundBoxm"
		rect $evalint(64*0.5 + 2 + 8) 24 130 16
		background "hud/quakeLive/teamonm"
		backcolor E
	}
	
	itemDef {
		name "RoundBoxr"
		rect $evalint(64*0.5 + 2 + 8 + 130 ) 24 8 16
		background "hud/quakeLive/teamonr"
		backcolor E
	}*/
	
	//------------------------------
	
	Flag_OWN
	{
		rect 36 8 13 13
		forecolor 1 1 1 1
		backcolor 1 1 1 1
		fill
	}

	Flag_NME
	{
		rect 36 24 13 13
	}
		
	
	Name_OWN
	{
		margin 0 2 -2 0
		fontsize 12 10
		proportional
		forecolor 1 1 1 1
		parent Flag_OWN
		anchors Right Top
	}

	Name_NME
	{
		margin 0 2 -2 0
		fontsize 12 10
		proportional
		forecolor 1 1 1 1
		parent Flag_NME
		anchors Right Top
	}
	
	Score_OWN
	{
		rect 160 10 135 14
		fontsize 10 10
		proportional
	}
	
	Score_NME
	{
		rect 160 24 135 14
		fontsize 10 10
		proportional
	}


	//==========================
	// Icons
	//==========================
	itemDef //StatusBar_ArmorIcon
	{
		rect $evalint(370 + GIANTCHAR_WIDTH*3 + TEXT_ICON_SPACE) $evalint(SCREEN_Y_MAX + 1 - GIANTCHAR_HEIGHT) ICON_SIZE ICON_SIZE
		visible 0
		background ICON_ARMOR
	}

	Icon_Flag//StatusBar_Flag
	{
		rect $evalint(185 + GIANTCHAR_WIDTH*3 + TEXT_ICON_SPACE + ICON_SIZE) $evalint(SCREEN_Y_MAX + 1 - ICON_SIZE) ICON_SIZE ICON_SIZE
		visible 0
	}

	//==========================
	// items displayed during spectate
	//==========================
	itemDef
	{
		name "SpecMessage"
		rect SCREEN_X_MID $evalint(SCREEN_Y_MAX - 40 + 1) NULL NULL
		fontsize BIGCHAR_WIDTH BIGCHAR_HEIGHT
		forecolor 1 1 1 1
		textAlign C
		caption "SPECTATOR"
		shadow 
		proportional
		visible VIS_TEAM_SPECTATOR
	}

	itemDef
	{
		name "SpecMessageTourney"
		rect SCREEN_X_MID $evalint(SCREEN_Y_MAX - 40 - BIGCHAR_HEIGHT - 4 + 1) NULL NULL
		fontsize BIGCHAR_WIDTH BIGCHAR_HEIGHT
		forecolor 1 1 1 1
		textAlign C
		caption "waiting to play" // "press ESC and use the JOIN menu to play";
		shadow 
		proportional
		visible VIS_TEAM_SPECTATOR VIS_GT_TOURNAMENT
	}
	
	itemDef
	{
		name "SpecMessageTeamDeathMatch"
		rect SCREEN_X_MID $evalint(SCREEN_Y_MAX - 40 - BIGCHAR_HEIGHT - 4 + 1) NULL NULL
		fontsize BIGCHAR_WIDTH BIGCHAR_HEIGHT
		forecolor 1 1 1 1
		textAlign C
		caption "press ESC and use the JOIN menu to play";
		shadow 
		proportional
		visible VIS_TEAM_SPECTATOR VIS_GT_TDM
	}
	//==========================

	CrosshairNames
	{
		rect SCREEN_X_MID 174 NULL NULL //hardcoded 320 174
		fontsize BIGCHAR_WIDTH BIGCHAR_HEIGHT
		forecolor 1 1 1 1
		time 1000
		textAlign C
		proportional
		cvarTest "cg_drawCrosshair"
		cvarTest "cg_drawCrosshairNames"
	}
	
	StatusBar_TeamBar
	{
		rect SCREEN_X_MIN $evalint(SCREEN_Y_MAX - STATUSBAR_HEIGHT + 1) $evalint(SCREEN_X_MAX - SCREEN_X_MIN + 1) STATUSBAR_HEIGHT
		//rect  $evalint(SCREEN_X_MIN+10) $evalint(SCREEN_Y_MAX - STATUSBAR_HEIGHT + 1 +10) $evalint(SCREEN_X_MAX - SCREEN_X_MIN + 1 - 20) $evalint(STATUSBAR_HEIGHT-20) // pour test margin à virer
		forecolor NULL NULL NULL 0.33 // only the Alpha component is used. RGB will be replaced by team color
		background "gfx/2d/colorbar.tga"//colorbar will be used when background is not set
		visible 0 //visible VIS_TEAM_PLAY
	}

	itemDef
	{
		name "AmmoMessage"
		rect SCREEN_X_MID 64 NULL NULL
		caption "LOW AMMO WARNING"
		fontsize BIGCHAR_WIDTH BIGCHAR_HEIGHT
		forecolor 1 1 1 1
		textAlign C
		proportional
		shadow
		cvarTest "cg_drawAmmoWarning"
		visible VIS_LOW_AMMO_WARNING
	}
	
	itemDef
	{
		name "NoAmmoMessage"
		rect SCREEN_X_MID 64 NULL NULL
		caption "OUT OF AMMO"
		fontsize BIGCHAR_WIDTH BIGCHAR_HEIGHT
		forecolor 1 1 1 1
		textAlign C
		proportional
		shadow
		cvarTest "cg_drawAmmoWarning"
		visible VIS_OUT_OF_AMMO
	}

	
	itemDef
	{
		name "HoldableItem"
		rect $evalint(SCREEN_X_MAX + 1 - ICON_SIZE) $evalint((SCREEN_Y_MAX-ICON_SIZE)/2) ICON_SIZE ICON_SIZE
		background ICON_HOLDABLE_ITEM
	}

	Reward
	{
		rect SCREEN_X_MID $evalint(SCREEN_Y_MIN + STATUSBAR_HEIGHT - 4) $evalint(ICON_SIZE-4) $evalint(ICON_SIZE-4) //was hardcoded 320 56 ICON_SIZE-4 ICON_SIZE-4
		fontsize SMALLCHAR_WIDTH SMALLCHAR_HEIGHT
		forecolor 1 1 1 1
		time REWARD_TIME
		textAlign C
		shadow
		cvarTest "cg_drawRewards"
	}

	TeamChat
	{
		rect CHATLOC_X CHATLOC_Y NULL NULL //CHATLOC_X CHATLOC_Y TEAMCHAT_WIDTH TEAMCHAT_HEIGHT
		fontsize TINYCHAR_WIDTH TINYCHAR_HEIGHT
		forecolor 0 1 0 0.33
		background "gfx/2d/colorbar.tga"
		proportional
		visible VIS_TEAM_PLAY !VIS_TEAM_SPECTATOR
	}

	VoteMessageArena
	{
		rect $evalint(SCREEN_X_MIN - 0) $evalint(SCREEN_Y_MIN + 58) NULL NULL
		fontsize SMALLCHAR_WIDTH SMALLCHAR_HEIGHT
		forecolor 1 1 1 1
		proportional
		//shadow ?
	}

	VoteMessageWorld
	{
		rect SCREEN_X_MIN 90 NULL NULL
		fontsize SMALLCHAR_WIDTH SMALLCHAR_HEIGHT
		forecolor 1 1 1 1
		proportional
		//shadow ?
	}

	NetGraph
	{
		rect $evalint(SCREEN_X_MAX + 1 - 48) $evalint(SCREEN_Y_MAX + 1 - 48) 48 48
		fontsize 5 10
		forecolor 1 1 1 1
		fill true
		textAlign R
		proportional
		cvarTest "cg_lagometer"
		visible !VIS_LOCAL_SERVER
	}

	NetGraphPing
	{
		rect $evalint(SCREEN_X_MAX + 1 - 48) $evalint(SCREEN_Y_MAX + 1 - 48 - 100) 48 48 //q3A default: same as NetGraph
		fontsize 5 10
		forecolor 1 1 1 1
		proportional
		cvarTest "cg_drawPing"
		visible !VIS_LOCAL_SERVER
	}
	
	// upper right
	/*TeamOverlay
	{
		rect $evalint(SCREEN_X_MAX + 1 - ((TEAM_OVERLAY_MAXNAME_WIDTH + TEAM_OVERLAY_MAXLOCATION_WIDTH + 4 + 7) * TINYCHAR_WIDTH)) SCREEN_Y_MIN $evalint((TEAM_OVERLAY_MAXNAME_WIDTH + TEAM_OVERLAY_MAXLOCATION_WIDTH + 4 + 7) * TINYCHAR_WIDTH) TINYCHAR_HEIGHT
		fontsize TINYCHAR_WIDTH TINYCHAR_HEIGHT
		background "gfx/2d/colorbar.tga"
		forecolor 1 1 1 1
		proportional
		visible VIS_TEAM_PLAY VIS_TEAM_BLUE_OR_RED
		cvarTest "cg_drawTeamOverlay"
	}*/
	
	TeamOverlay
	{
		rect $evalint(SCREEN_X_MAX + 1 - ((TEAM_OVERLAY_MAXNAME_WIDTH + TEAM_OVERLAY_MAXLOCATION_WIDTH + 4 + 7) * TINYCHAR_WIDTH)) SCREEN_Y_MIN $evalint((TEAM_OVERLAY_MAXNAME_WIDTH + TEAM_OVERLAY_MAXLOCATION_WIDTH + 4 + 7) * TINYCHAR_WIDTH) TINYCHAR_HEIGHT
		fontsize TINYCHAR_WIDTH TINYCHAR_HEIGHT
		background "gfx/2d/colorbar.tga"
		forecolor 1 1 1 1
		backcolor T
		proportional
		visible VIS_TEAM_PLAY VIS_TEAM_BLUE_OR_RED
		cvarTest "cg_drawTeamOverlay"
		
	}
	
	TeamOverlay_Selected
	{
		//background "gfx/2d/colorbar.tga"
		fontsize TINYCHAR_WIDTH TINYCHAR_HEIGHT
		forecolor 1 0.9 0.7 1
		backcolor 1 1 0 1
		proportional
	}

	itemDef
	{
		name "SnapshotMessage"
		rect SCREEN_X_MAX NULL NULL NULL
		margin 4 0 4 0
		fontsize BIGCHAR_WIDTH BIGCHAR_HEIGHT
		forecolor 1 1 1 1
		shadow
		textAlign R
		caption VAL_SNAPSHOT
		anchors Bottom
		parent TeamOverlay
		cvarTest "cg_drawSnapshot"
	}

	itemDef
	{
		name "FPS"
		caption VAL_FPS
		margin 4 0 4 0
		fontsize BIGCHAR_WIDTH BIGCHAR_HEIGHT
		forecolor 1 1 1 1
		shadow
		textAlign R
		proportional
		anchors Bottom Right
		parent "SnapshotMessage"
		cvarTest "cg_drawFPS"
	}

	itemDef
	{
		name "PlayerSpeed"
		margin 4 0 4 0
		fontsize BIGCHAR_WIDTH BIGCHAR_HEIGHT
		forecolor 1 1 1 1
		shadow
		textAlign R// /!\ don't use textAlign here, use cg_drawSpeed 1 or 2
		proportional
		anchors Bottom Right
		parent "FPS"
		caption VAL_SPEED
		cvarTest "cg_drawSpeed"
	}

	Icon_Attacker
	{
		rect $evalfloat(SCREEN_X_MAX-60) 0 60 60
		time ATTACKER_HEAD_TIME
		parent "PlayerSpeed"
		anchors Bottom //Left
		cvarTest "cg_drawAttacker"
		icon3D
	}
	
	Attacker
	{
		margin 0 0 2 0
		fontsize 8 8
		forecolor 1 0 0 1
		time ATTACKER_HEAD_TIME
		textAlign L
		proportional
		
		parent Icon_Attacker	
		anchors Bottom Left
		cvarTest "cg_drawAttacker"
	}
	
	Score
	{
		rect $evalint(SCREEN_X_MAX + 1) $evalint(SCREEN_Y_MAX - STATUSBAR_HEIGHT) NULL NULL
		margin 4 4 4 4
		fontsize BIGCHAR_WIDTH BIGCHAR_HEIGHT
		forecolor 1 1 1 1
		background "gfx/2d/select" // user's team score is selected
		shadow
		textAlign R
		visible 0
	}
	
	#define charPUp_X 18
	#define charPUp_Y 20
	#define PUpIconSize 32

	PowerUpCounter // this one call Icon_PowerUp drawn. It should alway be place before Icon_PowerUp, even if visible 0
	{
		rect $evalint(SCREEN_X_MAX + 1 - 10 - 2 * charPUp_X) 240 0 0
		fontsize charPUp_X charPUp_Y
		pulseScale PULSE_SCALE
		forecolor 1.0, 1.0, 1.0, 1.0
	}
	
	Icon_PowerUp
	{
		rect NULL -10 PUpIconSize PUpIconSize
		anchors Left Middle
		parent PowerUpCounter
	}
	
	ItemPickup
	{
		rect $evalint(SCREEN_X_MIN + PICKUP_ICON_SIZE + PICKUP_ICON_SIZE / 2 ) $evalint(SCREEN_Y_MAX + 1 - STATUSBAR_HEIGHT - PICKUP_ICON_SIZE + PICKUP_TEXT_SIZE - 2) NULL NULL
		fontsize PICKUP_TEXT_SIZE PICKUP_TEXT_SIZE
		forecolor 1 1 1 1
		shadow
		proportional
	}
	
	Icon_ItemPickup
	{
		rect SCREEN_X_MIN $evalint(PICKUP_TEXT_SIZE - PICKUP_ICON_SIZE - 2) PICKUP_ICON_SIZE PICKUP_ICON_SIZE
		margin 8 0 0 0
		parent ItemPickup
		anchors Bottom Left
	}
	
	itemDef
	{
		//name "FollowMessage"
		rect SCREEN_X_MID $evalint(SCREEN_X_MIN + 24) NULL NULL
		caption "following"
		fontsize BIGCHAR_WIDTH BIGCHAR_HEIGHT
		forecolor 1 1 1 1
		textAlign C
		shadow
		visible VIS_PMF_FOLLOW
	}

	itemDef
	{
		//name "FollowName"
		rect SCREEN_X_MID $evalint(SCREEN_X_MIN + 40) NULL NULL
		fontsize GIANTCHAR_WIDTH GIANTCHAR_HEIGHT
		forecolor 1 1 1 1
		textAlign C
		shadow
		caption VAL_FOLLOW_NAME
		visible VIS_PMF_FOLLOW
	}
	
	itemDef
	{
		name "WarmupInfo"
		rect SCREEN_X_MID 24 NULL NULL
		caption "Waiting for players"
		fontsize BIGCHAR_WIDTH BIGCHAR_HEIGHT
		forecolor 1 1 1 1
		textAlign C
		proportional
		shadow
		visible !VIS_PMF_FOLLOW VIS_WARMUP
	}

	WarmupVersus
	{
		rect SCREEN_X_MID 20 NULL NULL
		fontsize GIANTCHAR_WIDTH GIANTCHAR_HEIGHT
		forecolor 1 1 1 1
		textAlign C
		proportional
		shadow
		visible !VIS_PMF_FOLLOW VIS_WARMUP VIS_GT_TOURNAMENT
	}
	
	WarmupGametype
	{
		rect SCREEN_X_MID 25 NULL NULL
		fontsize GIANTCHAR_WIDTH GIANTCHAR_HEIGHT
		forecolor 1 1 1 1
		textAlign C
		proportional
		shadow
		visible !VIS_PMF_FOLLOW VIS_WARMUP VIS_GT_TOURNAMENT
	}

	WarmupCount
	{
		rect SCREEN_X_MID 70 NULL NULL
		fontsize 16 NULL
		forecolor 1 1 1 1
		textAlign C
		proportional
		shadow
		visible !VIS_PMF_FOLLOW VIS_WARMUP
	}
	
	KillMessage
	{
		// this message is always displayed centered
		rect NULL $evalint(SCREEN_Y_MAX * 0.30) NULL NULL
		fontsize BIGCHAR_WIDTH NULL
		forecolor 1 1 1 1
	}
	
	itemDef
	{
		//name "Icon_Disconnect"
		rect SCREEN_X_MAX SCREEN_Y_MAX 48 48
		background "gfx/2d/net.tga"
		visible VIS_DISCONNECTED VIS_BLINK
	}
	
	itemDef
	{
		//name "Disconnect"
		caption  "Connection Interrupted"
		rect SCREEN_X_MID 100 NULL NULL
		forecolor 1 1 1 1
		fontsize BIGCHAR_WIDTH BIGCHAR_HEIGHT	
		shadow
		proportional
		textAlign C
		visible VIS_DISCONNECTED
	}
	
	ItemMessage  
	{
		rect NULL $evalint(SCREEN_Y_MIN + SCREEN_Y_MAX * 0.30) NULL NULL
		fontsize BIGCHAR_WIDTH NULL
		forecolor 1 1 1 1
	}
	
	WarmupFightMessage
	{
		rect NULL $evalint(SCREEN_Y_MAX * 0.25) NULL NULL
		fontsize $evalint(GIANTCHAR_WIDTH*2) NULL
		forecolor 1 1 1 1
	}
	
	ServerMessage
	{
		rect NULL $evalint(SCREEN_Y_MAX * 0.30) NULL NULL
		fontsize BIGCHAR_WIDTH NULL
		forecolor 1 1 1 1
	}

	
